
/home/matt/Documents/UECIDE/PulseRifleStd2/build/PulseRifleStd2.elf:     file format elf32-tradlittlemips

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000010  9d001970  9d001970  00011970  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .image_ptr_table 00000008  9d0000f8  9d0000f8  000100f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .app_excpt    00000010  9d000180  9d000180  00010180  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .vector_0     00000014  9d000200  9d000200  00010200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .vector_1     00000014  9d000220  9d000220  00010220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .vector_2     00000014  9d000240  9d000240  00010240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .vector_3     00000014  9d000260  9d000260  00010260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .vector_4     00000014  9d000280  9d000280  00010280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .vector_5     00000014  9d0002a0  9d0002a0  000102a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .vector_6     00000014  9d0002c0  9d0002c0  000102c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .vector_7     00000014  9d0002e0  9d0002e0  000102e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .vector_8     00000014  9d000300  9d000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .vector_9     00000014  9d000320  9d000320  00010320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .vector_10    00000014  9d000340  9d000340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .vector_11    00000014  9d000360  9d000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .vector_12    00000014  9d000380  9d000380  00010380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .vector_13    00000014  9d0003a0  9d0003a0  000103a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .vector_14    00000014  9d0003c0  9d0003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .vector_15    00000014  9d0003e0  9d0003e0  000103e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .vector_16    0000001c  9d000400  9d000400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .vector_17    00000014  9d000420  9d000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .vector_18    00000014  9d000440  9d000440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .vector_19    00000014  9d000460  9d000460  00010460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .vector_20    0000001c  9d000480  9d000480  00010480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .vector_21    00000014  9d0004a0  9d0004a0  000104a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .vector_22    00000014  9d0004c0  9d0004c0  000104c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .vector_23    00000014  9d0004e0  9d0004e0  000104e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .vector_24    00000014  9d000500  9d000500  00010500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .vector_25    00000014  9d000520  9d000520  00010520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .vector_26    00000014  9d000540  9d000540  00010540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .vector_27    00000014  9d000560  9d000560  00010560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .vector_28    00000014  9d000580  9d000580  00010580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .vector_29    00000014  9d0005a0  9d0005a0  000105a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .vector_30    00000014  9d0005c0  9d0005c0  000105c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .vector_31    00000014  9d0005e0  9d0005e0  000105e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .vector_32    00000014  9d000600  9d000600  00010600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .vector_33    00000014  9d000620  9d000620  00010620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .vector_34    00000014  9d000640  9d000640  00010640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .vector_35    00000014  9d000660  9d000660  00010660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .vector_36    00000014  9d000680  9d000680  00010680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .vector_37    00000014  9d0006a0  9d0006a0  000106a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .vector_38    00000014  9d0006c0  9d0006c0  000106c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .vector_39    00000014  9d0006e0  9d0006e0  000106e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .vector_40    00000014  9d000700  9d000700  00010700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .vector_41    00000014  9d000720  9d000720  00010720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .vector_42    00000014  9d000740  9d000740  00010740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .vector_43    00000014  9d000760  9d000760  00010760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .vector_44    00000014  9d000780  9d000780  00010780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .vector_45    00000014  9d0007a0  9d0007a0  000107a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .vector_46    00000014  9d0007c0  9d0007c0  000107c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .vector_47    00000014  9d0007e0  9d0007e0  000107e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .vector_48    00000014  9d000800  9d000800  00010800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .vector_49    00000014  9d000820  9d000820  00010820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .vector_50    00000014  9d000840  9d000840  00010840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .vector_51    00000014  9d000860  9d000860  00010860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .vector_52    00000014  9d000880  9d000880  00010880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .vector_53    00000014  9d0008a0  9d0008a0  000108a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .vector_54    00000014  9d0008c0  9d0008c0  000108c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .vector_55    00000014  9d0008e0  9d0008e0  000108e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .vector_56    00000014  9d000900  9d000900  00010900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .vector_57    00000014  9d000920  9d000920  00010920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .vector_58    00000014  9d000940  9d000940  00010940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .vector_59    00000014  9d000960  9d000960  00010960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .vector_60    00000014  9d000980  9d000980  00010980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .vector_61    00000014  9d0009a0  9d0009a0  000109a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .vector_62    00000014  9d0009c0  9d0009c0  000109c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .vector_63    00000014  9d0009e0  9d0009e0  000109e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .startup      000001e0  9d001980  9d001980  00011980  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text         0000b0c0  9d001b60  9d001b60  00011b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .init         00000024  9d00cc20  9d00cc20  0001cc20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .fini         0000001c  9d00cc44  9d00cc44  0001cc44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .ctors        00000010  9d00cc60  9d00cc60  0001cc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 72 .dtors        00000008  9d00cc70  9d00cc70  0001cc70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 73 .header_info  0000004c  9d00cc78  9d00cc78  0001cc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 74 .ram_exchange_data 00000008  a0000000  a0000000  00042800  2**0
                  CONTENTS
 75 .rodata       0001f478  9d00ccc4  9d00ccc4  0001ccc4  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 76 .data         00000940  a0000008  9d02c13c  00040008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 77 .sdata        00000018  a0000948  9d02ca7c  00040948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 78 .sbss         00000080  a0000960  9d02ca94  00040960  2**3
                  ALLOC
 79 .bss          00000b74  a00009e0  9d02ca94  000409e0  2**2
                  ALLOC
 80 .heap         00000800  a0001558  9d02ca94  00041558  2**0
                  ALLOC
 81 .stack        00000800  a0001d58  9d02ca94  00041d58  2**0
                  ALLOC
 82 .comment      00000095  00000000  00000000  00042808  2**0
                  CONTENTS, READONLY
 83 .debug_aranges 00001820  00000000  00000000  000428a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 84 .debug_pubnames 000028e3  00000000  00000000  000440c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 85 .debug_info   0003571a  00000000  00000000  000469a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 86 .debug_abbrev 0000a350  00000000  00000000  0007c0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 87 .debug_line   0000f09a  00000000  00000000  0008640d  2**0
                  CONTENTS, READONLY, DEBUGGING
 88 .debug_frame  00002d20  00000000  00000000  000954a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 89 .debug_str    0000741b  00000000  00000000  000981c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 90 .debug_loc    00021616  00000000  00000000  0009f5e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 91 .debug_pubtypes 00003389  00000000  00000000  000c0bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 92 .debug_ranges 00004248  00000000  00000000  000c3f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 93 .gnu.attributes 00000010  00000000  00000000  000c81d0  2**0
                  CONTENTS, READONLY
 94 .mdebug.abi32 00000000  a0002800  a0002800  00042800  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .reset:

9d001970 <_reset>:
9d001970:	3c1a9d00 	lui	k0,0x9d00
9d001974:	275a1980 	addiu	k0,k0,6528
9d001978:	03400008 	jr	k0
9d00197c:	00000000 	nop
Disassembly of section .app_excpt:

9d000180 <_gen_exception>:
9d000180:	3c1a9d01 	lui	k0,0x9d01
9d000184:	275abea8 	addiu	k0,k0,-16728
9d000188:	03400008 	jr	k0
9d00018c:	00000000 	nop

Disassembly of section .vector_0:

9d000200 <__vector_0>:
    lw       k0,4 * number (k0); \
    jr       k0; \
    .end VECTOR_SYMBOLNAME(number); \
    .size VECTOR_SYMBOLNAME(number), .-VECTOR_SYMBOLNAME(number);

 VECTOR_ENTRY(0)
9d000200:	3c1aa000 	lui	k0,0xa000
9d000204:	275a0020 	addiu	k0,k0,32
9d000208:	8f5a0000 	lw	k0,0(k0)
9d00020c:	03400008 	jr	k0
9d000210:	00000000 	nop

Disassembly of section .vector_1:

9d000220 <__vector_1>:
 VECTOR_ENTRY(1)
9d000220:	3c1aa000 	lui	k0,0xa000
9d000224:	275a0020 	addiu	k0,k0,32
9d000228:	8f5a0004 	lw	k0,4(k0)
9d00022c:	03400008 	jr	k0
9d000230:	00000000 	nop
Disassembly of section .vector_2:

9d000240 <__vector_2>:
 VECTOR_ENTRY(2)
9d000240:	3c1aa000 	lui	k0,0xa000
9d000244:	275a0020 	addiu	k0,k0,32
9d000248:	8f5a0008 	lw	k0,8(k0)
9d00024c:	03400008 	jr	k0
9d000250:	00000000 	nop

Disassembly of section .vector_3:

9d000260 <__vector_3>:
 VECTOR_ENTRY(3)
9d000260:	3c1aa000 	lui	k0,0xa000
9d000264:	275a0020 	addiu	k0,k0,32
9d000268:	8f5a000c 	lw	k0,12(k0)
9d00026c:	03400008 	jr	k0
9d000270:	00000000 	nop

Disassembly of section .vector_4:

9d000280 <__vector_4>:
 VECTOR_ENTRY(4)
9d000280:	3c1aa000 	lui	k0,0xa000
9d000284:	275a0020 	addiu	k0,k0,32
9d000288:	8f5a0010 	lw	k0,16(k0)
9d00028c:	03400008 	jr	k0
9d000290:	00000000 	nop

Disassembly of section .vector_5:

9d0002a0 <__vector_5>:
 VECTOR_ENTRY(5)
9d0002a0:	3c1aa000 	lui	k0,0xa000
9d0002a4:	275a0020 	addiu	k0,k0,32
9d0002a8:	8f5a0014 	lw	k0,20(k0)
9d0002ac:	03400008 	jr	k0
9d0002b0:	00000000 	nop

Disassembly of section .vector_6:

9d0002c0 <__vector_6>:
 VECTOR_ENTRY(6)
9d0002c0:	3c1aa000 	lui	k0,0xa000
9d0002c4:	275a0020 	addiu	k0,k0,32
9d0002c8:	8f5a0018 	lw	k0,24(k0)
9d0002cc:	03400008 	jr	k0
9d0002d0:	00000000 	nop

Disassembly of section .vector_7:

9d0002e0 <__vector_7>:
 VECTOR_ENTRY(7)
9d0002e0:	3c1aa000 	lui	k0,0xa000
9d0002e4:	275a0020 	addiu	k0,k0,32
9d0002e8:	8f5a001c 	lw	k0,28(k0)
9d0002ec:	03400008 	jr	k0
9d0002f0:	00000000 	nop

Disassembly of section .vector_8:

9d000300 <__vector_8>:
 VECTOR_ENTRY(8)
9d000300:	3c1aa000 	lui	k0,0xa000
9d000304:	275a0020 	addiu	k0,k0,32
9d000308:	8f5a0020 	lw	k0,32(k0)
9d00030c:	03400008 	jr	k0
9d000310:	00000000 	nop

Disassembly of section .vector_9:

9d000320 <__vector_9>:
 VECTOR_ENTRY(9)
9d000320:	3c1aa000 	lui	k0,0xa000
9d000324:	275a0020 	addiu	k0,k0,32
9d000328:	8f5a0024 	lw	k0,36(k0)
9d00032c:	03400008 	jr	k0
9d000330:	00000000 	nop

Disassembly of section .vector_10:

9d000340 <__vector_10>:
 VECTOR_ENTRY(10)
9d000340:	3c1aa000 	lui	k0,0xa000
9d000344:	275a0020 	addiu	k0,k0,32
9d000348:	8f5a0028 	lw	k0,40(k0)
9d00034c:	03400008 	jr	k0
9d000350:	00000000 	nop

Disassembly of section .vector_11:

9d000360 <__vector_11>:
 VECTOR_ENTRY(11)
9d000360:	3c1aa000 	lui	k0,0xa000
9d000364:	275a0020 	addiu	k0,k0,32
9d000368:	8f5a002c 	lw	k0,44(k0)
9d00036c:	03400008 	jr	k0
9d000370:	00000000 	nop

Disassembly of section .vector_12:

9d000380 <__vector_12>:
 VECTOR_ENTRY(12)
9d000380:	3c1aa000 	lui	k0,0xa000
9d000384:	275a0020 	addiu	k0,k0,32
9d000388:	8f5a0030 	lw	k0,48(k0)
9d00038c:	03400008 	jr	k0
9d000390:	00000000 	nop

Disassembly of section .vector_13:

9d0003a0 <__vector_13>:
 VECTOR_ENTRY(13)
9d0003a0:	3c1aa000 	lui	k0,0xa000
9d0003a4:	275a0020 	addiu	k0,k0,32
9d0003a8:	8f5a0034 	lw	k0,52(k0)
9d0003ac:	03400008 	jr	k0
9d0003b0:	00000000 	nop

Disassembly of section .vector_14:

9d0003c0 <__vector_14>:
 VECTOR_ENTRY(14)
9d0003c0:	3c1aa000 	lui	k0,0xa000
9d0003c4:	275a0020 	addiu	k0,k0,32
9d0003c8:	8f5a0038 	lw	k0,56(k0)
9d0003cc:	03400008 	jr	k0
9d0003d0:	00000000 	nop

Disassembly of section .vector_15:

9d0003e0 <__vector_15>:
 VECTOR_ENTRY(15)
9d0003e0:	3c1aa000 	lui	k0,0xa000
9d0003e4:	275a0020 	addiu	k0,k0,32
9d0003e8:	8f5a003c 	lw	k0,60(k0)
9d0003ec:	03400008 	jr	k0
9d0003f0:	00000000 	nop

Disassembly of section .vector_16:

9d000400 <__vector_16>:
 VECTOR_ENTRY(16)
9d000400:	3c1aa000 	lui	k0,0xa000
9d000404:	275a0020 	addiu	k0,k0,32
9d000408:	8f5a0040 	lw	k0,64(k0)
9d00040c:	03400008 	jr	k0
9d000410:	00000000 	nop
9d000414 <__vector_dispatch_16>:
9d000414:	0b400b8f 	j	9d002e3c <_T4Interrupt>
9d000418:	00000000 	nop

Disassembly of section .vector_17:
9d000420 <__vector_17>:
 VECTOR_ENTRY(17)
9d000420:	3c1aa000 	lui	k0,0xa000
9d000424:	275a0020 	addiu	k0,k0,32
9d000428:	8f5a0044 	lw	k0,68(k0)
9d00042c:	03400008 	jr	k0
9d000430:	00000000 	nop

Disassembly of section .vector_18:

9d000440 <__vector_18>:
 VECTOR_ENTRY(18)
9d000440:	3c1aa000 	lui	k0,0xa000
9d000444:	275a0020 	addiu	k0,k0,32
9d000448:	8f5a0048 	lw	k0,72(k0)
9d00044c:	03400008 	jr	k0
9d000450:	00000000 	nop

Disassembly of section .vector_19:

9d000460 <__vector_19>:
 VECTOR_ENTRY(19)
9d000460:	3c1aa000 	lui	k0,0xa000
9d000464:	275a0020 	addiu	k0,k0,32
9d000468:	8f5a004c 	lw	k0,76(k0)
9d00046c:	03400008 	jr	k0
9d000470:	00000000 	nop

Disassembly of section .vector_20:

9d000480 <__vector_20>:
 VECTOR_ENTRY(20)
9d000480:	3c1aa000 	lui	k0,0xa000
9d000484:	275a0020 	addiu	k0,k0,32
9d000488:	8f5a0050 	lw	k0,80(k0)
9d00048c:	03400008 	jr	k0
9d000490:	00000000 	nop

9d000494 <__vector_dispatch_20>:
9d000494:	0b400d57 	j	9d00355c <_T5Interrupt>
9d000498:	00000000 	nop

Disassembly of section .vector_21:

9d0004a0 <__vector_21>:
 VECTOR_ENTRY(21)
9d0004a0:	3c1aa000 	lui	k0,0xa000
9d0004a4:	275a0020 	addiu	k0,k0,32
9d0004a8:	8f5a0054 	lw	k0,84(k0)
9d0004ac:	03400008 	jr	k0
9d0004b0:	00000000 	nop

Disassembly of section .vector_22:

9d0004c0 <__vector_22>:
 VECTOR_ENTRY(22)
9d0004c0:	3c1aa000 	lui	k0,0xa000
9d0004c4:	275a0020 	addiu	k0,k0,32
9d0004c8:	8f5a0058 	lw	k0,88(k0)
9d0004cc:	03400008 	jr	k0
9d0004d0:	00000000 	nop

Disassembly of section .vector_23:

9d0004e0 <__vector_23>:
 VECTOR_ENTRY(23)
9d0004e0:	3c1aa000 	lui	k0,0xa000
9d0004e4:	275a0020 	addiu	k0,k0,32
9d0004e8:	8f5a005c 	lw	k0,92(k0)
9d0004ec:	03400008 	jr	k0
9d0004f0:	00000000 	nop

Disassembly of section .vector_24:

9d000500 <__vector_24>:
 VECTOR_ENTRY(24)
9d000500:	3c1aa000 	lui	k0,0xa000
9d000504:	275a0020 	addiu	k0,k0,32
9d000508:	8f5a0060 	lw	k0,96(k0)
9d00050c:	03400008 	jr	k0
9d000510:	00000000 	nop

Disassembly of section .vector_25:

9d000520 <__vector_25>:
 VECTOR_ENTRY(25)
9d000520:	3c1aa000 	lui	k0,0xa000
9d000524:	275a0020 	addiu	k0,k0,32
9d000528:	8f5a0064 	lw	k0,100(k0)
9d00052c:	03400008 	jr	k0
9d000530:	00000000 	nop

Disassembly of section .vector_26:

9d000540 <__vector_26>:
 VECTOR_ENTRY(26)
9d000540:	3c1aa000 	lui	k0,0xa000
9d000544:	275a0020 	addiu	k0,k0,32
9d000548:	8f5a0068 	lw	k0,104(k0)
9d00054c:	03400008 	jr	k0
9d000550:	00000000 	nop
Disassembly of section .vector_27:

9d000560 <__vector_27>:
 VECTOR_ENTRY(27)
9d000560:	3c1aa000 	lui	k0,0xa000
9d000564:	275a0020 	addiu	k0,k0,32
9d000568:	8f5a006c 	lw	k0,108(k0)
9d00056c:	03400008 	jr	k0
9d000570:	00000000 	nop

Disassembly of section .vector_28:

9d000580 <__vector_28>:
 VECTOR_ENTRY(28)
9d000580:	3c1aa000 	lui	k0,0xa000
9d000584:	275a0020 	addiu	k0,k0,32
9d000588:	8f5a0070 	lw	k0,112(k0)
9d00058c:	03400008 	jr	k0
9d000590:	00000000 	nop

Disassembly of section .vector_29:
9d0005a0 <__vector_29>:
 VECTOR_ENTRY(29)
9d0005a0:	3c1aa000 	lui	k0,0xa000
9d0005a4:	275a0020 	addiu	k0,k0,32
9d0005a8:	8f5a0074 	lw	k0,116(k0)
9d0005ac:	03400008 	jr	k0
9d0005b0:	00000000 	nop

Disassembly of section .vector_30:

9d0005c0 <__vector_30>:
 VECTOR_ENTRY(30)
9d0005c0:	3c1aa000 	lui	k0,0xa000
9d0005c4:	275a0020 	addiu	k0,k0,32
9d0005c8:	8f5a0078 	lw	k0,120(k0)
9d0005cc:	03400008 	jr	k0
9d0005d0:	00000000 	nop

Disassembly of section .vector_31:

9d0005e0 <__vector_31>:
 VECTOR_ENTRY(31)
9d0005e0:	3c1aa000 	lui	k0,0xa000
9d0005e4:	275a0020 	addiu	k0,k0,32
9d0005e8:	8f5a007c 	lw	k0,124(k0)
9d0005ec:	03400008 	jr	k0
9d0005f0:	00000000 	nop
Disassembly of section .vector_32:

9d000600 <__vector_32>:
 VECTOR_ENTRY(32)
9d000600:	3c1aa000 	lui	k0,0xa000
9d000604:	275a0020 	addiu	k0,k0,32
9d000608:	8f5a0080 	lw	k0,128(k0)
9d00060c:	03400008 	jr	k0
9d000610:	00000000 	nop

Disassembly of section .vector_33:

9d000620 <__vector_33>:
 VECTOR_ENTRY(33)
9d000620:	3c1aa000 	lui	k0,0xa000
9d000624:	275a0020 	addiu	k0,k0,32
9d000628:	8f5a0084 	lw	k0,132(k0)
9d00062c:	03400008 	jr	k0
9d000630:	00000000 	nop

Disassembly of section .vector_34:
9d000640 <__vector_34>:
 VECTOR_ENTRY(34)
9d000640:	3c1aa000 	lui	k0,0xa000
9d000644:	275a0020 	addiu	k0,k0,32
9d000648:	8f5a0088 	lw	k0,136(k0)
9d00064c:	03400008 	jr	k0
9d000650:	00000000 	nop

Disassembly of section .vector_35:

9d000660 <__vector_35>:
 VECTOR_ENTRY(35)
9d000660:	3c1aa000 	lui	k0,0xa000
9d000664:	275a0020 	addiu	k0,k0,32
9d000668:	8f5a008c 	lw	k0,140(k0)
9d00066c:	03400008 	jr	k0
9d000670:	00000000 	nop

Disassembly of section .vector_36:

9d000680 <__vector_36>:
 VECTOR_ENTRY(36)
9d000680:	3c1aa000 	lui	k0,0xa000
9d000684:	275a0020 	addiu	k0,k0,32
9d000688:	8f5a0090 	lw	k0,144(k0)
9d00068c:	03400008 	jr	k0
9d000690:	00000000 	nop
Disassembly of section .vector_37:

9d0006a0 <__vector_37>:
 VECTOR_ENTRY(37)
9d0006a0:	3c1aa000 	lui	k0,0xa000
9d0006a4:	275a0020 	addiu	k0,k0,32
9d0006a8:	8f5a0094 	lw	k0,148(k0)
9d0006ac:	03400008 	jr	k0
9d0006b0:	00000000 	nop

Disassembly of section .vector_38:

9d0006c0 <__vector_38>:
 VECTOR_ENTRY(38)
9d0006c0:	3c1aa000 	lui	k0,0xa000
9d0006c4:	275a0020 	addiu	k0,k0,32
9d0006c8:	8f5a0098 	lw	k0,152(k0)
9d0006cc:	03400008 	jr	k0
9d0006d0:	00000000 	nop

Disassembly of section .vector_39:
9d0006e0 <__vector_39>:
 VECTOR_ENTRY(39)
9d0006e0:	3c1aa000 	lui	k0,0xa000
9d0006e4:	275a0020 	addiu	k0,k0,32
9d0006e8:	8f5a009c 	lw	k0,156(k0)
9d0006ec:	03400008 	jr	k0
9d0006f0:	00000000 	nop

Disassembly of section .vector_40:

9d000700 <__vector_40>:
 VECTOR_ENTRY(40)
9d000700:	3c1aa000 	lui	k0,0xa000
9d000704:	275a0020 	addiu	k0,k0,32
9d000708:	8f5a00a0 	lw	k0,160(k0)
9d00070c:	03400008 	jr	k0
9d000710:	00000000 	nop

Disassembly of section .vector_41:

9d000720 <__vector_41>:
 VECTOR_ENTRY(41)
9d000720:	3c1aa000 	lui	k0,0xa000
9d000724:	275a0020 	addiu	k0,k0,32
9d000728:	8f5a00a4 	lw	k0,164(k0)
9d00072c:	03400008 	jr	k0
9d000730:	00000000 	nop
Disassembly of section .vector_42:

9d000740 <__vector_42>:
 VECTOR_ENTRY(42)
9d000740:	3c1aa000 	lui	k0,0xa000
9d000744:	275a0020 	addiu	k0,k0,32
9d000748:	8f5a00a8 	lw	k0,168(k0)
9d00074c:	03400008 	jr	k0
9d000750:	00000000 	nop

Disassembly of section .vector_43:

9d000760 <__vector_43>:
 VECTOR_ENTRY(43)
9d000760:	3c1aa000 	lui	k0,0xa000
9d000764:	275a0020 	addiu	k0,k0,32
9d000768:	8f5a00ac 	lw	k0,172(k0)
9d00076c:	03400008 	jr	k0
9d000770:	00000000 	nop

Disassembly of section .vector_44:
9d000780 <__vector_44>:
 VECTOR_ENTRY(44)
9d000780:	3c1aa000 	lui	k0,0xa000
9d000784:	275a0020 	addiu	k0,k0,32
9d000788:	8f5a00b0 	lw	k0,176(k0)
9d00078c:	03400008 	jr	k0
9d000790:	00000000 	nop

Disassembly of section .vector_45:

9d0007a0 <__vector_45>:
 VECTOR_ENTRY(45)
9d0007a0:	3c1aa000 	lui	k0,0xa000
9d0007a4:	275a0020 	addiu	k0,k0,32
9d0007a8:	8f5a00b4 	lw	k0,180(k0)
9d0007ac:	03400008 	jr	k0
9d0007b0:	00000000 	nop

Disassembly of section .vector_46:

9d0007c0 <__vector_46>:
 VECTOR_ENTRY(46)
9d0007c0:	3c1aa000 	lui	k0,0xa000
9d0007c4:	275a0020 	addiu	k0,k0,32
9d0007c8:	8f5a00b8 	lw	k0,184(k0)
9d0007cc:	03400008 	jr	k0
9d0007d0:	00000000 	nop
Disassembly of section .vector_47:

9d0007e0 <__vector_47>:
 VECTOR_ENTRY(47)
9d0007e0:	3c1aa000 	lui	k0,0xa000
9d0007e4:	275a0020 	addiu	k0,k0,32
9d0007e8:	8f5a00bc 	lw	k0,188(k0)
9d0007ec:	03400008 	jr	k0
9d0007f0:	00000000 	nop

Disassembly of section .vector_48:

9d000800 <__vector_48>:
 VECTOR_ENTRY(48)
9d000800:	3c1aa000 	lui	k0,0xa000
9d000804:	275a0020 	addiu	k0,k0,32
9d000808:	8f5a00c0 	lw	k0,192(k0)
9d00080c:	03400008 	jr	k0
9d000810:	00000000 	nop

Disassembly of section .vector_49:
9d000820 <__vector_49>:
 VECTOR_ENTRY(49)
9d000820:	3c1aa000 	lui	k0,0xa000
9d000824:	275a0020 	addiu	k0,k0,32
9d000828:	8f5a00c4 	lw	k0,196(k0)
9d00082c:	03400008 	jr	k0
9d000830:	00000000 	nop

Disassembly of section .vector_50:

9d000840 <__vector_50>:
 VECTOR_ENTRY(50)
9d000840:	3c1aa000 	lui	k0,0xa000
9d000844:	275a0020 	addiu	k0,k0,32
9d000848:	8f5a00c8 	lw	k0,200(k0)
9d00084c:	03400008 	jr	k0
9d000850:	00000000 	nop

Disassembly of section .vector_51:

9d000860 <__vector_51>:
 VECTOR_ENTRY(51)
9d000860:	3c1aa000 	lui	k0,0xa000
9d000864:	275a0020 	addiu	k0,k0,32
9d000868:	8f5a00cc 	lw	k0,204(k0)
9d00086c:	03400008 	jr	k0
9d000870:	00000000 	nop
Disassembly of section .vector_52:

9d000880 <__vector_52>:
 VECTOR_ENTRY(52)
9d000880:	3c1aa000 	lui	k0,0xa000
9d000884:	275a0020 	addiu	k0,k0,32
9d000888:	8f5a00d0 	lw	k0,208(k0)
9d00088c:	03400008 	jr	k0
9d000890:	00000000 	nop

Disassembly of section .vector_53:

9d0008a0 <__vector_53>:
 VECTOR_ENTRY(53)
9d0008a0:	3c1aa000 	lui	k0,0xa000
9d0008a4:	275a0020 	addiu	k0,k0,32
9d0008a8:	8f5a00d4 	lw	k0,212(k0)
9d0008ac:	03400008 	jr	k0
9d0008b0:	00000000 	nop

Disassembly of section .vector_54:
9d0008c0 <__vector_54>:
 VECTOR_ENTRY(54)
9d0008c0:	3c1aa000 	lui	k0,0xa000
9d0008c4:	275a0020 	addiu	k0,k0,32
9d0008c8:	8f5a00d8 	lw	k0,216(k0)
9d0008cc:	03400008 	jr	k0
9d0008d0:	00000000 	nop

Disassembly of section .vector_55:

9d0008e0 <__vector_55>:
 VECTOR_ENTRY(55)
9d0008e0:	3c1aa000 	lui	k0,0xa000
9d0008e4:	275a0020 	addiu	k0,k0,32
9d0008e8:	8f5a00dc 	lw	k0,220(k0)
9d0008ec:	03400008 	jr	k0
9d0008f0:	00000000 	nop

Disassembly of section .vector_56:

9d000900 <__vector_56>:
 VECTOR_ENTRY(56)
9d000900:	3c1aa000 	lui	k0,0xa000
9d000904:	275a0020 	addiu	k0,k0,32
9d000908:	8f5a00e0 	lw	k0,224(k0)
9d00090c:	03400008 	jr	k0
9d000910:	00000000 	nop
Disassembly of section .vector_57:

9d000920 <__vector_57>:
 VECTOR_ENTRY(57)
9d000920:	3c1aa000 	lui	k0,0xa000
9d000924:	275a0020 	addiu	k0,k0,32
9d000928:	8f5a00e4 	lw	k0,228(k0)
9d00092c:	03400008 	jr	k0
9d000930:	00000000 	nop

Disassembly of section .vector_58:

9d000940 <__vector_58>:
 VECTOR_ENTRY(58)
9d000940:	3c1aa000 	lui	k0,0xa000
9d000944:	275a0020 	addiu	k0,k0,32
9d000948:	8f5a00e8 	lw	k0,232(k0)
9d00094c:	03400008 	jr	k0
9d000950:	00000000 	nop

Disassembly of section .vector_59:
9d000960 <__vector_59>:
 VECTOR_ENTRY(59)
9d000960:	3c1aa000 	lui	k0,0xa000
9d000964:	275a0020 	addiu	k0,k0,32
9d000968:	8f5a00ec 	lw	k0,236(k0)
9d00096c:	03400008 	jr	k0
9d000970:	00000000 	nop

Disassembly of section .vector_60:

9d000980 <__vector_60>:
 VECTOR_ENTRY(60)
9d000980:	3c1aa000 	lui	k0,0xa000
9d000984:	275a0020 	addiu	k0,k0,32
9d000988:	8f5a00f0 	lw	k0,240(k0)
9d00098c:	03400008 	jr	k0
9d000990:	00000000 	nop

Disassembly of section .vector_61:

9d0009a0 <__vector_61>:
 VECTOR_ENTRY(61)
9d0009a0:	3c1aa000 	lui	k0,0xa000
9d0009a4:	275a0020 	addiu	k0,k0,32
9d0009a8:	8f5a00f4 	lw	k0,244(k0)
9d0009ac:	03400008 	jr	k0
9d0009b0:	00000000 	nop
Disassembly of section .vector_62:

9d0009c0 <__vector_62>:
 VECTOR_ENTRY(62)
9d0009c0:	3c1aa000 	lui	k0,0xa000
9d0009c4:	275a0020 	addiu	k0,k0,32
9d0009c8:	8f5a00f8 	lw	k0,248(k0)
9d0009cc:	03400008 	jr	k0
9d0009d0:	00000000 	nop

Disassembly of section .vector_63:

9d0009e0 <__vector_63>:
 VECTOR_ENTRY(63)
9d0009e0:	3c1aa000 	lui	k0,0xa000
9d0009e4:	275a0020 	addiu	k0,k0,32
9d0009e8:	8f5a00fc 	lw	k0,252(k0)
9d0009ec:	03400008 	jr	k0
9d0009f0:	00000000 	nop

Disassembly of section .startup:

9d001980 <_startup>:
9d001980:	401a6000 	mfc0	k0,c0_status
9d001984:	7f5a04c0 	ext	k0,k0,0x13,0x1
9d001988:	13400005 	beqz	k0,9d0019a0 <_no_nmi>
9d00198c:	00000000 	nop
9d001990:	3c1a9d01 	lui	k0,0x9d01
9d001994:	275abf90 	addiu	k0,k0,-16496
9d001998:	03400008 	jr	k0
9d00199c:	00000000 	nop

9d0019a0 <_no_nmi>:
9d0019a0:	3c1da001 	lui	sp,0xa001
9d0019a4:	27bd0000 	addiu	sp,sp,0
9d0019a8:	3c1ca001 	lui	gp,0xa001
9d0019ac:	279c8940 	addiu	gp,gp,-30400
9d0019b0:	40096002 	mfc0	t1,c0_srsctl
9d0019b4:	01205820 	add	t3,t1,zero
9d0019b8:	7d2a1e80 	ext	t2,t1,0x1a,0x4
9d0019bc:	7d494984 	ins	t1,t2,0x6,0x4
9d0019c0:	40896002 	mtc0	t1,c0_srsctl
9d0019c4:	41dce000 	wrpgpr	gp,gp
9d0019c8:	408b6002 	mtc0	t3,c0_srsctl
9d0019cc:	3c089d01 	lui	t0,0x9d01
9d0019d0:	2508bf80 	addiu	t0,t0,-16512
9d0019d4:	0100f809 	jalr	t0
9d0019d8:	00000000 	nop
9d0019dc:	3c08a000 	lui	t0,0xa000
9d0019e0:	25080960 	addiu	t0,t0,2400
9d0019e4:	3c09a000 	lui	t1,0xa000
9d0019e8:	25291554 	addiu	t1,t1,5460
9d0019ec:	10000006 	b	9d001a08 <_bss_check>
9d0019f0:	00000000 	nop

9d0019f4 <_bss_init>:
9d0019f4:	ad000000 	sw	zero,0(t0)
9d0019f8:	ad000004 	sw	zero,4(t0)
9d0019fc:	ad000008 	sw	zero,8(t0)
9d001a00:	ad00000c 	sw	zero,12(t0)
9d001a04:	25080010 	addiu	t0,t0,16

9d001a08 <_bss_check>:
9d001a08:	0109082b 	sltu	at,t0,t1
9d001a0c:	1420fff9 	bnez	at,9d0019f4 <_bss_init>
9d001a10:	00000000 	nop
9d001a14:	3c089d03 	lui	t0,0x9d03
9d001a18:	2508c13c 	addiu	t0,t0,-16068
9d001a1c:	3c09a000 	lui	t1,0xa000
9d001a20:	25290008 	addiu	t1,t1,8
9d001a24:	3c0aa000 	lui	t2,0xa000
9d001a28:	254a0960 	addiu	t2,t2,2400
9d001a2c:	10000005 	b	9d001a44 <_init_check>
9d001a30:	00000000 	nop

9d001a34 <_init_data>:
9d001a34:	8d0b0000 	lw	t3,0(t0)
9d001a38:	ad2b0000 	sw	t3,0(t1)
9d001a3c:	25080004 	addiu	t0,t0,4
9d001a40:	25290004 	addiu	t1,t1,4

9d001a44 <_init_check>:
9d001a44:	012a082b 	sltu	at,t1,t2
9d001a48:	1420fffa 	bnez	at,9d001a34 <_init_data>
9d001a4c:	00000000 	nop
9d001a50:	3c090000 	lui	t1,0x0
9d001a54:	25290000 	addiu	t1,t1,0
9d001a58:	1120001d 	beqz	t1,9d001ad0 <_ramfunc_done>
9d001a5c:	00000000 	nop
9d001a60:	3c089d03 	lui	t0,0x9d03
9d001a64:	2508ca94 	addiu	t0,t0,-13676
9d001a68:	3c09a000 	lui	t1,0xa000
9d001a6c:	25292800 	addiu	t1,t1,10240
9d001a70:	3c0aa000 	lui	t2,0xa000
9d001a74:	254a2800 	addiu	t2,t2,10240

9d001a78 <_init_ramfunc>:
9d001a78:	8d0b0000 	lw	t3,0(t0)
9d001a7c:	ad2b0000 	sw	t3,0(t1)
9d001a80:	25080004 	addiu	t0,t0,4
9d001a84:	25290004 	addiu	t1,t1,4

9d001a88 <_ramfunc_check>:
9d001a88:	012a082b 	sltu	at,t1,t2
9d001a8c:	1420fffa 	bnez	at,9d001a78 <_init_ramfunc>
9d001a90:	00000000 	nop
9d001a94:	3c090000 	lui	t1,0x0
9d001a98:	25292800 	addiu	t1,t1,10240
9d001a9c:	3c0abf88 	lui	t2,0xbf88
9d001aa0:	254a2010 	addiu	t2,t2,8208
9d001aa4:	ad490000 	sw	t1,0(t2)
9d001aa8:	3c090001 	lui	t1,0x1
9d001aac:	25290000 	addiu	t1,t1,0
9d001ab0:	3c0abf88 	lui	t2,0xbf88
9d001ab4:	254a2020 	addiu	t2,t2,8224
9d001ab8:	ad490000 	sw	t1,0(t2)
9d001abc:	3c090001 	lui	t1,0x1
9d001ac0:	25290000 	addiu	t1,t1,0
9d001ac4:	3c0abf88 	lui	t2,0xbf88
9d001ac8:	254a2030 	addiu	t2,t2,8240
9d001acc:	ad490000 	sw	t1,0(t2)

9d001ad0 <_ramfunc_done>:
9d001ad0:	40804800 	mtc0	zero,c0_count
9d001ad4:	240affff 	li	t2,-1
9d001ad8:	408a5800 	mtc0	t2,c0_compare
9d001adc:	3c099d00 	lui	t1,0x9d00
9d001ae0:	25290000 	addiu	t1,t1,0
9d001ae4:	40897801 	mtc0	t1,c0_ebase
9d001ae8:	3c090000 	lui	t1,0x0
9d001aec:	25290001 	addiu	t1,t1,1
9d001af0:	240a0000 	li	t2,0
9d001af4:	7d2a4944 	ins	t2,t1,0x5,0x5
9d001af8:	408a6001 	mtc0	t2,c0_intctl
9d001afc:	3c090080 	lui	t1,0x80
9d001b00:	40896800 	mtc0	t1,c0_cause
9d001b04:	40088000 	mfc0	t0,c0_config
9d001b08:	7d090580 	ext	t1,t0,0x16,0x1
9d001b0c:	00094c40 	sll	t1,t1,0x11
9d001b10:	40086000 	mfc0	t0,c0_status
9d001b14:	3c010058 	lui	at,0x58
9d001b18:	01014024 	and	t0,t0,at
9d001b1c:	01284025 	or	t0,t1,t0
9d001b20:	40886000 	mtc0	t0,c0_status
9d001b24:	3c089d01 	lui	t0,0x9d01
9d001b28:	2508bf88 	addiu	t0,t0,-16504
9d001b2c:	0100f809 	jalr	t0
9d001b30:	00000000 	nop
9d001b34:	40086000 	mfc0	t0,c0_status
9d001b38:	3c01ffbf 	lui	at,0xffbf
9d001b3c:	3421ffff 	ori	at,at,0xffff
9d001b40:	01014024 	and	t0,t0,at
9d001b44:	40886000 	mtc0	t0,c0_status
9d001b48:	30840000 	andi	a0,a0,0x0
9d001b4c:	30a50000 	andi	a1,a1,0x0
9d001b50:	3c089d00 	lui	t0,0x9d00
9d001b54:	25081b60 	addiu	t0,t0,7008
9d001b58:	01000008 	jr	t0
9d001b5c:	00000000 	nop

Disassembly of section .text:

9d001b60 <_main_entry>:
9d001b60:	0f403308 	jal	9d00cc20 <_text_end>
9d001b64:	00000000 	nop
9d001b68:	30840000 	andi	a0,a0,0x0
9d001b6c:	30a50000 	andi	a1,a1,0x0
9d001b70:	0f4012b3 	jal	9d004acc <main>
9d001b74:	00000000 	nop
9d001b78:	1000fffd 	b	9d001b70 <_main_entry+0x10>
9d001b7c:	00000000 	nop

9d001b80 <__do_global_dtors_aux>:
9d001b80:	27bdffd8 	addiu	sp,sp,-40
9d001b84:	afb2001c 	sw	s2,28(sp)
9d001b88:	3c12a000 	lui	s2,0xa000
9d001b8c:	924209e0 	lbu	v0,2528(s2)
9d001b90:	afbf0024 	sw	ra,36(sp)
9d001b94:	afb30020 	sw	s3,32(sp)
9d001b98:	afb10018 	sw	s1,24(sp)
9d001b9c:	14400020 	bnez	v0,9d001c20 <__do_global_dtors_aux+0xa0>
9d001ba0:	afb00014 	sw	s0,20(sp)
9d001ba4:	3c119d01 	lui	s1,0x9d01
9d001ba8:	3c109d01 	lui	s0,0x9d01
9d001bac:	3c13a000 	lui	s3,0xa000
9d001bb0:	2631cc70 	addiu	s1,s1,-13200
9d001bb4:	2610cc74 	addiu	s0,s0,-13196
9d001bb8:	8e6209e4 	lw	v0,2532(s3)
9d001bbc:	02118023 	subu	s0,s0,s1
9d001bc0:	00108083 	sra	s0,s0,0x2
9d001bc4:	2610ffff 	addiu	s0,s0,-1
9d001bc8:	0050182b 	sltu	v1,v0,s0
9d001bcc:	5060000c 	beqzl	v1,9d001c00 <__do_global_dtors_aux+0x80>
9d001bd0:	3c020000 	lui	v0,0x0
9d001bd4:	24420001 	addiu	v0,v0,1
9d001bd8:	00021880 	sll	v1,v0,0x2
9d001bdc:	02231821 	addu	v1,s1,v1
9d001be0:	8c630000 	lw	v1,0(v1)
9d001be4:	0060f809 	jalr	v1
9d001be8:	ae6209e4 	sw	v0,2532(s3)
9d001bec:	8e6209e4 	lw	v0,2532(s3)
9d001bf0:	0050182b 	sltu	v1,v0,s0
9d001bf4:	1460fff8 	bnez	v1,9d001bd8 <__do_global_dtors_aux+0x58>
9d001bf8:	24420001 	addiu	v0,v0,1
9d001bfc:	3c020000 	lui	v0,0x0
9d001c00:	24420000 	addiu	v0,v0,0
9d001c04:	10400005 	beqz	v0,9d001c1c <__do_global_dtors_aux+0x9c>
9d001c08:	24020001 	li	v0,1
9d001c0c:	3c04a000 	lui	a0,0xa000
9d001c10:	0c000000 	jal	90000000 <_imageExecutionJumpToFirstInFlash+0x8e000000>
9d001c14:	24840008 	addiu	a0,a0,8
9d001c18:	24020001 	li	v0,1
9d001c1c:	a24209e0 	sb	v0,2528(s2)
9d001c20:	8fbf0024 	lw	ra,36(sp)
9d001c24:	8fb30020 	lw	s3,32(sp)
9d001c28:	8fb2001c 	lw	s2,28(sp)
9d001c2c:	8fb10018 	lw	s1,24(sp)
9d001c30:	8fb00014 	lw	s0,20(sp)
9d001c34:	03e00008 	jr	ra
9d001c38:	27bd0028 	addiu	sp,sp,40

9d001c3c <frame_dummy>:
9d001c3c:	3c020000 	lui	v0,0x0
9d001c40:	27bdffe8 	addiu	sp,sp,-24
9d001c44:	24420000 	addiu	v0,v0,0
9d001c48:	10400006 	beqz	v0,9d001c64 <frame_dummy+0x28>
9d001c4c:	afbf0014 	sw	ra,20(sp)
9d001c50:	3c04a000 	lui	a0,0xa000
9d001c54:	3c05a000 	lui	a1,0xa000
9d001c58:	24840008 	addiu	a0,a0,8
9d001c5c:	0c000000 	jal	90000000 <_imageExecutionJumpToFirstInFlash+0x8e000000>
9d001c60:	24a509e8 	addiu	a1,a1,2536
9d001c64:	3c04a000 	lui	a0,0xa000
9d001c68:	8c820008 	lw	v0,8(a0)
9d001c6c:	10400007 	beqz	v0,9d001c8c <frame_dummy+0x50>
9d001c70:	3c190000 	lui	t9,0x0
9d001c74:	27390000 	addiu	t9,t9,0
9d001c78:	13200004 	beqz	t9,9d001c8c <frame_dummy+0x50>
9d001c7c:	8fbf0014 	lw	ra,20(sp)
9d001c80:	24840008 	addiu	a0,a0,8
9d001c84:	03200008 	jr	t9
9d001c88:	27bd0018 	addiu	sp,sp,24
9d001c8c:	8fbf0014 	lw	ra,20(sp)
9d001c90:	03e00008 	jr	ra
9d001c94:	27bd0018 	addiu	sp,sp,24

9d001c98 <setup>:
int glFlash = 0;

void firePulseRifle();

void setup() {
    Serial.begin(9600);
9d001c98:	3c04a000 	lui	a0,0xa000
int prFlash = 0;
int glFlash = 0;

void firePulseRifle();

void setup() {
9d001c9c:	27bdffd0 	addiu	sp,sp,-48
    Serial.begin(9600);
9d001ca0:	24052580 	li	a1,9600
9d001ca4:	24840dec 	addiu	a0,a0,3564
int prFlash = 0;
int glFlash = 0;

void firePulseRifle();

void setup() {
9d001ca8:	afbf002c 	sw	ra,44(sp)
    Serial.begin(9600);
9d001cac:	0f401122 	jal	9d004488 <_ZN14HardwareSerial5beginEm>
9d001cb0:	afb00028 	sw	s0,40(sp)
    sound.begin();
9d001cb4:	3c04a000 	lui	a0,0xa000
9d001cb8:	0f4009fb 	jal	9d0027ec <_ZN8PWMAudio5beginEv>
9d001cbc:	24840a00 	addiu	a0,a0,2560

    prTrigger.begin();
9d001cc0:	3c04a000 	lui	a0,0xa000
9d001cc4:	0f40096b 	jal	9d0025ac <_ZN14DebouncedInput5beginEv>
9d001cc8:	24840d4c 	addiu	a0,a0,3404
    magazine.begin();
9d001ccc:	3c04a000 	lui	a0,0xa000
9d001cd0:	0f40096b 	jal	9d0025ac <_ZN14DebouncedInput5beginEv>
9d001cd4:	24840d74 	addiu	a0,a0,3444
    glTrigger.begin();
9d001cd8:	3c04a000 	lui	a0,0xa000
9d001cdc:	0f40096b 	jal	9d0025ac <_ZN14DebouncedInput5beginEv>
9d001ce0:	24840d9c 	addiu	a0,a0,3484
    glRack.begin();
9d001ce4:	3c04a000 	lui	a0,0xa000

    display.setCathodes(DC0, DC1);
9d001ce8:	3c10a000 	lui	s0,0xa000
    sound.begin();

    prTrigger.begin();
    magazine.begin();
    glTrigger.begin();
    glRack.begin();
9d001cec:	0f40096b 	jal	9d0025ac <_ZN14DebouncedInput5beginEv>
9d001cf0:	24840dc4 	addiu	a0,a0,3524

    display.setCathodes(DC0, DC1);
9d001cf4:	26040d1c 	addiu	a0,s0,3356
9d001cf8:	24050013 	li	a1,19
9d001cfc:	0f400c9a 	jal	9d003268 <_ZN6LEDMux11setCathodesEhh>
9d001d00:	24060014 	li	a2,20
    display.setAnodes(DA0, DA1, DA2, DA3, DA4, DA5, DA6, DA7);
9d001d04:	2402001c 	li	v0,28
9d001d08:	afa20010 	sw	v0,16(sp)
9d001d0c:	2402001b 	li	v0,27
9d001d10:	afa20014 	sw	v0,20(sp)
9d001d14:	24020019 	li	v0,25
9d001d18:	afa20018 	sw	v0,24(sp)
9d001d1c:	24020018 	li	v0,24
9d001d20:	24060016 	li	a2,22
9d001d24:	24070015 	li	a3,21
9d001d28:	26040d1c 	addiu	a0,s0,3356
9d001d2c:	afa2001c 	sw	v0,28(sp)
9d001d30:	24050017 	li	a1,23
9d001d34:	2402001a 	li	v0,26
9d001d38:	0f400c43 	jal	9d00310c <_ZN6LEDMux9setAnodesEhhhhhhhh>
9d001d3c:	afa20020 	sw	v0,32(sp)
    display.setBrightness(6);
9d001d40:	24050006 	li	a1,6
9d001d44:	0f400d36 	jal	9d0034d8 <_ZN6LEDMux13setBrightnessEh>
9d001d48:	26040d1c 	addiu	a0,s0,3356
    display.begin();
9d001d4c:	0f400c27 	jal	9d00309c <_ZN6LEDMux5beginEv>
9d001d50:	26040d1c 	addiu	a0,s0,3356
    display.print("\n");
9d001d54:	3c059d01 	lui	a1,0x9d01
9d001d58:	26040d1c 	addiu	a0,s0,3356
9d001d5c:	0f4012ed 	jal	9d004bb4 <_ZN5Print5printEPKc>
9d001d60:	24a5efec 	addiu	a1,a1,-4116
    display.print(prAmmo);
9d001d64:	8f858008 	lw	a1,-32760(gp)
9d001d68:	26040d1c 	addiu	a0,s0,3356
}
9d001d6c:	8fbf002c 	lw	ra,44(sp)
9d001d70:	8fb00028 	lw	s0,40(sp)
    display.setCathodes(DC0, DC1);
    display.setAnodes(DA0, DA1, DA2, DA3, DA4, DA5, DA6, DA7);
    display.setBrightness(6);
    display.begin();
    display.print("\n");
    display.print(prAmmo);
9d001d74:	2406000a 	li	a2,10
9d001d78:	0b401326 	j	9d004c98 <_ZN5Print5printEji>
9d001d7c:	27bd0030 	addiu	sp,sp,48

9d001d80 <_Z14firePulseRiflev>:
}

void firePulseRifle() {
    char t[4];

    if (prAmmo > 0 && prAmmo <= 95) {
9d001d80:	8f828008 	lw	v0,-32760(gp)
            }
        }
    }
}

void firePulseRifle() {
9d001d84:	27bdffd8 	addiu	sp,sp,-40
    char t[4];

    if (prAmmo > 0 && prAmmo <= 95) {
9d001d88:	2442ffff 	addiu	v0,v0,-1
9d001d8c:	2c43005f 	sltiu	v1,v0,95
9d001d90:	10600025 	beqz	v1,9d001e28 <_DBG_EXCPT_ADDR+0x38>
9d001d94:	afbf0024 	sw	ra,36(sp)
        prAmmo --;
        sound.queueSample(pr_fire, pr_fire_len, 0, prSweep * 4);
9d001d98:	8f838024 	lw	v1,-32732(gp)
9d001d9c:	3c069d02 	lui	a2,0x9d02
9d001da0:	8cc67c14 	lw	a2,31764(a2)
9d001da4:	3c04a000 	lui	a0,0xa000
9d001da8:	3c059d02 	lui	a1,0x9d02
9d001dac:	00031880 	sll	v1,v1,0x2
9d001db0:	24840a00 	addiu	a0,a0,2560
9d001db4:	24a557bc 	addiu	a1,a1,22460
9d001db8:	00003821 	move	a3,zero

void firePulseRifle() {
    char t[4];

    if (prAmmo > 0 && prAmmo <= 95) {
        prAmmo --;
9d001dbc:	af828008 	sw	v0,-32760(gp)
        sound.queueSample(pr_fire, pr_fire_len, 0, prSweep * 4);
9d001dc0:	0f400a97 	jal	9d002a5c <_ZN8PWMAudio11queueSampleEPKsiii>
9d001dc4:	afa30010 	sw	v1,16(sp)

        if (prSweepCount > 3 && prSweepCount < 10) {
9d001dc8:	8f82802c 	lw	v0,-32724(gp)
9d001dcc:	2443fffc 	addiu	v1,v0,-4
9d001dd0:	2c630006 	sltiu	v1,v1,6
9d001dd4:	10600004 	beqz	v1,9d001de8 <_Z14firePulseRiflev+0x68>
9d001dd8:	8f838028 	lw	v1,-32728(gp)
            prSweep += prSweepStep;
9d001ddc:	8f848024 	lw	a0,-32732(gp)
9d001de0:	00831821 	addu	v1,a0,v1
9d001de4:	af838024 	sw	v1,-32732(gp)
        }

        prSweepCount++;
        sprintf(t, "\n%02d", prAmmo);
9d001de8:	8f868008 	lw	a2,-32760(gp)
9d001dec:	3c059d01 	lui	a1,0x9d01
9d001df0:	27a40018 	addiu	a0,sp,24

        if (prSweepCount > 3 && prSweepCount < 10) {
            prSweep += prSweepStep;
        }

        prSweepCount++;
9d001df4:	24420001 	addiu	v0,v0,1
        sprintf(t, "\n%02d", prAmmo);
9d001df8:	24a5eff0 	addiu	a1,a1,-4112
9d001dfc:	0f401f92 	jal	9d007e48 <sprintf>
9d001e00:	af82802c 	sw	v0,-32724(gp)
        display.print(t);
9d001e04:	3c04a000 	lui	a0,0xa000
9d001e08:	27a50018 	addiu	a1,sp,24
9d001e0c:	0f4012ed 	jal	9d004bb4 <_ZN5Print5printEPKc>
9d001e10:	24840d1c 	addiu	a0,a0,3356
        prFlash = 255;

    } else {
        sound.queueSample(pr_click, pr_click_len, 0, 0);
    }
}
9d001e14:	8fbf0024 	lw	ra,36(sp)
        }

        prSweepCount++;
        sprintf(t, "\n%02d", prAmmo);
        display.print(t);
        prFlash = 255;
9d001e18:	240200ff 	li	v0,255
9d001e1c:	af828030 	sw	v0,-32720(gp)

    } else {
        sound.queueSample(pr_click, pr_click_len, 0, 0);
    }
}
9d001e20:	03e00008 	jr	ra
9d001e24:	27bd0028 	addiu	sp,sp,40
        sprintf(t, "\n%02d", prAmmo);
        display.print(t);
        prFlash = 255;

    } else {
        sound.queueSample(pr_click, pr_click_len, 0, 0);
9d001e28:	3c029d02 	lui	v0,0x9d02
9d001e2c:	8c4657b8 	lw	a2,22456(v0)
9d001e30:	3c04a000 	lui	a0,0xa000
9d001e34:	3c059d02 	lui	a1,0x9d02
9d001e38:	24840a00 	addiu	a0,a0,2560
9d001e3c:	24a544d0 	addiu	a1,a1,17616
9d001e40:	00003821 	move	a3,zero
9d001e44:	0f400a97 	jal	9d002a5c <_ZN8PWMAudio11queueSampleEPKsiii>
9d001e48:	afa00010 	sw	zero,16(sp)
    }
}
9d001e4c:	8fbf0024 	lw	ra,36(sp)
9d001e50:	03e00008 	jr	ra
9d001e54:	27bd0028 	addiu	sp,sp,40

9d001e58 <loop>:
    display.print("\n");
    display.print(prAmmo);
}

void loop() {
    static unsigned long ammoLoadTick = millis();
9d001e58:	83828038 	lb	v0,-32712(gp)
    display.begin();
    display.print("\n");
    display.print(prAmmo);
}

void loop() {
9d001e5c:	27bdffd0 	addiu	sp,sp,-48
9d001e60:	afbf002c 	sw	ra,44(sp)
9d001e64:	afb10028 	sw	s1,40(sp)
    static unsigned long ammoLoadTick = millis();
9d001e68:	104000b0 	beqz	v0,9d00212c <loop+0x2d4>
9d001e6c:	afb00024 	sw	s0,36(sp)
    static unsigned long prFireTick = 0;
    static unsigned long displayTimeout = 0;
    static unsigned long mfFade = millis();
9d001e70:	83828040 	lb	v0,-32704(gp)
9d001e74:	104000b8 	beqz	v0,9d002158 <loop+0x300>
9d001e78:	00000000 	nop
    unsigned long now = millis();
9d001e7c:	0f401030 	jal	9d0040c0 <millis>
9d001e80:	00000000 	nop
9d001e84:	00408021 	move	s0,v0
    char t[4];

    if (now - mfFade >= FLASH_FADE_SPEED) {
9d001e88:	8f828048 	lw	v0,-32696(gp)
9d001e8c:	02021023 	subu	v0,s0,v0
9d001e90:	2c420002 	sltiu	v0,v0,2
9d001e94:	14400011 	bnez	v0,9d001edc <loop+0x84>
9d001e98:	8f828034 	lw	v0,-32716(gp)
        mfFade = now;
        if (glFlash > 0) {
9d001e9c:	18400003 	blez	v0,9d001eac <loop+0x54>
9d001ea0:	af908048 	sw	s0,-32696(gp)
            glFlash--;
9d001ea4:	2442ffff 	addiu	v0,v0,-1
9d001ea8:	af828034 	sw	v0,-32716(gp)
        }

        if (prFlash > 0) {
9d001eac:	8f858030 	lw	a1,-32720(gp)
9d001eb0:	18a00003 	blez	a1,9d001ec0 <loop+0x68>
9d001eb4:	00000000 	nop
            prFlash -= 4;
9d001eb8:	24a5fffc 	addiu	a1,a1,-4
9d001ebc:	af858030 	sw	a1,-32720(gp)
        }

        if (prFlash < 0) {
9d001ec0:	04a200f5 	bltzl	a1,9d002298 <loop+0x440>
9d001ec4:	af808030 	sw	zero,-32720(gp)
            prFlash = 0;
        }

        analogWrite(LED0, prFlash);
9d001ec8:	0f400f0b 	jal	9d003c2c <analogWrite>
9d001ecc:	24040006 	li	a0,6
        analogWrite(LED1, glFlash);
9d001ed0:	8f858034 	lw	a1,-32716(gp)
9d001ed4:	0f400f0b 	jal	9d003c2c <analogWrite>
9d001ed8:	24040007 	li	a0,7
    }

    if (displayTimeout > 0) {
9d001edc:	8f82804c 	lw	v0,-32692(gp)
9d001ee0:	50400006 	beqzl	v0,9d001efc <loop+0xa4>
9d001ee4:	8f828008 	lw	v0,-32760(gp)
        if (now - displayTimeout >= 1000) {
9d001ee8:	02021023 	subu	v0,s0,v0
9d001eec:	2c4203e8 	sltiu	v0,v0,1000
9d001ef0:	104000a8 	beqz	v0,9d002194 <loop+0x33c>
9d001ef4:	8f868008 	lw	a2,-32760(gp)
            sprintf(t, "\n%02d", prAmmo);
            display.print(t);
        }
    }

    if (prAmmo > 95) {
9d001ef8:	8f828008 	lw	v0,-32760(gp)
9d001efc:	2c430060 	sltiu	v1,v0,96
9d001f00:	14600007 	bnez	v1,9d001f20 <loop+0xc8>
9d001f04:	3c11a000 	lui	s1,0xa000
        if (now - ammoLoadTick >= AMMO_TICK_SPEED) {
9d001f08:	8f838054 	lw	v1,-32684(gp)
9d001f0c:	02031823 	subu	v1,s0,v1
9d001f10:	2c630064 	sltiu	v1,v1,100
9d001f14:	1060001f 	beqz	v1,9d001f94 <loop+0x13c>
9d001f18:	2442ffff 	addiu	v0,v0,-1
                display.print("\n--");
            }
        }
    }

    if (prTrigger.changed()) {
9d001f1c:	3c11a000 	lui	s1,0xa000
9d001f20:	0f4009d3 	jal	9d00274c <_ZN14DebouncedInput7changedEv>
9d001f24:	26240d4c 	addiu	a0,s1,3404
9d001f28:	14400035 	bnez	v0,9d002000 <loop+0x1a8>
9d001f2c:	8f828050 	lw	v0,-32688(gp)
        } else {
            prFireTick = 0;
        }
    }

    if (prFireTick != 0) {
9d001f30:	10400004 	beqz	v0,9d001f44 <loop+0xec>
9d001f34:	02021023 	subu	v0,s0,v0
        if (now - prFireTick >= PR_FIRE_SPEED) {
9d001f38:	2c420032 	sltiu	v0,v0,50
9d001f3c:	10400091 	beqz	v0,9d002184 <loop+0x32c>
9d001f40:	00000000 	nop
            prFireTick = now;
            firePulseRifle();
        }
    }

    if (magazine.changed()) {
9d001f44:	3c11a000 	lui	s1,0xa000
9d001f48:	0f4009d3 	jal	9d00274c <_ZN14DebouncedInput7changedEv>
9d001f4c:	26240d74 	addiu	a0,s1,3444
9d001f50:	14400034 	bnez	v0,9d002024 <loop+0x1cc>
9d001f54:	00000000 	nop
            glAmmo = 0;
            display.print("\n--");
        }
    }

    if (glRack.changed()) {
9d001f58:	3c11a000 	lui	s1,0xa000
9d001f5c:	0f4009d3 	jal	9d00274c <_ZN14DebouncedInput7changedEv>
9d001f60:	26240dc4 	addiu	a0,s1,3524
9d001f64:	14400045 	bnez	v0,9d00207c <loop+0x224>
9d001f68:	00000000 	nop
            display.print(t);
            displayTimeout = now;
        }
    }

    if (glTrigger.changed()) {
9d001f6c:	3c10a000 	lui	s0,0xa000
9d001f70:	0f4009d3 	jal	9d00274c <_ZN14DebouncedInput7changedEv>
9d001f74:	26040d9c 	addiu	a0,s0,3484
9d001f78:	14400058 	bnez	v0,9d0020dc <loop+0x284>
9d001f7c:	00000000 	nop
            } else {
                sound.queueSample(pr_click, pr_click_len, 0, 0);
            }
        }
    }
}
9d001f80:	8fbf002c 	lw	ra,44(sp)
9d001f84:	8fb10028 	lw	s1,40(sp)
9d001f88:	8fb00024 	lw	s0,36(sp)
9d001f8c:	03e00008 	jr	ra
9d001f90:	27bd0030 	addiu	sp,sp,48
    if (prAmmo > 95) {
        if (now - ammoLoadTick >= AMMO_TICK_SPEED) {
            ammoLoadTick = now;
            prAmmo --;

            if (prAmmo < 100) {
9d001f94:	2c430064 	sltiu	v1,v0,100
        }
    }

    if (prAmmo > 95) {
        if (now - ammoLoadTick >= AMMO_TICK_SPEED) {
            ammoLoadTick = now;
9d001f98:	af908054 	sw	s0,-32684(gp)
            prAmmo --;

            if (prAmmo < 100) {
9d001f9c:	106000b7 	beqz	v1,9d00227c <loop+0x424>
9d001fa0:	af828008 	sw	v0,-32760(gp)
                display.print("\n");
9d001fa4:	3c11a000 	lui	s1,0xa000
9d001fa8:	3c059d01 	lui	a1,0x9d01
9d001fac:	26240d1c 	addiu	a0,s1,3356
9d001fb0:	0f4012ed 	jal	9d004bb4 <_ZN5Print5printEPKc>
9d001fb4:	24a5efec 	addiu	a1,a1,-4116
                display.print(prAmmo);
9d001fb8:	8f858008 	lw	a1,-32760(gp)
9d001fbc:	26240d1c 	addiu	a0,s1,3356
9d001fc0:	0f401326 	jal	9d004c98 <_ZN5Print5printEji>
9d001fc4:	2406000a 	li	a2,10
                sound.queueSample(load_click, load_click_len, 0, 0);
9d001fc8:	3c029d01 	lui	v0,0x9d01
9d001fcc:	8c46efe8 	lw	a2,-4120(v0)
9d001fd0:	3c04a000 	lui	a0,0xa000
9d001fd4:	3c059d01 	lui	a1,0x9d01
9d001fd8:	24840a00 	addiu	a0,a0,2560
9d001fdc:	24a5eb20 	addiu	a1,a1,-5344
9d001fe0:	00003821 	move	a3,zero
                display.print("\n--");
            }
        }
    }

    if (prTrigger.changed()) {
9d001fe4:	3c11a000 	lui	s1,0xa000
            prAmmo --;

            if (prAmmo < 100) {
                display.print("\n");
                display.print(prAmmo);
                sound.queueSample(load_click, load_click_len, 0, 0);
9d001fe8:	0f400a97 	jal	9d002a5c <_ZN8PWMAudio11queueSampleEPKsiii>
9d001fec:	afa00010 	sw	zero,16(sp)
                display.print("\n--");
            }
        }
    }

    if (prTrigger.changed()) {
9d001ff0:	0f4009d3 	jal	9d00274c <_ZN14DebouncedInput7changedEv>
9d001ff4:	26240d4c 	addiu	a0,s1,3404
9d001ff8:	1040ffcd 	beqz	v0,9d001f30 <loop+0xd8>
9d001ffc:	8f828050 	lw	v0,-32688(gp)
        if (prTrigger.read() == LOW) {
9d002000:	0f400987 	jal	9d00261c <_ZN14DebouncedInput4readEv>
9d002004:	26240d4c 	addiu	a0,s1,3404
9d002008:	104000a5 	beqz	v0,9d0022a0 <loop+0x448>
9d00200c:	3c11a000 	lui	s1,0xa000
            prFireTick = now;
            firePulseRifle();
        }
    }

    if (magazine.changed()) {
9d002010:	26240d74 	addiu	a0,s1,3444
9d002014:	0f4009d3 	jal	9d00274c <_ZN14DebouncedInput7changedEv>
9d002018:	af808050 	sw	zero,-32688(gp)
9d00201c:	5040ffcf 	beqzl	v0,9d001f5c <loop+0x104>
9d002020:	3c11a000 	lui	s1,0xa000
        if (magazine.read() == LOW) {
9d002024:	0f400987 	jal	9d00261c <_ZN14DebouncedInput4readEv>
9d002028:	26240d74 	addiu	a0,s1,3444
9d00202c:	14400064 	bnez	v0,9d0021c0 <loop+0x368>
9d002030:	3c029d01 	lui	v0,0x9d01
            sound.queueSingleSample(magazine_insert, magazine_insert_len, 0, 0);
9d002034:	3c029d03 	lui	v0,0x9d03
9d002038:	8c46bbf8 	lw	a2,-17416(v0)
9d00203c:	3c04a000 	lui	a0,0xa000
9d002040:	3c059d03 	lui	a1,0x9d03
9d002044:	24840a00 	addiu	a0,a0,2560
9d002048:	24a59a40 	addiu	a1,a1,-26048
9d00204c:	00003821 	move	a3,zero
9d002050:	afa00010 	sw	zero,16(sp)
9d002054:	0f400ab1 	jal	9d002ac4 <_ZN8PWMAudio17queueSingleSampleEPKsiii>
9d002058:	3c11a000 	lui	s1,0xa000
            prAmmo = 104;
9d00205c:	24020068 	li	v0,104
9d002060:	af828008 	sw	v0,-32760(gp)
            glAmmo = 0;
            display.print("\n--");
        }
    }

    if (glRack.changed()) {
9d002064:	26240dc4 	addiu	a0,s1,3524

    if (magazine.changed()) {
        if (magazine.read() == LOW) {
            sound.queueSingleSample(magazine_insert, magazine_insert_len, 0, 0);
            prAmmo = 104;
            glAmmo = 5;
9d002068:	24020005 	li	v0,5
            glAmmo = 0;
            display.print("\n--");
        }
    }

    if (glRack.changed()) {
9d00206c:	0f4009d3 	jal	9d00274c <_ZN14DebouncedInput7changedEv>
9d002070:	af82800c 	sw	v0,-32756(gp)
9d002074:	5040ffbe 	beqzl	v0,9d001f70 <loop+0x118>
9d002078:	3c10a000 	lui	s0,0xa000

        if (glRack.read() == LOW) {
9d00207c:	0f400987 	jal	9d00261c <_ZN14DebouncedInput4readEv>
9d002080:	26240dc4 	addiu	a0,s1,3524
9d002084:	1440005f 	bnez	v0,9d002204 <loop+0x3ac>
9d002088:	8f82800c 	lw	v0,-32756(gp)
            if (glBreech == 1) {
9d00208c:	8f838020 	lw	v1,-32736(gp)
9d002090:	24020001 	li	v0,1
9d002094:	106200d9 	beq	v1,v0,9d0023fc <loop+0x5a4>
9d002098:	3c029d01 	lui	v0,0x9d01
                sound.queueSingleSample(gl_rack_pull, gl_rack_pull_len, 0, 0);

            } else {
                sound.queueSingleSample(gl_rack_pull_empty, gl_rack_pull_empty_len, 0, 0);
9d00209c:	8c46eb1c 	lw	a2,-5348(v0)
9d0020a0:	3c04a000 	lui	a0,0xa000
9d0020a4:	3c059d01 	lui	a1,0x9d01
9d0020a8:	24840a00 	addiu	a0,a0,2560
9d0020ac:	24a5dec8 	addiu	a1,a1,-8504
9d0020b0:	00003821 	move	a3,zero
9d0020b4:	0f400ab1 	jal	9d002ac4 <_ZN8PWMAudio17queueSingleSampleEPKsiii>
9d0020b8:	afa00010 	sw	zero,16(sp)
            }

            glBreech = 0;
            display.setDecimalPoint(0, LOW);
9d0020bc:	3c11a000 	lui	s1,0xa000
9d0020c0:	26240d1c 	addiu	a0,s1,3356
9d0020c4:	00002821 	move	a1,zero
9d0020c8:	00003021 	move	a2,zero
9d0020cc:	0f400d46 	jal	9d003518 <_ZN6LEDMux15setDecimalPointEhh>
9d0020d0:	af808020 	sw	zero,-32736(gp)

            } else {
                sound.queueSingleSample(gl_rack_push_empty, gl_rack_push_empty_len, 0, 0);
            }

            sprintf(t, "\n%02d", glAmmo);
9d0020d4:	0b400896 	j	9d002258 <loop+0x400>
9d0020d8:	8f86800c 	lw	a2,-32756(gp)
            displayTimeout = now;
        }
    }

    if (glTrigger.changed()) {
        if (glTrigger.read() == LOW) {
9d0020dc:	0f400987 	jal	9d00261c <_ZN14DebouncedInput4readEv>
9d0020e0:	26040d9c 	addiu	a0,s0,3484
9d0020e4:	1440ffa6 	bnez	v0,9d001f80 <loop+0x128>
9d0020e8:	8f838020 	lw	v1,-32736(gp)
            if (glBreech == 1) {
9d0020ec:	24020001 	li	v0,1
9d0020f0:	10620086 	beq	v1,v0,9d00230c <loop+0x4b4>
9d0020f4:	3c029d02 	lui	v0,0x9d02
                glFlash = 255;
                sound.queueSample(gl_fire, gl_fire_len, 0, 0);
                sound.queueSample(gl_boom, gl_boom_len, 2000 + (rand() % 10000), (rand() % 100) - 50);

            } else {
                sound.queueSample(pr_click, pr_click_len, 0, 0);
9d0020f8:	8c4657b8 	lw	a2,22456(v0)
9d0020fc:	3c04a000 	lui	a0,0xa000
9d002100:	3c059d02 	lui	a1,0x9d02
9d002104:	24840a00 	addiu	a0,a0,2560
9d002108:	24a544d0 	addiu	a1,a1,17616
9d00210c:	00003821 	move	a3,zero
9d002110:	0f400a97 	jal	9d002a5c <_ZN8PWMAudio11queueSampleEPKsiii>
9d002114:	afa00010 	sw	zero,16(sp)
            }
        }
    }
}
9d002118:	8fbf002c 	lw	ra,44(sp)
9d00211c:	8fb10028 	lw	s1,40(sp)
9d002120:	8fb00024 	lw	s0,36(sp)
9d002124:	03e00008 	jr	ra
9d002128:	27bd0030 	addiu	sp,sp,48
    display.print("\n");
    display.print(prAmmo);
}

void loop() {
    static unsigned long ammoLoadTick = millis();
9d00212c:	0f402f9c 	jal	9d00be70 <__cxa_guard_acquire>
9d002130:	27848038 	addiu	a0,gp,-32712
9d002134:	5040ff4f 	beqzl	v0,9d001e74 <loop+0x1c>
9d002138:	83828040 	lb	v0,-32704(gp)
9d00213c:	0f401030 	jal	9d0040c0 <millis>
9d002140:	00000000 	nop
9d002144:	27848038 	addiu	a0,gp,-32712
9d002148:	0f402fa6 	jal	9d00be98 <__cxa_guard_release>
9d00214c:	af828054 	sw	v0,-32684(gp)
    static unsigned long prFireTick = 0;
    static unsigned long displayTimeout = 0;
    static unsigned long mfFade = millis();
9d002150:	0b40079d 	j	9d001e74 <loop+0x1c>
9d002154:	83828040 	lb	v0,-32704(gp)
9d002158:	0f402f9c 	jal	9d00be70 <__cxa_guard_acquire>
9d00215c:	27848040 	addiu	a0,gp,-32704
9d002160:	1040ff46 	beqz	v0,9d001e7c <loop+0x24>
9d002164:	00000000 	nop
9d002168:	0f401030 	jal	9d0040c0 <millis>
9d00216c:	00000000 	nop
9d002170:	27848040 	addiu	a0,gp,-32704
9d002174:	0f402fa6 	jal	9d00be98 <__cxa_guard_release>
9d002178:	af828048 	sw	v0,-32696(gp)
9d00217c:	0b40079f 	j	9d001e7c <loop+0x24>
9d002180:	00000000 	nop
    }

    if (prFireTick != 0) {
        if (now - prFireTick >= PR_FIRE_SPEED) {
            prFireTick = now;
            firePulseRifle();
9d002184:	0f400760 	jal	9d001d80 <_Z14firePulseRiflev>
9d002188:	af908050 	sw	s0,-32688(gp)
        }
    }

    if (magazine.changed()) {
9d00218c:	0b4007d2 	j	9d001f48 <loop+0xf0>
9d002190:	3c11a000 	lui	s1,0xa000
    }

    if (displayTimeout > 0) {
        if (now - displayTimeout >= 1000) {
            displayTimeout = 0;
            sprintf(t, "\n%02d", prAmmo);
9d002194:	3c059d01 	lui	a1,0x9d01
9d002198:	27a40018 	addiu	a0,sp,24
9d00219c:	24a5eff0 	addiu	a1,a1,-4112
            display.print(t);
9d0021a0:	3c11a000 	lui	s1,0xa000
    }

    if (displayTimeout > 0) {
        if (now - displayTimeout >= 1000) {
            displayTimeout = 0;
            sprintf(t, "\n%02d", prAmmo);
9d0021a4:	0f401f92 	jal	9d007e48 <sprintf>
9d0021a8:	af80804c 	sw	zero,-32692(gp)
            display.print(t);
9d0021ac:	26240d1c 	addiu	a0,s1,3356
9d0021b0:	0f4012ed 	jal	9d004bb4 <_ZN5Print5printEPKc>
9d0021b4:	27a50018 	addiu	a1,sp,24
        }
    }

    if (prAmmo > 95) {
9d0021b8:	0b4007bf 	j	9d001efc <loop+0xa4>
9d0021bc:	8f828008 	lw	v0,-32760(gp)
            sound.queueSingleSample(magazine_insert, magazine_insert_len, 0, 0);
            prAmmo = 104;
            glAmmo = 5;

        } else {
            sound.queueSingleSample(magazine_remove, magazine_remove_len, 0, 0);
9d0021c0:	8c460c98 	lw	a2,3224(v0)
9d0021c4:	3c04a000 	lui	a0,0xa000
9d0021c8:	3c059d01 	lui	a1,0x9d01
9d0021cc:	24840a00 	addiu	a0,a0,2560
9d0021d0:	24a5effc 	addiu	a1,a1,-4100
9d0021d4:	00003821 	move	a3,zero
9d0021d8:	afa00010 	sw	zero,16(sp)
9d0021dc:	0f400ab1 	jal	9d002ac4 <_ZN8PWMAudio17queueSingleSampleEPKsiii>
9d0021e0:	3c11a000 	lui	s1,0xa000
            prAmmo = 0;
            glAmmo = 0;
            display.print("\n--");
9d0021e4:	3c059d01 	lui	a1,0x9d01
9d0021e8:	26240d1c 	addiu	a0,s1,3356
9d0021ec:	24a5eff8 	addiu	a1,a1,-4104
            prAmmo = 104;
            glAmmo = 5;

        } else {
            sound.queueSingleSample(magazine_remove, magazine_remove_len, 0, 0);
            prAmmo = 0;
9d0021f0:	af808008 	sw	zero,-32760(gp)
            glAmmo = 0;
            display.print("\n--");
9d0021f4:	0f4012ed 	jal	9d004bb4 <_ZN5Print5printEPKc>
9d0021f8:	af80800c 	sw	zero,-32756(gp)
        }
    }

    if (glRack.changed()) {
9d0021fc:	0b4007d7 	j	9d001f5c <loop+0x104>
9d002200:	3c11a000 	lui	s1,0xa000
            sprintf(t, "\n%02d", glAmmo);
            display.print(t);
            displayTimeout = now;

        } else {
            if (glAmmo > 0) {
9d002204:	50400036 	beqzl	v0,9d0022e0 <loop+0x488>
9d002208:	3c029d02 	lui	v0,0x9d02
                glAmmo--;
9d00220c:	2442ffff 	addiu	v0,v0,-1
                glBreech = 1;
                display.setDecimalPoint(0, HIGH);
9d002210:	3c11a000 	lui	s1,0xa000
9d002214:	26240d1c 	addiu	a0,s1,3356
9d002218:	00002821 	move	a1,zero
9d00221c:	24060001 	li	a2,1
            display.print(t);
            displayTimeout = now;

        } else {
            if (glAmmo > 0) {
                glAmmo--;
9d002220:	af82800c 	sw	v0,-32756(gp)
                glBreech = 1;
9d002224:	24020001 	li	v0,1
                display.setDecimalPoint(0, HIGH);
9d002228:	0f400d46 	jal	9d003518 <_ZN6LEDMux15setDecimalPointEhh>
9d00222c:	af828020 	sw	v0,-32736(gp)
                sound.queueSingleSample(gl_rack_push, gl_rack_push_len, 0, 0);
9d002230:	3c029d03 	lui	v0,0x9d03
9d002234:	8c469a3c 	lw	a2,-26052(v0)
9d002238:	3c04a000 	lui	a0,0xa000
9d00223c:	3c059d02 	lui	a1,0x9d02
9d002240:	24840a00 	addiu	a0,a0,2560
9d002244:	24a57c18 	addiu	a1,a1,31768
9d002248:	00003821 	move	a3,zero
9d00224c:	0f400ab1 	jal	9d002ac4 <_ZN8PWMAudio17queueSingleSampleEPKsiii>
9d002250:	afa00010 	sw	zero,16(sp)

            } else {
                sound.queueSingleSample(gl_rack_push_empty, gl_rack_push_empty_len, 0, 0);
            }

            sprintf(t, "\n%02d", glAmmo);
9d002254:	8f86800c 	lw	a2,-32756(gp)
9d002258:	3c059d01 	lui	a1,0x9d01
9d00225c:	27a40018 	addiu	a0,sp,24
9d002260:	0f401f92 	jal	9d007e48 <sprintf>
9d002264:	24a5eff0 	addiu	a1,a1,-4112
            display.print(t);
9d002268:	26240d1c 	addiu	a0,s1,3356
9d00226c:	0f4012ed 	jal	9d004bb4 <_ZN5Print5printEPKc>
9d002270:	27a50018 	addiu	a1,sp,24
            displayTimeout = now;
9d002274:	0b4007db 	j	9d001f6c <loop+0x114>
9d002278:	af90804c 	sw	s0,-32692(gp)
                display.print("\n");
                display.print(prAmmo);
                sound.queueSample(load_click, load_click_len, 0, 0);

            } else {
                display.print("\n--");
9d00227c:	3c11a000 	lui	s1,0xa000
9d002280:	3c059d01 	lui	a1,0x9d01
9d002284:	26240d1c 	addiu	a0,s1,3356
9d002288:	0f4012ed 	jal	9d004bb4 <_ZN5Print5printEPKc>
9d00228c:	24a5eff8 	addiu	a1,a1,-4104
            }
        }
    }

    if (prTrigger.changed()) {
9d002290:	0b4007c8 	j	9d001f20 <loop+0xc8>
9d002294:	3c11a000 	lui	s1,0xa000
        if (prFlash > 0) {
            prFlash -= 4;
        }

        if (prFlash < 0) {
            prFlash = 0;
9d002298:	0b4007b2 	j	9d001ec8 <loop+0x70>
9d00229c:	00002821 	move	a1,zero
        }
    }

    if (prTrigger.changed()) {
        if (prTrigger.read() == LOW) {
            prFireTick = now;
9d0022a0:	af908050 	sw	s0,-32688(gp)
            prSweepCount = 0;
            prSweep = (rand() % 32) - 8;
9d0022a4:	0f401e2a 	jal	9d0078a8 <rand>
9d0022a8:	af80802c 	sw	zero,-32724(gp)
9d0022ac:	00021fc3 	sra	v1,v0,0x1f
9d0022b0:	00031ec2 	srl	v1,v1,0x1b
9d0022b4:	00431021 	addu	v0,v0,v1
9d0022b8:	3042001f 	andi	v0,v0,0x1f
9d0022bc:	00431023 	subu	v0,v0,v1
9d0022c0:	2442fff8 	addiu	v0,v0,-8

            if (prSweep > 0) {
9d0022c4:	18400058 	blez	v0,9d002428 <loop+0x5d0>
9d0022c8:	af828024 	sw	v0,-32732(gp)
                prSweepStep = -PR_SWEEP_SPEED;
9d0022cc:	2402ffff 	li	v0,-1

            } else {
                prSweepStep = PR_SWEEP_SPEED;
            }

            firePulseRifle();
9d0022d0:	0f400760 	jal	9d001d80 <_Z14firePulseRiflev>
9d0022d4:	af828028 	sw	v0,-32728(gp)
        } else {
            prFireTick = 0;
        }
    }

    if (prFireTick != 0) {
9d0022d8:	0b4007cc 	j	9d001f30 <loop+0xd8>
9d0022dc:	8f828050 	lw	v0,-32688(gp)
                glBreech = 1;
                display.setDecimalPoint(0, HIGH);
                sound.queueSingleSample(gl_rack_push, gl_rack_push_len, 0, 0);

            } else {
                sound.queueSingleSample(gl_rack_push_empty, gl_rack_push_empty_len, 0, 0);
9d0022e0:	8c4644cc 	lw	a2,17612(v0)
9d0022e4:	3c04a000 	lui	a0,0xa000
9d0022e8:	3c059d02 	lui	a1,0x9d02
9d0022ec:	24840a00 	addiu	a0,a0,2560
9d0022f0:	24a529e4 	addiu	a1,a1,10724
9d0022f4:	00003821 	move	a3,zero
9d0022f8:	afa00010 	sw	zero,16(sp)
9d0022fc:	0f400ab1 	jal	9d002ac4 <_ZN8PWMAudio17queueSingleSampleEPKsiii>
9d002300:	3c11a000 	lui	s1,0xa000
            }

            sprintf(t, "\n%02d", glAmmo);
9d002304:	0b400896 	j	9d002258 <loop+0x400>
9d002308:	8f86800c 	lw	a2,-32756(gp)

    if (glTrigger.changed()) {
        if (glTrigger.read() == LOW) {
            if (glBreech == 1) {
                glBreech = 0;
                display.setDecimalPoint(0, LOW);
9d00230c:	3c04a000 	lui	a0,0xa000
9d002310:	24840d1c 	addiu	a0,a0,3356
9d002314:	00002821 	move	a1,zero
9d002318:	00003021 	move	a2,zero
9d00231c:	0f400d46 	jal	9d003518 <_ZN6LEDMux15setDecimalPointEhh>
9d002320:	af808020 	sw	zero,-32736(gp)
                glFlash = 255;
                sound.queueSample(gl_fire, gl_fire_len, 0, 0);
9d002324:	3c029d02 	lui	v0,0x9d02
9d002328:	8c4629e0 	lw	a2,10720(v0)
9d00232c:	3c10a000 	lui	s0,0xa000
9d002330:	3c059d02 	lui	a1,0x9d02
9d002334:	26040a00 	addiu	a0,s0,2560
9d002338:	24a58680 	addiu	a1,a1,-31104
9d00233c:	00003821 	move	a3,zero
    if (glTrigger.changed()) {
        if (glTrigger.read() == LOW) {
            if (glBreech == 1) {
                glBreech = 0;
                display.setDecimalPoint(0, LOW);
                glFlash = 255;
9d002340:	240200ff 	li	v0,255
9d002344:	af828034 	sw	v0,-32716(gp)
                sound.queueSample(gl_fire, gl_fire_len, 0, 0);
9d002348:	0f400a97 	jal	9d002a5c <_ZN8PWMAudio11queueSampleEPKsiii>
9d00234c:	afa00010 	sw	zero,16(sp)
                sound.queueSample(gl_boom, gl_boom_len, 2000 + (rand() % 10000), (rand() % 100) - 50);
9d002350:	0f401e2a 	jal	9d0078a8 <rand>
9d002354:	00000000 	nop
9d002358:	0f401e2a 	jal	9d0078a8 <rand>
9d00235c:	00408821 	move	s1,v0
9d002360:	3c0768db 	lui	a3,0x68db
9d002364:	34e78bad 	ori	a3,a3,0x8bad
9d002368:	02270018 	mult	s1,a3
9d00236c:	3c0851eb 	lui	t0,0x51eb
9d002370:	3508851f 	ori	t0,t0,0x851f
9d002374:	00114fc3 	sra	t1,s1,0x1f
9d002378:	00021fc3 	sra	v1,v0,0x1f
9d00237c:	3c069d02 	lui	a2,0x9d02
9d002380:	8cc6867c 	lw	a2,-31108(a2)
9d002384:	3c059d01 	lui	a1,0x9d01
9d002388:	26040a00 	addiu	a0,s0,2560
9d00238c:	24a50c9c 	addiu	a1,a1,3228
9d002390:	00003810 	mfhi	a3
9d002394:	00073b03 	sra	a3,a3,0xc
9d002398:	00e93823 	subu	a3,a3,t1
9d00239c:	00480018 	mult	v0,t0
9d0023a0:	000751c0 	sll	t2,a3,0x7
9d0023a4:	00074880 	sll	t1,a3,0x2
9d0023a8:	01494823 	subu	t1,t2,t1
9d0023ac:	01273821 	addu	a3,t1,a3
9d0023b0:	00074880 	sll	t1,a3,0x2
9d0023b4:	00e93821 	addu	a3,a3,t1
9d0023b8:	00073900 	sll	a3,a3,0x4
9d0023bc:	02273823 	subu	a3,s1,a3
9d0023c0:	24e707d0 	addiu	a3,a3,2000
9d0023c4:	00004010 	mfhi	t0
9d0023c8:	00084143 	sra	t0,t0,0x5
9d0023cc:	01034023 	subu	t0,t0,v1
9d0023d0:	00081880 	sll	v1,t0,0x2
9d0023d4:	00084100 	sll	t0,t0,0x4
9d0023d8:	00681821 	addu	v1,v1,t0
9d0023dc:	00034080 	sll	t0,v1,0x2
9d0023e0:	00681821 	addu	v1,v1,t0
9d0023e4:	00431023 	subu	v0,v0,v1
9d0023e8:	2442ffce 	addiu	v0,v0,-50
9d0023ec:	0f400a97 	jal	9d002a5c <_ZN8PWMAudio11queueSampleEPKsiii>
9d0023f0:	afa20010 	sw	v0,16(sp)
            } else {
                sound.queueSample(pr_click, pr_click_len, 0, 0);
            }
        }
    }
}
9d0023f4:	0b4007e1 	j	9d001f84 <loop+0x12c>
9d0023f8:	8fbf002c 	lw	ra,44(sp)

    if (glRack.changed()) {

        if (glRack.read() == LOW) {
            if (glBreech == 1) {
                sound.queueSingleSample(gl_rack_pull, gl_rack_pull_len, 0, 0);
9d0023fc:	3c029d01 	lui	v0,0x9d01
9d002400:	8c46dec4 	lw	a2,-8508(v0)
9d002404:	3c04a000 	lui	a0,0xa000
9d002408:	3c059d01 	lui	a1,0x9d01
9d00240c:	24840a00 	addiu	a0,a0,2560
9d002410:	24a5ccc4 	addiu	a1,a1,-13116
9d002414:	00003821 	move	a3,zero
9d002418:	0f400ab1 	jal	9d002ac4 <_ZN8PWMAudio17queueSingleSampleEPKsiii>
9d00241c:	afa00010 	sw	zero,16(sp)
            } else {
                sound.queueSingleSample(gl_rack_pull_empty, gl_rack_pull_empty_len, 0, 0);
            }

            glBreech = 0;
            display.setDecimalPoint(0, LOW);
9d002420:	0b400830 	j	9d0020c0 <loop+0x268>
9d002424:	3c11a000 	lui	s1,0xa000

            if (prSweep > 0) {
                prSweepStep = -PR_SWEEP_SPEED;

            } else {
                prSweepStep = PR_SWEEP_SPEED;
9d002428:	24020001 	li	v0,1
            }

            firePulseRifle();
9d00242c:	0f400760 	jal	9d001d80 <_Z14firePulseRiflev>
9d002430:	af828028 	sw	v0,-32728(gp)
        } else {
            prFireTick = 0;
        }
    }

    if (prFireTick != 0) {
9d002434:	0b4007cc 	j	9d001f30 <loop+0xd8>
9d002438:	8f828050 	lw	v0,-32688(gp)

9d00243c <_GLOBAL__I_sound>:
#include <PWMAudio.h>
#include <DebouncedInput.h>

#include "sounds.h"

PWMAudio sound(AUDIO, 11025, AMP);
9d00243c:	3c04a000 	lui	a0,0xa000
        prFlash = 255;

    } else {
        sound.queueSample(pr_click, pr_click_len, 0, 0);
    }
}
9d002440:	27bdffe0 	addiu	sp,sp,-32
#include <PWMAudio.h>
#include <DebouncedInput.h>

#include "sounds.h"

PWMAudio sound(AUDIO, 11025, AMP);
9d002444:	24840a00 	addiu	a0,a0,2560
9d002448:	24050008 	li	a1,8
9d00244c:	24062b11 	li	a2,11025
        prFlash = 255;

    } else {
        sound.queueSample(pr_click, pr_click_len, 0, 0);
    }
}
9d002450:	afbf001c 	sw	ra,28(sp)
#include <PWMAudio.h>
#include <DebouncedInput.h>

#include "sounds.h"

PWMAudio sound(AUDIO, 11025, AMP);
9d002454:	0f4009e2 	jal	9d002788 <_ZN8PWMAudioC1Ehjh>
9d002458:	2407001e 	li	a3,30
LEDMux display(8, 2, 2000);
9d00245c:	3c04a000 	lui	a0,0xa000
9d002460:	24840d1c 	addiu	a0,a0,3356
9d002464:	24050008 	li	a1,8
9d002468:	24060002 	li	a2,2
9d00246c:	0f400c13 	jal	9d00304c <_ZN6LEDMuxC1Ehhj>
9d002470:	240707d0 	li	a3,2000

DebouncedInput prTrigger(IO0, 10, true);
9d002474:	3c04a000 	lui	a0,0xa000
9d002478:	24840d4c 	addiu	a0,a0,3404
9d00247c:	00002821 	move	a1,zero
9d002480:	2406000a 	li	a2,10
9d002484:	24070001 	li	a3,1
9d002488:	0f40093c 	jal	9d0024f0 <_ZN14DebouncedInputC1Ehmhh>
9d00248c:	afa00010 	sw	zero,16(sp)
DebouncedInput magazine(IO1, 10, true);
9d002490:	3c04a000 	lui	a0,0xa000
9d002494:	24840d74 	addiu	a0,a0,3444
9d002498:	24050001 	li	a1,1
9d00249c:	2406000a 	li	a2,10
9d0024a0:	24070001 	li	a3,1
9d0024a4:	0f40093c 	jal	9d0024f0 <_ZN14DebouncedInputC1Ehmhh>
9d0024a8:	afa00010 	sw	zero,16(sp)
DebouncedInput glTrigger(IO2, 10, true);
9d0024ac:	3c04a000 	lui	a0,0xa000
9d0024b0:	24840d9c 	addiu	a0,a0,3484
9d0024b4:	24050002 	li	a1,2
9d0024b8:	2406000a 	li	a2,10
9d0024bc:	24070001 	li	a3,1
9d0024c0:	0f40093c 	jal	9d0024f0 <_ZN14DebouncedInputC1Ehmhh>
9d0024c4:	afa00010 	sw	zero,16(sp)
DebouncedInput glRack(IO3, 10, true);
9d0024c8:	3c04a000 	lui	a0,0xa000
9d0024cc:	24840dc4 	addiu	a0,a0,3524
9d0024d0:	24050003 	li	a1,3
9d0024d4:	2406000a 	li	a2,10
9d0024d8:	24070001 	li	a3,1
9d0024dc:	0f40093c 	jal	9d0024f0 <_ZN14DebouncedInputC1Ehmhh>
9d0024e0:	afa00010 	sw	zero,16(sp)
        prFlash = 255;

    } else {
        sound.queueSample(pr_click, pr_click_len, 0, 0);
    }
}
9d0024e4:	8fbf001c 	lw	ra,28(sp)
9d0024e8:	03e00008 	jr	ra
9d0024ec:	27bd0020 	addiu	sp,sp,32

9d0024f0 <_ZN14DebouncedInputC1Ehmhh>:
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <DebouncedInput.h>

DebouncedInput::DebouncedInput(byte pin, unsigned long dbt, boolean pullup = true, uint8_t keep)
9d0024f0:	27bdffd8 	addiu	sp,sp,-40
9d0024f4:	afb10018 	sw	s1,24(sp)
9d0024f8:	93b10038 	lbu	s1,56(sp)
9d0024fc:	afb00014 	sw	s0,20(sp)
9d002500:	afbf0024 	sw	ra,36(sp)
9d002504:	afb30020 	sw	s3,32(sp)
9d002508:	afb2001c 	sw	s2,28(sp)
9d00250c:	00808021 	move	s0,a0
{
    _pin = pin;
9d002510:	a0850000 	sb	a1,0(a0)
    _debounceTime = dbt;
9d002514:	ac86000c 	sw	a2,12(a0)
    _pullup = pullup;
9d002518:	a0870014 	sb	a3,20(a0)
    _keep = keep;
    if (_keep > 0) {
9d00251c:	1620000a 	bnez	s1,9d002548 <_ZN14DebouncedInputC1Ehmhh+0x58>
9d002520:	a0910024 	sb	s1,36(a0)
        _lastLow = (unsigned long *)malloc(_keep * sizeof(unsigned long));
        for (int i = 0; i < _keep; i++) {
            _lastHigh[i] = _lastLow[i] = 0;
        }
    } else {
        _lastHigh = NULL;
9d002524:	ac80001c 	sw	zero,28(a0)
        _lastLow = NULL;
9d002528:	ac800020 	sw	zero,32(a0)
    }
}
9d00252c:	8fbf0024 	lw	ra,36(sp)
9d002530:	8fb30020 	lw	s3,32(sp)
9d002534:	8fb2001c 	lw	s2,28(sp)
9d002538:	8fb10018 	lw	s1,24(sp)
9d00253c:	8fb00014 	lw	s0,20(sp)
9d002540:	03e00008 	jr	ra
9d002544:	27bd0028 	addiu	sp,sp,40
    _pin = pin;
    _debounceTime = dbt;
    _pullup = pullup;
    _keep = keep;
    if (_keep > 0) {
        _lastHigh = (unsigned long *)malloc(_keep * sizeof(unsigned long));
9d002548:	00119080 	sll	s2,s1,0x2
9d00254c:	0f401c57 	jal	9d00715c <malloc>
9d002550:	02402021 	move	a0,s2
9d002554:	ae02001c 	sw	v0,28(s0)
        _lastLow = (unsigned long *)malloc(_keep * sizeof(unsigned long));
9d002558:	02402021 	move	a0,s2
9d00255c:	0f401c57 	jal	9d00715c <malloc>
9d002560:	00409821 	move	s3,v0
        for (int i = 0; i < _keep; i++) {
9d002564:	1a20fff1 	blez	s1,9d00252c <_ZN14DebouncedInputC1Ehmhh+0x3c>
9d002568:	ae020020 	sw	v0,32(s0)
9d00256c:	92050024 	lbu	a1,36(s0)
9d002570:	00001821 	move	v1,zero
9d002574:	24630001 	addiu	v1,v1,1
9d002578:	0065202a 	slt	a0,v1,a1
            _lastHigh[i] = _lastLow[i] = 0;
9d00257c:	ac400000 	sw	zero,0(v0)
9d002580:	ae600000 	sw	zero,0(s3)
    _pullup = pullup;
    _keep = keep;
    if (_keep > 0) {
        _lastHigh = (unsigned long *)malloc(_keep * sizeof(unsigned long));
        _lastLow = (unsigned long *)malloc(_keep * sizeof(unsigned long));
        for (int i = 0; i < _keep; i++) {
9d002584:	24420004 	addiu	v0,v0,4
9d002588:	1480fffa 	bnez	a0,9d002574 <_ZN14DebouncedInputC1Ehmhh+0x84>
9d00258c:	26730004 	addiu	s3,s3,4
        }
    } else {
        _lastHigh = NULL;
        _lastLow = NULL;
    }
}
9d002590:	8fbf0024 	lw	ra,36(sp)
9d002594:	8fb30020 	lw	s3,32(sp)
9d002598:	8fb2001c 	lw	s2,28(sp)
9d00259c:	8fb10018 	lw	s1,24(sp)
9d0025a0:	8fb00014 	lw	s0,20(sp)
9d0025a4:	03e00008 	jr	ra
9d0025a8:	27bd0028 	addiu	sp,sp,40

9d0025ac <_ZN14DebouncedInput5beginEv>:

void DebouncedInput::begin()
{
9d0025ac:	27bdffe8 	addiu	sp,sp,-24
9d0025b0:	afb00010 	sw	s0,16(sp)
9d0025b4:	afbf0014 	sw	ra,20(sp)
    if (_pullup) {
9d0025b8:	90820014 	lbu	v0,20(a0)
9d0025bc:	1440000c 	bnez	v0,9d0025f0 <_ZN14DebouncedInput5beginEv+0x44>
9d0025c0:	00808021 	move	s0,a0
        pinMode(_pin, INPUT_PULLUP);
    } else {
        pinMode(_pin, INPUT);
9d0025c4:	90840000 	lbu	a0,0(a0)
9d0025c8:	0f400d9d 	jal	9d003674 <pinMode>
9d0025cc:	00002821 	move	a1,zero
    }
    _value = digitalRead(_pin);
9d0025d0:	0f400eec 	jal	9d003bb0 <digitalRead>
9d0025d4:	92040000 	lbu	a0,0(s0)
    _lastValue = _value;
}
9d0025d8:	8fbf0014 	lw	ra,20(sp)
    if (_pullup) {
        pinMode(_pin, INPUT_PULLUP);
    } else {
        pinMode(_pin, INPUT);
    }
    _value = digitalRead(_pin);
9d0025dc:	ae020004 	sw	v0,4(s0)
    _lastValue = _value;
9d0025e0:	ae020018 	sw	v0,24(s0)
}
9d0025e4:	8fb00010 	lw	s0,16(sp)
9d0025e8:	03e00008 	jr	ra
9d0025ec:	27bd0018 	addiu	sp,sp,24
}

void DebouncedInput::begin()
{
    if (_pullup) {
        pinMode(_pin, INPUT_PULLUP);
9d0025f0:	90840000 	lbu	a0,0(a0)
9d0025f4:	0f400d9d 	jal	9d003674 <pinMode>
9d0025f8:	24050003 	li	a1,3
    } else {
        pinMode(_pin, INPUT);
    }
    _value = digitalRead(_pin);
9d0025fc:	0f400eec 	jal	9d003bb0 <digitalRead>
9d002600:	92040000 	lbu	a0,0(s0)
    _lastValue = _value;
}
9d002604:	8fbf0014 	lw	ra,20(sp)
    if (_pullup) {
        pinMode(_pin, INPUT_PULLUP);
    } else {
        pinMode(_pin, INPUT);
    }
    _value = digitalRead(_pin);
9d002608:	ae020004 	sw	v0,4(s0)
    _lastValue = _value;
9d00260c:	ae020018 	sw	v0,24(s0)
}
9d002610:	8fb00010 	lw	s0,16(sp)
9d002614:	03e00008 	jr	ra
9d002618:	27bd0018 	addiu	sp,sp,24

9d00261c <_ZN14DebouncedInput4readEv>:

int DebouncedInput::read() 
{
9d00261c:	27bdffe0 	addiu	sp,sp,-32
9d002620:	afb00014 	sw	s0,20(sp)
9d002624:	00808021 	move	s0,a0
9d002628:	afbf001c 	sw	ra,28(sp)
    int r;
    unsigned long now = millis();
9d00262c:	0f401030 	jal	9d0040c0 <millis>
9d002630:	afb10018 	sw	s1,24(sp)
    r = digitalRead(_pin);
9d002634:	92040000 	lbu	a0,0(s0)
9d002638:	0f400eec 	jal	9d003bb0 <digitalRead>
9d00263c:	00408821 	move	s1,v0
9d002640:	00401821 	move	v1,v0
    if (r != _lrt) {
9d002644:	8e020010 	lw	v0,16(s0)
9d002648:	50430009 	beql	v0,v1,9d002670 <_ZN14DebouncedInput4readEv+0x54>
9d00264c:	8e030008 	lw	v1,8(s0)
        _lrt = r;
        _lastChange = now;
9d002650:	8e020004 	lw	v0,4(s0)
{
    int r;
    unsigned long now = millis();
    r = digitalRead(_pin);
    if (r != _lrt) {
        _lrt = r;
9d002654:	ae030010 	sw	v1,16(s0)
        _lastChange = now;
9d002658:	ae110008 	sw	s1,8(s0)
                }
            }
        }
    }
    return _value;
}
9d00265c:	8fbf001c 	lw	ra,28(sp)
9d002660:	8fb10018 	lw	s1,24(sp)
9d002664:	8fb00014 	lw	s0,20(sp)
9d002668:	03e00008 	jr	ra
9d00266c:	27bd0020 	addiu	sp,sp,32
    r = digitalRead(_pin);
    if (r != _lrt) {
        _lrt = r;
        _lastChange = now;
    }
    if (now - _lastChange > _debounceTime) {
9d002670:	8e04000c 	lw	a0,12(s0)
9d002674:	02231823 	subu	v1,s1,v1
9d002678:	0083182b 	sltu	v1,a0,v1
9d00267c:	5060fff7 	beqzl	v1,9d00265c <_ZN14DebouncedInput4readEv+0x40>
9d002680:	8e020004 	lw	v0,4(s0)
        if (_value != _lrt) {
9d002684:	8e030004 	lw	v1,4(s0)
9d002688:	1043fff5 	beq	v0,v1,9d002660 <_ZN14DebouncedInput4readEv+0x44>
9d00268c:	8fbf001c 	lw	ra,28(sp)
            _value = _lrt;
            if (_keep > 0) {
9d002690:	92050024 	lbu	a1,36(s0)
9d002694:	10a0fff1 	beqz	a1,9d00265c <_ZN14DebouncedInput4readEv+0x40>
9d002698:	ae020004 	sw	v0,4(s0)
                if (_value) {
9d00269c:	10400016 	beqz	v0,9d0026f8 <_ZN14DebouncedInput4readEv+0xdc>
9d0026a0:	24a4ffff 	addiu	a0,a1,-1
                    for (int i = _keep-1; i > 0; i--) {
9d0026a4:	18800027 	blez	a0,9d002744 <_ZN14DebouncedInput4readEv+0x128>
9d0026a8:	8e09001c 	lw	t1,28(s0)
    }
    _value = digitalRead(_pin);
    _lastValue = _value;
}

int DebouncedInput::read() 
9d0026ac:	24a3fffe 	addiu	v1,a1,-2
9d0026b0:	00054023 	negu	t0,a1
9d0026b4:	00031880 	sll	v1,v1,0x2
9d0026b8:	01231821 	addu	v1,t1,v1
9d0026bc:	00052880 	sll	a1,a1,0x2
9d0026c0:	00084080 	sll	t0,t0,0x2
        if (_value != _lrt) {
            _value = _lrt;
            if (_keep > 0) {
                if (_value) {
                    for (int i = _keep-1; i > 0; i--) {
                        _lastHigh[i] = _lastHigh[i-1];
9d0026c4:	8c670000 	lw	a3,0(v1)
    }
    _value = digitalRead(_pin);
    _lastValue = _value;
}

int DebouncedInput::read() 
9d0026c8:	00683021 	addu	a2,v1,t0
9d0026cc:	00c53021 	addu	a2,a2,a1
    if (now - _lastChange > _debounceTime) {
        if (_value != _lrt) {
            _value = _lrt;
            if (_keep > 0) {
                if (_value) {
                    for (int i = _keep-1; i > 0; i--) {
9d0026d0:	2484ffff 	addiu	a0,a0,-1
                        _lastHigh[i] = _lastHigh[i-1];
9d0026d4:	acc70004 	sw	a3,4(a2)
    if (now - _lastChange > _debounceTime) {
        if (_value != _lrt) {
            _value = _lrt;
            if (_keep > 0) {
                if (_value) {
                    for (int i = _keep-1; i > 0; i--) {
9d0026d8:	1480fffa 	bnez	a0,9d0026c4 <_ZN14DebouncedInput4readEv+0xa8>
9d0026dc:	2463fffc 	addiu	v1,v1,-4
                    _lastHigh[0] = now;
                } else {
                    for (int i = _keep-1; i > 0; i--) {
                        _lastLow[i] = _lastLow[i-1];
                    }
                    _lastLow[0] = now;
9d0026e0:	ad310000 	sw	s1,0(t1)
                }
            }
        }
    }
    return _value;
}
9d0026e4:	8fbf001c 	lw	ra,28(sp)
9d0026e8:	8fb10018 	lw	s1,24(sp)
9d0026ec:	8fb00014 	lw	s0,20(sp)
9d0026f0:	03e00008 	jr	ra
9d0026f4:	27bd0020 	addiu	sp,sp,32
                    for (int i = _keep-1; i > 0; i--) {
                        _lastHigh[i] = _lastHigh[i-1];
                    }
                    _lastHigh[0] = now;
                } else {
                    for (int i = _keep-1; i > 0; i--) {
9d0026f8:	18800010 	blez	a0,9d00273c <_ZN14DebouncedInput4readEv+0x120>
9d0026fc:	8e090020 	lw	t1,32(s0)
    }
    _value = digitalRead(_pin);
    _lastValue = _value;
}

int DebouncedInput::read() 
9d002700:	24a3fffe 	addiu	v1,a1,-2
9d002704:	00054023 	negu	t0,a1
9d002708:	00031880 	sll	v1,v1,0x2
9d00270c:	01231821 	addu	v1,t1,v1
9d002710:	00052880 	sll	a1,a1,0x2
9d002714:	00084080 	sll	t0,t0,0x2
                        _lastHigh[i] = _lastHigh[i-1];
                    }
                    _lastHigh[0] = now;
                } else {
                    for (int i = _keep-1; i > 0; i--) {
                        _lastLow[i] = _lastLow[i-1];
9d002718:	8c670000 	lw	a3,0(v1)
    }
    _value = digitalRead(_pin);
    _lastValue = _value;
}

int DebouncedInput::read() 
9d00271c:	00683021 	addu	a2,v1,t0
9d002720:	00c53021 	addu	a2,a2,a1
                    for (int i = _keep-1; i > 0; i--) {
                        _lastHigh[i] = _lastHigh[i-1];
                    }
                    _lastHigh[0] = now;
                } else {
                    for (int i = _keep-1; i > 0; i--) {
9d002724:	2484ffff 	addiu	a0,a0,-1
                        _lastLow[i] = _lastLow[i-1];
9d002728:	acc70004 	sw	a3,4(a2)
                    for (int i = _keep-1; i > 0; i--) {
                        _lastHigh[i] = _lastHigh[i-1];
                    }
                    _lastHigh[0] = now;
                } else {
                    for (int i = _keep-1; i > 0; i--) {
9d00272c:	1480fffa 	bnez	a0,9d002718 <_ZN14DebouncedInput4readEv+0xfc>
9d002730:	2463fffc 	addiu	v1,v1,-4
                        _lastLow[i] = _lastLow[i-1];
                    }
                    _lastLow[0] = now;
9d002734:	0b4009b9 	j	9d0026e4 <_ZN14DebouncedInput4readEv+0xc8>
9d002738:	ad310000 	sw	s1,0(t1)
9d00273c:	0b4009b9 	j	9d0026e4 <_ZN14DebouncedInput4readEv+0xc8>
9d002740:	ad310000 	sw	s1,0(t1)
9d002744:	0b4009b9 	j	9d0026e4 <_ZN14DebouncedInput4readEv+0xc8>
9d002748:	ad310000 	sw	s1,0(t1)

9d00274c <_ZN14DebouncedInput7changedEv>:
    }
    return _value;
}

boolean DebouncedInput::changed()
{
9d00274c:	27bdffe8 	addiu	sp,sp,-24
9d002750:	afb00010 	sw	s0,16(sp)
9d002754:	afbf0014 	sw	ra,20(sp)
    int r = read();
9d002758:	0f400987 	jal	9d00261c <_ZN14DebouncedInput4readEv>
9d00275c:	00808021 	move	s0,a0
    if (r != _lastValue) {
9d002760:	8e040018 	lw	a0,24(s0)
    return _value;
}

boolean DebouncedInput::changed()
{
    int r = read();
9d002764:	00401821 	move	v1,v0
    if (r != _lastValue) {
9d002768:	10830003 	beq	a0,v1,9d002778 <_ZN14DebouncedInput7changedEv+0x2c>
9d00276c:	00001021 	move	v0,zero
        _lastValue = r;
9d002770:	ae030018 	sw	v1,24(s0)
        return true;
9d002774:	24020001 	li	v0,1
    }
    return false;
}
9d002778:	8fbf0014 	lw	ra,20(sp)
9d00277c:	8fb00010 	lw	s0,16(sp)
9d002780:	03e00008 	jr	ra
9d002784:	27bd0018 	addiu	sp,sp,24

9d002788 <_ZN8PWMAudioC1Ehjh>:
    this->ampInvert = 0;
}
    
PWMAudio::PWMAudio (unsigned char pin, unsigned int sfreq, unsigned char amp)
{
    this->audioPin = pin;
9d002788:	a0850310 	sb	a1,784(a0)
    this->sampleRate = sfreq;
9d00278c:	ac860314 	sw	a2,788(a0)
    this->amplifierPin = amp;
9d002790:	a0870311 	sb	a3,785(a0)
    this->ampInvert = 0;
}
9d002794:	03e00008 	jr	ra
9d002798:	a0800318 	sb	zero,792(a0)

9d00279c <_ZN8PWMAudio5ampOnEv>:
    ampInvert = true;
}

void PWMAudio::ampOn()
{
    if (this->amplifierPin != 255) {
9d00279c:	90820311 	lbu	v0,785(a0)
9d0027a0:	240300ff 	li	v1,255
9d0027a4:	10430005 	beq	v0,v1,9d0027bc <_ZN8PWMAudio5ampOnEv+0x20>
9d0027a8:	00000000 	nop
        digitalWrite(this->amplifierPin, ampInvert ? LOW : HIGH);
9d0027ac:	90850318 	lbu	a1,792(a0)
9d0027b0:	00402021 	move	a0,v0
9d0027b4:	0b400e82 	j	9d003a08 <digitalWrite>
9d0027b8:	2ca50001 	sltiu	a1,a1,1
9d0027bc:	03e00008 	jr	ra
9d0027c0:	00000000 	nop

9d0027c4 <_ZN8PWMAudio6ampOffEv>:
    }
}

void PWMAudio::ampOff()
{
    if (this->amplifierPin != 255) {
9d0027c4:	90820311 	lbu	v0,785(a0)
9d0027c8:	240300ff 	li	v1,255
9d0027cc:	10430005 	beq	v0,v1,9d0027e4 <_ZN8PWMAudio6ampOffEv+0x20>
9d0027d0:	00000000 	nop
        digitalWrite(this->amplifierPin, ampInvert ? HIGH : LOW);
9d0027d4:	90850318 	lbu	a1,792(a0)
9d0027d8:	00402021 	move	a0,v0
9d0027dc:	0b400e82 	j	9d003a08 <digitalWrite>
9d0027e0:	0005282b 	sltu	a1,zero,a1
9d0027e4:	03e00008 	jr	ra
9d0027e8:	00000000 	nop

9d0027ec <_ZN8PWMAudio5beginEv>:
    }
}

void PWMAudio::begin()
{
	T4CONbits.TCKPS = 0b111; // 1:256
9d0027ec:	3c02bf80 	lui	v0,0xbf80
9d0027f0:	8c430c00 	lw	v1,3072(v0)
        digitalWrite(this->amplifierPin, ampInvert ? HIGH : LOW);
    }
}

void PWMAudio::begin()
{
9d0027f4:	27bdffe8 	addiu	sp,sp,-24
9d0027f8:	afb00010 	sw	s0,16(sp)
9d0027fc:	00808021 	move	s0,a0
	T4CONbits.TCKPS = 0b111; // 1:256
9d002800:	24040007 	li	a0,7
9d002804:	7c833104 	ins	v1,a0,0x4,0x3
9d002808:	ac430c00 	sw	v1,3072(v0)
	PR4 = (F_CPU / 256) / this->sampleRate;
9d00280c:	8e030314 	lw	v1,788(s0)
9d002810:	3c040004 	lui	a0,0x4
9d002814:	3484c4b4 	ori	a0,a0,0xc4b4
9d002818:	0083001b 	divu	zero,a0,v1
9d00281c:	006001f4 	teq	v1,zero,0x7
9d002820:	3c08bf80 	lui	t0,0xbf80

	IPC4bits.T4IP = 5;
9d002824:	3c07bf88 	lui	a3,0xbf88
	IFS0bits.T4IF = 0;
9d002828:	3c06bf88 	lui	a2,0xbf88
	IEC0bits.T4IE = 1;
9d00282c:	3c05bf88 	lui	a1,0xbf88
9d002830:	24040001 	li	a0,1
	T4CONbits.TON = 1;

    T3CONbits.TCKPS = 0b000; // 1:1
9d002834:	3c03bf80 	lui	v1,0xbf80
        digitalWrite(this->amplifierPin, ampInvert ? HIGH : LOW);
    }
}

void PWMAudio::begin()
{
9d002838:	afbf0014 	sw	ra,20(sp)
	T4CONbits.TCKPS = 0b111; // 1:256
	PR4 = (F_CPU / 256) / this->sampleRate;
9d00283c:	00004812 	mflo	t1
9d002840:	ad090c20 	sw	t1,3104(t0)

	IPC4bits.T4IP = 5;
9d002844:	8ce810d0 	lw	t0,4304(a3)
9d002848:	24090005 	li	t1,5
9d00284c:	7d282084 	ins	t0,t1,0x2,0x3
9d002850:	ace810d0 	sw	t0,4304(a3)
	IFS0bits.T4IF = 0;
9d002854:	8cc71030 	lw	a3,4144(a2)
9d002858:	7c078404 	ins	a3,zero,0x10,0x1
9d00285c:	acc71030 	sw	a3,4144(a2)
	IEC0bits.T4IE = 1;
9d002860:	8ca61060 	lw	a2,4192(a1)
9d002864:	7c868404 	ins	a2,a0,0x10,0x1
9d002868:	aca61060 	sw	a2,4192(a1)
	T4CONbits.TON = 1;
9d00286c:	8c450c00 	lw	a1,3072(v0)
9d002870:	7c857bc4 	ins	a1,a0,0xf,0x1
9d002874:	ac450c00 	sw	a1,3072(v0)

    T3CONbits.TCKPS = 0b000; // 1:1
9d002878:	8c620a00 	lw	v0,2560(v1)
9d00287c:	7c023104 	ins	v0,zero,0x4,0x3
9d002880:	ac620a00 	sw	v0,2560(v1)
	T3CONbits.TON = 1;
9d002884:	8c620a00 	lw	v0,2560(v1)
9d002888:	7c827bc4 	ins	v0,a0,0xf,0x1
9d00288c:	ac620a00 	sw	v0,2560(v1)
    PR3 = AUDIO_BITS;
    
    switch (digital_pin_to_timer_PGM[this->audioPin]) {
9d002890:	92030310 	lbu	v1,784(s0)
	IEC0bits.T4IE = 1;
	T4CONbits.TON = 1;

    T3CONbits.TCKPS = 0b000; // 1:1
	T3CONbits.TON = 1;
    PR3 = AUDIO_BITS;
9d002894:	3c02bf80 	lui	v0,0xbf80
9d002898:	24041000 	li	a0,4096
9d00289c:	ac440a20 	sw	a0,2592(v0)
    
    switch (digital_pin_to_timer_PGM[this->audioPin]) {
9d0028a0:	3c029d03 	lui	v0,0x9d03
9d0028a4:	00031840 	sll	v1,v1,0x1
9d0028a8:	2442bd34 	addiu	v0,v0,-17100
9d0028ac:	00621021 	addu	v0,v1,v0
9d0028b0:	94420000 	lhu	v0,0(v0)
9d0028b4:	2c430006 	sltiu	v1,v0,6
9d0028b8:	50600018 	beqzl	v1,9d00291c <_ZN8PWMAudio5beginEv+0x130>
9d0028bc:	92040311 	lbu	a0,785(s0)
9d0028c0:	3c039d03 	lui	v1,0x9d03
9d0028c4:	00021080 	sll	v0,v0,0x2
9d0028c8:	2463bbfc 	addiu	v1,v1,-17412
9d0028cc:	00621021 	addu	v0,v1,v0
9d0028d0:	8c420000 	lw	v0,0(v0)
9d0028d4:	00400008 	jr	v0
9d0028d8:	00000000 	nop
        case _TIMER_OC1:
            OC1CONbits.OCTSEL = 1;
9d0028dc:	3c02bf80 	lui	v0,0xbf80
9d0028e0:	8c433000 	lw	v1,12288(v0)
9d0028e4:	24040001 	li	a0,1
            OC1CONbits.OCM = 0b110;
9d0028e8:	24050006 	li	a1,6
	T3CONbits.TON = 1;
    PR3 = AUDIO_BITS;
    
    switch (digital_pin_to_timer_PGM[this->audioPin]) {
        case _TIMER_OC1:
            OC1CONbits.OCTSEL = 1;
9d0028ec:	7c8318c4 	ins	v1,a0,0x3,0x1
9d0028f0:	ac433000 	sw	v1,12288(v0)
            OC1CONbits.OCM = 0b110;
9d0028f4:	8c433000 	lw	v1,12288(v0)
9d0028f8:	7ca31004 	ins	v1,a1,0x0,0x3
9d0028fc:	ac433000 	sw	v1,12288(v0)
            OC1CONbits.ON = 1;
9d002900:	8c433000 	lw	v1,12288(v0)
9d002904:	7c837bc4 	ins	v1,a0,0xf,0x1
9d002908:	ac433000 	sw	v1,12288(v0)
            OC1RS = AUDIO_BITS >> 1;
9d00290c:	24030800 	li	v1,2048
9d002910:	3c02bf80 	lui	v0,0xbf80
9d002914:	ac433020 	sw	v1,12320(v0)
            OC5CONbits.OCM = 0b110;
            OC5CONbits.ON = 1;
            OC5RS = AUDIO_BITS >> 1;
            break;
    }
    if (this->amplifierPin != 255) {
9d002918:	92040311 	lbu	a0,785(s0)
9d00291c:	240200ff 	li	v0,255
9d002920:	10820006 	beq	a0,v0,9d00293c <_ZN8PWMAudio5beginEv+0x150>
9d002924:	8fbf0014 	lw	ra,20(sp)
        pinMode(this->amplifierPin, OUTPUT);
9d002928:	0f400d9d 	jal	9d003674 <pinMode>
9d00292c:	24050001 	li	a1,1
        this->ampOff();
9d002930:	0f4009f1 	jal	9d0027c4 <_ZN8PWMAudio6ampOffEv>
9d002934:	02002021 	move	a0,s0
    }

	internalPWMAudioPointer = this;
}
9d002938:	8fbf0014 	lw	ra,20(sp)
    if (this->amplifierPin != 255) {
        pinMode(this->amplifierPin, OUTPUT);
        this->ampOff();
    }

	internalPWMAudioPointer = this;
9d00293c:	af908058 	sw	s0,-32680(gp)
}
9d002940:	8fb00010 	lw	s0,16(sp)
9d002944:	03e00008 	jr	ra
9d002948:	27bd0018 	addiu	sp,sp,24
            OC4CONbits.OCM = 0b110;
            OC4CONbits.ON = 1;
            OC4RS = AUDIO_BITS >> 1;
            break;
        case _TIMER_OC5:
            OC5CONbits.OCTSEL = 1;
9d00294c:	3c02bf80 	lui	v0,0xbf80
9d002950:	8c433800 	lw	v1,14336(v0)
9d002954:	24040001 	li	a0,1
            OC5CONbits.OCM = 0b110;
9d002958:	24050006 	li	a1,6
            OC4CONbits.OCM = 0b110;
            OC4CONbits.ON = 1;
            OC4RS = AUDIO_BITS >> 1;
            break;
        case _TIMER_OC5:
            OC5CONbits.OCTSEL = 1;
9d00295c:	7c8318c4 	ins	v1,a0,0x3,0x1
9d002960:	ac433800 	sw	v1,14336(v0)
            OC5CONbits.OCM = 0b110;
9d002964:	8c433800 	lw	v1,14336(v0)
9d002968:	7ca31004 	ins	v1,a1,0x0,0x3
9d00296c:	ac433800 	sw	v1,14336(v0)
            OC5CONbits.ON = 1;
9d002970:	8c433800 	lw	v1,14336(v0)
9d002974:	7c837bc4 	ins	v1,a0,0xf,0x1
9d002978:	ac433800 	sw	v1,14336(v0)
            OC5RS = AUDIO_BITS >> 1;
9d00297c:	24030800 	li	v1,2048
9d002980:	3c02bf80 	lui	v0,0xbf80
9d002984:	ac433820 	sw	v1,14368(v0)
            break;
9d002988:	0b400a47 	j	9d00291c <_ZN8PWMAudio5beginEv+0x130>
9d00298c:	92040311 	lbu	a0,785(s0)
            OC1CONbits.OCM = 0b110;
            OC1CONbits.ON = 1;
            OC1RS = AUDIO_BITS >> 1;
            break;
        case _TIMER_OC2:
            OC2CONbits.OCTSEL = 1;
9d002990:	3c02bf80 	lui	v0,0xbf80
9d002994:	8c433200 	lw	v1,12800(v0)
9d002998:	24040001 	li	a0,1
            OC2CONbits.OCM = 0b110;
9d00299c:	24050006 	li	a1,6
            OC1CONbits.OCM = 0b110;
            OC1CONbits.ON = 1;
            OC1RS = AUDIO_BITS >> 1;
            break;
        case _TIMER_OC2:
            OC2CONbits.OCTSEL = 1;
9d0029a0:	7c8318c4 	ins	v1,a0,0x3,0x1
9d0029a4:	ac433200 	sw	v1,12800(v0)
            OC2CONbits.OCM = 0b110;
9d0029a8:	8c433200 	lw	v1,12800(v0)
9d0029ac:	7ca31004 	ins	v1,a1,0x0,0x3
9d0029b0:	ac433200 	sw	v1,12800(v0)
            OC2CONbits.ON = 1;
9d0029b4:	8c433200 	lw	v1,12800(v0)
9d0029b8:	7c837bc4 	ins	v1,a0,0xf,0x1
9d0029bc:	ac433200 	sw	v1,12800(v0)
            OC2RS = AUDIO_BITS >> 1;
9d0029c0:	24030800 	li	v1,2048
9d0029c4:	3c02bf80 	lui	v0,0xbf80
9d0029c8:	ac433220 	sw	v1,12832(v0)
            break;
9d0029cc:	0b400a47 	j	9d00291c <_ZN8PWMAudio5beginEv+0x130>
9d0029d0:	92040311 	lbu	a0,785(s0)
        case _TIMER_OC3:
            OC3CONbits.OCTSEL = 1;
9d0029d4:	3c02bf80 	lui	v0,0xbf80
9d0029d8:	8c433400 	lw	v1,13312(v0)
9d0029dc:	24040001 	li	a0,1
            OC3CONbits.OCM = 0b110;
9d0029e0:	24050006 	li	a1,6
            OC2CONbits.OCM = 0b110;
            OC2CONbits.ON = 1;
            OC2RS = AUDIO_BITS >> 1;
            break;
        case _TIMER_OC3:
            OC3CONbits.OCTSEL = 1;
9d0029e4:	7c8318c4 	ins	v1,a0,0x3,0x1
9d0029e8:	ac433400 	sw	v1,13312(v0)
            OC3CONbits.OCM = 0b110;
9d0029ec:	8c433400 	lw	v1,13312(v0)
9d0029f0:	7ca31004 	ins	v1,a1,0x0,0x3
9d0029f4:	ac433400 	sw	v1,13312(v0)
            OC3CONbits.ON = 1;
9d0029f8:	8c433400 	lw	v1,13312(v0)
9d0029fc:	7c837bc4 	ins	v1,a0,0xf,0x1
9d002a00:	ac433400 	sw	v1,13312(v0)
            OC3RS = AUDIO_BITS >> 1;
9d002a04:	24030800 	li	v1,2048
9d002a08:	3c02bf80 	lui	v0,0xbf80
9d002a0c:	ac433420 	sw	v1,13344(v0)
            break;
9d002a10:	0b400a47 	j	9d00291c <_ZN8PWMAudio5beginEv+0x130>
9d002a14:	92040311 	lbu	a0,785(s0)
        case _TIMER_OC4:
            OC4CONbits.OCTSEL = 1;
9d002a18:	3c02bf80 	lui	v0,0xbf80
9d002a1c:	8c433600 	lw	v1,13824(v0)
9d002a20:	24040001 	li	a0,1
            OC4CONbits.OCM = 0b110;
9d002a24:	24050006 	li	a1,6
            OC3CONbits.OCM = 0b110;
            OC3CONbits.ON = 1;
            OC3RS = AUDIO_BITS >> 1;
            break;
        case _TIMER_OC4:
            OC4CONbits.OCTSEL = 1;
9d002a28:	7c8318c4 	ins	v1,a0,0x3,0x1
9d002a2c:	ac433600 	sw	v1,13824(v0)
            OC4CONbits.OCM = 0b110;
9d002a30:	8c433600 	lw	v1,13824(v0)
9d002a34:	7ca31004 	ins	v1,a1,0x0,0x3
9d002a38:	ac433600 	sw	v1,13824(v0)
            OC4CONbits.ON = 1;
9d002a3c:	8c433600 	lw	v1,13824(v0)
9d002a40:	7c837bc4 	ins	v1,a0,0xf,0x1
9d002a44:	ac433600 	sw	v1,13824(v0)
            OC4RS = AUDIO_BITS >> 1;
9d002a48:	24030800 	li	v1,2048
9d002a4c:	3c02bf80 	lui	v0,0xbf80
9d002a50:	ac433620 	sw	v1,13856(v0)
            break;
9d002a54:	0b400a47 	j	9d00291c <_ZN8PWMAudio5beginEv+0x130>
9d002a58:	92040311 	lbu	a0,785(s0)
9d002a5c <_ZN8PWMAudio11queueSampleEPKsiii>:
}

void PWMAudio::queueSample(const short *sample, int length, int delay, int speed, int volume)
{
   int i;
    for (i=0; i<MAX_SAMPLES; i++) {
9d002a5c:	00801021 	move	v0,a0
9d002a60:	00001821 	move	v1,zero
9d002a64:	0b400a9e 	j	9d002a78 <_ZN8PWMAudio11queueSampleEPKsiii+0x1c>
9d002a68:	2409001c 	li	t1,28
9d002a6c:	24630001 	addiu	v1,v1,1
9d002a70:	10690012 	beq	v1,t1,9d002abc <_ZN8PWMAudio11queueSampleEPKsiii+0x60>
9d002a74:	00000000 	nop
        if (this->samples[i].sample == NULL) {
9d002a78:	8c480000 	lw	t0,0(v0)
9d002a7c:	1500fffb 	bnez	t0,9d002a6c <_ZN8PWMAudio11queueSampleEPKsiii+0x10>
9d002a80:	2442001c 	addiu	v0,v0,28
            this->samples[i].sample = (short *)sample;
9d002a84:	00031080 	sll	v0,v1,0x2
9d002a88:	00031940 	sll	v1,v1,0x5
9d002a8c:	00621823 	subu	v1,v1,v0
            this->samples[i].len = length;
            this->samples[i].delay = delay;
            this->samples[i].pos = 0;
            this->samples[i].speed = speed;
9d002a90:	8fa20010 	lw	v0,16(sp)
void PWMAudio::queueSample(const short *sample, int length, int delay, int speed, int volume)
{
   int i;
    for (i=0; i<MAX_SAMPLES; i++) {
        if (this->samples[i].sample == NULL) {
            this->samples[i].sample = (short *)sample;
9d002a94:	00832021 	addu	a0,a0,v1
9d002a98:	ac850000 	sw	a1,0(a0)
            this->samples[i].len = length;
            this->samples[i].delay = delay;
            this->samples[i].pos = 0;
            this->samples[i].speed = speed;
9d002a9c:	ac820010 	sw	v0,16(a0)
            this->samples[i].spos = 0;
            this->samples[i].volume = volume;
9d002aa0:	240200ff 	li	v0,255
{
   int i;
    for (i=0; i<MAX_SAMPLES; i++) {
        if (this->samples[i].sample == NULL) {
            this->samples[i].sample = (short *)sample;
            this->samples[i].len = length;
9d002aa4:	ac860004 	sw	a2,4(a0)
            this->samples[i].delay = delay;
9d002aa8:	ac870008 	sw	a3,8(a0)
            this->samples[i].pos = 0;
9d002aac:	ac80000c 	sw	zero,12(a0)
            this->samples[i].speed = speed;
            this->samples[i].spos = 0;
9d002ab0:	ac800014 	sw	zero,20(a0)
            this->samples[i].volume = volume;
9d002ab4:	03e00008 	jr	ra
9d002ab8:	ac820018 	sw	v0,24(a0)
9d002abc:	03e00008 	jr	ra
9d002ac0:	00000000 	nop

9d002ac4 <_ZN8PWMAudio17queueSingleSampleEPKsiii>:
    for (i=0; i<MAX_SAMPLES; i++) {
        if (this->samples[i].sample == sample) {
            found = 1;
        }
    }
    if (found == 0) {
9d002ac4:	00806021 	move	t4,a0
        }
    }
}

void PWMAudio::queueSingleSample(const short *sample, int length, int delay, int speed)
{
9d002ac8:	00801821 	move	v1,a0
}

void PWMAudio::queueSingleSample(const short *sample, int length, int delay, int speed, int volume)
{
    int i;
    int found = 0;
9d002acc:	00004021 	move	t0,zero
    for (i=0; i<MAX_SAMPLES; i++) {
9d002ad0:	00001021 	move	v0,zero
        if (this->samples[i].sample == sample) {
            found = 1;
9d002ad4:	240b0001 	li	t3,1

void PWMAudio::queueSingleSample(const short *sample, int length, int delay, int speed, int volume)
{
    int i;
    int found = 0;
    for (i=0; i<MAX_SAMPLES; i++) {
9d002ad8:	240a001c 	li	t2,28
        if (this->samples[i].sample == sample) {
9d002adc:	8c690000 	lw	t1,0(v1)

void PWMAudio::queueSingleSample(const short *sample, int length, int delay, int speed, int volume)
{
    int i;
    int found = 0;
    for (i=0; i<MAX_SAMPLES; i++) {
9d002ae0:	24420001 	addiu	v0,v0,1
9d002ae4:	2463001c 	addiu	v1,v1,28
        if (this->samples[i].sample == sample) {
            found = 1;
9d002ae8:	00a94826 	xor	t1,a1,t1

void PWMAudio::queueSingleSample(const short *sample, int length, int delay, int speed, int volume)
{
    int i;
    int found = 0;
    for (i=0; i<MAX_SAMPLES; i++) {
9d002aec:	144afffb 	bne	v0,t2,9d002adc <_ZN8PWMAudio17queueSingleSampleEPKsiii+0x18>
9d002af0:	0169400a 	movz	t0,t3,t1
        if (this->samples[i].sample == sample) {
            found = 1;
        }
    }
    if (found == 0) {
9d002af4:	15000018 	bnez	t0,9d002b58 <_ZN8PWMAudio17queueSingleSampleEPKsiii+0x94>
9d002af8:	00000000 	nop
9d002afc:	00001021 	move	v0,zero
}

void PWMAudio::queueSample(const short *sample, int length, int delay, int speed, int volume)
{
   int i;
    for (i=0; i<MAX_SAMPLES; i++) {
9d002b00:	0b400ac5 	j	9d002b14 <_ZN8PWMAudio17queueSingleSampleEPKsiii+0x50>
9d002b04:	2408001c 	li	t0,28
9d002b08:	24420001 	addiu	v0,v0,1
9d002b0c:	10480012 	beq	v0,t0,9d002b58 <_ZN8PWMAudio17queueSingleSampleEPKsiii+0x94>
9d002b10:	00000000 	nop
        if (this->samples[i].sample == NULL) {
9d002b14:	8d830000 	lw	v1,0(t4)
9d002b18:	1460fffb 	bnez	v1,9d002b08 <_ZN8PWMAudio17queueSingleSampleEPKsiii+0x44>
9d002b1c:	258c001c 	addiu	t4,t4,28
            this->samples[i].sample = (short *)sample;
9d002b20:	00021880 	sll	v1,v0,0x2
9d002b24:	00021140 	sll	v0,v0,0x5
9d002b28:	00431023 	subu	v0,v0,v1
9d002b2c:	00822021 	addu	a0,a0,v0
            this->samples[i].len = length;
            this->samples[i].delay = delay;
            this->samples[i].pos = 0;
            this->samples[i].speed = speed;
9d002b30:	8fa20010 	lw	v0,16(sp)
void PWMAudio::queueSample(const short *sample, int length, int delay, int speed, int volume)
{
   int i;
    for (i=0; i<MAX_SAMPLES; i++) {
        if (this->samples[i].sample == NULL) {
            this->samples[i].sample = (short *)sample;
9d002b34:	ac850000 	sw	a1,0(a0)
            this->samples[i].len = length;
9d002b38:	ac860004 	sw	a2,4(a0)
            this->samples[i].delay = delay;
            this->samples[i].pos = 0;
            this->samples[i].speed = speed;
9d002b3c:	ac820010 	sw	v0,16(a0)
            this->samples[i].spos = 0;
            this->samples[i].volume = volume;
9d002b40:	240200ff 	li	v0,255
   int i;
    for (i=0; i<MAX_SAMPLES; i++) {
        if (this->samples[i].sample == NULL) {
            this->samples[i].sample = (short *)sample;
            this->samples[i].len = length;
            this->samples[i].delay = delay;
9d002b44:	ac870008 	sw	a3,8(a0)
            this->samples[i].pos = 0;
9d002b48:	ac80000c 	sw	zero,12(a0)
            this->samples[i].speed = speed;
            this->samples[i].spos = 0;
9d002b4c:	ac800014 	sw	zero,20(a0)
            this->samples[i].volume = volume;
9d002b50:	03e00008 	jr	ra
9d002b54:	ac820018 	sw	v0,24(a0)
9d002b58:	03e00008 	jr	ra
9d002b5c:	00000000 	nop

9d002b60 <_ZN8PWMAudio3mixEii>:

int PWMAudio::mix(int a, int b)
{
    int z;
    unsigned int fa, fb, fz;
    fa = a + 32768;
9d002b60:	34028000 	li	v0,0x8000
9d002b64:	00a22821 	addu	a1,a1,v0
    fb = b + 32768;

    if (fa < 32768 && fb < 32768) {
9d002b68:	00a2182b 	sltu	v1,a1,v0
9d002b6c:	10600004 	beqz	v1,9d002b80 <_ZN8PWMAudio3mixEii+0x20>
9d002b70:	00c23021 	addu	a2,a2,v0
9d002b74:	00c2102b 	sltu	v0,a2,v0
9d002b78:	5440000a 	bnezl	v0,9d002ba4 <_ZN8PWMAudio3mixEii+0x44>
9d002b7c:	70c52802 	mul	a1,a2,a1
        fz = (fa * fb) / 32768;
    } else {
        fz = (2 * (fa + fb)) - ((fa * fb) / 32768) - 65536;
9d002b80:	70c51802 	mul	v1,a2,a1
9d002b84:	00c51021 	addu	v0,a2,a1
9d002b88:	3c04ffff 	lui	a0,0xffff
9d002b8c:	00021040 	sll	v0,v0,0x1
9d002b90:	00441021 	addu	v0,v0,a0
9d002b94:	00031bc2 	srl	v1,v1,0xf
9d002b98:	00431023 	subu	v0,v0,v1
    }

    z = fz - 32768;
    return z;
}
9d002b9c:	03e00008 	jr	ra
9d002ba0:	24428000 	addiu	v0,v0,-32768
    unsigned int fa, fb, fz;
    fa = a + 32768;
    fb = b + 32768;

    if (fa < 32768 && fb < 32768) {
        fz = (fa * fb) / 32768;
9d002ba4:	000513c2 	srl	v0,a1,0xf
        fz = (2 * (fa + fb)) - ((fa * fb) / 32768) - 65536;
    }

    z = fz - 32768;
    return z;
}
9d002ba8:	03e00008 	jr	ra
9d002bac:	24428000 	addiu	v0,v0,-32768

9d002bb0 <_ZN8PWMAudio13generateAudioEv>:

	internalPWMAudioPointer = this;
}

void PWMAudio::generateAudio()
{
9d002bb0:	27bdffd0 	addiu	sp,sp,-48
9d002bb4:	afb10018 	sw	s1,24(sp)
            } else {
                channelsPlaying++;
                temp = s->sample[s->pos];
                if (s->volume < 255) {
                    temp = temp * s->volume;
                    temp = temp / 255;
9d002bb8:	3c118080 	lui	s1,0x8080

	internalPWMAudioPointer = this;
}

void PWMAudio::generateAudio()
{
9d002bbc:	afb50028 	sw	s5,40(sp)
9d002bc0:	afb30020 	sw	s3,32(sp)
9d002bc4:	afb2001c 	sw	s2,28(sp)
9d002bc8:	afb00014 	sw	s0,20(sp)
9d002bcc:	afbf002c 	sw	ra,44(sp)
9d002bd0:	afb40024 	sw	s4,36(sp)
9d002bd4:	00808021 	move	s0,a0
    }
    if (channelsPlaying > 0) {
        if (val < -32768) {
            val = -32768;
        }
        if (val > 32767) {
9d002bd8:	00809021 	move	s2,a0
    }

	internalPWMAudioPointer = this;
}

void PWMAudio::generateAudio()
9d002bdc:	24930310 	addiu	s3,a0,784
{
    register int val = 0;
    register int temp;
    register int i;
    register struct sample *s;
    unsigned char channelsPlaying = 0;
9d002be0:	0000a821 	move	s5,zero
	internalPWMAudioPointer = this;
}

void PWMAudio::generateAudio()
{
    register int val = 0;
9d002be4:	00001021 	move	v0,zero
            } else {
                channelsPlaying++;
                temp = s->sample[s->pos];
                if (s->volume < 255) {
                    temp = temp * s->volume;
                    temp = temp / 255;
9d002be8:	0b400b00 	j	9d002c00 <_ZN8PWMAudio13generateAudioEv+0x50>
9d002bec:	36318081 	ori	s1,s1,0x8081

    for (i=0; i<MAX_SAMPLES; i++) {
        s = &(this->samples[i]);
        if (s->sample != NULL) {
            if (s->delay > 0) {
                s->delay--;
9d002bf0:	ae430008 	sw	v1,8(s2)
                    s->pos--;
                    s->spos = 0;
                }

                if (s->pos >= s->len) {
                    s->sample = NULL;
9d002bf4:	2652001c 	addiu	s2,s2,28
    register int i;
    register struct sample *s;
    unsigned char channelsPlaying = 0;
    static unsigned long shutOff = 0;

    for (i=0; i<MAX_SAMPLES; i++) {
9d002bf8:	1253002e 	beq	s2,s3,9d002cb4 <_ZN8PWMAudio13generateAudioEv+0x104>
9d002bfc:	00000000 	nop
        s = &(this->samples[i]);
        if (s->sample != NULL) {
9d002c00:	8e440000 	lw	a0,0(s2)
9d002c04:	5080fffc 	beqzl	a0,9d002bf8 <_ZN8PWMAudio13generateAudioEv+0x48>
9d002c08:	2652001c 	addiu	s2,s2,28
            if (s->delay > 0) {
9d002c0c:	8e430008 	lw	v1,8(s2)
9d002c10:	1c60fff7 	bgtz	v1,9d002bf0 <_ZN8PWMAudio13generateAudioEv+0x40>
9d002c14:	2463ffff 	addiu	v1,v1,-1
                s->delay--;
            } else {
                channelsPlaying++;
                temp = s->sample[s->pos];
9d002c18:	8e54000c 	lw	s4,12(s2)
                if (s->volume < 255) {
9d002c1c:	8e430018 	lw	v1,24(s2)
        s = &(this->samples[i]);
        if (s->sample != NULL) {
            if (s->delay > 0) {
                s->delay--;
            } else {
                channelsPlaying++;
9d002c20:	26b50001 	addiu	s5,s5,1
                temp = s->sample[s->pos];
9d002c24:	00142840 	sll	a1,s4,0x1
9d002c28:	00852021 	addu	a0,a0,a1
                if (s->volume < 255) {
9d002c2c:	286500ff 	slti	a1,v1,255
        s = &(this->samples[i]);
        if (s->sample != NULL) {
            if (s->delay > 0) {
                s->delay--;
            } else {
                channelsPlaying++;
9d002c30:	32b500ff 	andi	s5,s5,0xff
                temp = s->sample[s->pos];
                if (s->volume < 255) {
9d002c34:	10a00008 	beqz	a1,9d002c58 <_ZN8PWMAudio13generateAudioEv+0xa8>
9d002c38:	84860000 	lh	a2,0(a0)
                    temp = temp * s->volume;
9d002c3c:	70c31802 	mul	v1,a2,v1
                    temp = temp / 255;
9d002c40:	00710018 	mult	v1,s1
9d002c44:	000327c3 	sra	a0,v1,0x1f
9d002c48:	00003010 	mfhi	a2
9d002c4c:	00c33021 	addu	a2,a2,v1
9d002c50:	000631c3 	sra	a2,a2,0x7
9d002c54:	00c43023 	subu	a2,a2,a0
                }
                val = mix(val, temp);
9d002c58:	02002021 	move	a0,s0
9d002c5c:	0f400ad8 	jal	9d002b60 <_ZN8PWMAudio3mixEii>
9d002c60:	00402821 	move	a1,v0
                s->pos++;

                s->spos += s->speed;
9d002c64:	8e430014 	lw	v1,20(s2)
9d002c68:	8e440010 	lw	a0,16(s2)
                if (s->volume < 255) {
                    temp = temp * s->volume;
                    temp = temp / 255;
                }
                val = mix(val, temp);
                s->pos++;
9d002c6c:	26850001 	addiu	a1,s4,1
9d002c70:	ae45000c 	sw	a1,12(s2)

                s->spos += s->speed;
9d002c74:	00831821 	addu	v1,a0,v1
                if (s->spos > 100) {
9d002c78:	28640065 	slti	a0,v1,101
9d002c7c:	14800026 	bnez	a0,9d002d18 <_ZN8PWMAudio13generateAudioEv+0x168>
9d002c80:	ae430014 	sw	v1,20(s2)
                    s->pos++;
9d002c84:	26940002 	addiu	s4,s4,2
9d002c88:	ae54000c 	sw	s4,12(s2)
                    s->spos = 0;
9d002c8c:	ae400014 	sw	zero,20(s2)
                if (s->spos < -100) {
                    s->pos--;
                    s->spos = 0;
                }
                if (s->pos >= s->len) {
9d002c90:	8e44000c 	lw	a0,12(s2)
9d002c94:	8e430004 	lw	v1,4(s2)
9d002c98:	0083182a 	slt	v1,a0,v1
9d002c9c:	5460ffd6 	bnezl	v1,9d002bf8 <_ZN8PWMAudio13generateAudioEv+0x48>
9d002ca0:	2652001c 	addiu	s2,s2,28
                    s->sample = NULL;
9d002ca4:	ae400000 	sw	zero,0(s2)
9d002ca8:	2652001c 	addiu	s2,s2,28
    register int i;
    register struct sample *s;
    unsigned char channelsPlaying = 0;
    static unsigned long shutOff = 0;

    for (i=0; i<MAX_SAMPLES; i++) {
9d002cac:	5653ffd5 	bnel	s2,s3,9d002c04 <_ZN8PWMAudio13generateAudioEv+0x54>
9d002cb0:	8e440000 	lw	a0,0(s2)
                    s->sample = NULL;
                }
            }
        }
    }
    if (channelsPlaying > 0) {
9d002cb4:	52a0001e 	beqzl	s5,9d002d30 <_ZN8PWMAudio13generateAudioEv+0x180>
9d002cb8:	8f82805c 	lw	v0,-32676(gp)
        if (val < -32768) {
9d002cbc:	28438000 	slti	v1,v0,-32768
9d002cc0:	54600026 	bnezl	v1,9d002d5c <_ZN8PWMAudio13generateAudioEv+0x1ac>
9d002cc4:	24028000 	li	v0,-32768
            val = -32768;
        }
        if (val > 32767) {
9d002cc8:	34038000 	li	v1,0x8000
9d002ccc:	0043182a 	slt	v1,v0,v1
9d002cd0:	14600022 	bnez	v1,9d002d5c <_ZN8PWMAudio13generateAudioEv+0x1ac>
9d002cd4:	24050fff 	li	a1,4095
            val = 32767;
        }

        val = val + 32768;
        val = val >> (16 - AUDIO_LOG2);
        switch (digital_pin_to_timer_PGM[this->audioPin]) {
9d002cd8:	92040310 	lbu	a0,784(s0)
9d002cdc:	3c039d03 	lui	v1,0x9d03
9d002ce0:	2463bd34 	addiu	v1,v1,-17100
9d002ce4:	00042040 	sll	a0,a0,0x1
9d002ce8:	00831821 	addu	v1,a0,v1
9d002cec:	94630000 	lhu	v1,0(v1)
9d002cf0:	2c640006 	sltiu	a0,v1,6
9d002cf4:	10800024 	beqz	a0,9d002d88 <_ZN8PWMAudio13generateAudioEv+0x1d8>
9d002cf8:	00000000 	nop
9d002cfc:	3c029d03 	lui	v0,0x9d03
9d002d00:	2442bc14 	addiu	v0,v0,-17388
9d002d04:	00031880 	sll	v1,v1,0x2
9d002d08:	00431821 	addu	v1,v0,v1
9d002d0c:	8c620000 	lw	v0,0(v1)
9d002d10:	00400008 	jr	v0
9d002d14:	00000000 	nop
                s->spos += s->speed;
                if (s->spos > 100) {
                    s->pos++;
                    s->spos = 0;
                }
                if (s->spos < -100) {
9d002d18:	2863ff9c 	slti	v1,v1,-100
9d002d1c:	5060ffdd 	beqzl	v1,9d002c94 <_ZN8PWMAudio13generateAudioEv+0xe4>
9d002d20:	8e44000c 	lw	a0,12(s2)
                    s->pos--;
9d002d24:	ae54000c 	sw	s4,12(s2)
                    s->spos = 0;
9d002d28:	0b400b24 	j	9d002c90 <_ZN8PWMAudio13generateAudioEv+0xe0>
9d002d2c:	ae400014 	sw	zero,20(s2)

        this->ampOn();
        shutOff = 10;
    }

    if (shutOff > 0) {
9d002d30:	54400022 	bnezl	v0,9d002dbc <_ZN8PWMAudio13generateAudioEv+0x20c>
9d002d34:	2442ffff 	addiu	v0,v0,-1
            this->ampOff();
        }
    }


}
9d002d38:	8fbf002c 	lw	ra,44(sp)
9d002d3c:	8fb50028 	lw	s5,40(sp)
9d002d40:	8fb40024 	lw	s4,36(sp)
9d002d44:	8fb30020 	lw	s3,32(sp)
9d002d48:	8fb2001c 	lw	s2,28(sp)
9d002d4c:	8fb10018 	lw	s1,24(sp)
9d002d50:	8fb00014 	lw	s0,20(sp)
9d002d54:	03e00008 	jr	ra
9d002d58:	27bd0030 	addiu	sp,sp,48
            val = 32767;
        }

        val = val + 32768;
        val = val >> (16 - AUDIO_LOG2);
        switch (digital_pin_to_timer_PGM[this->audioPin]) {
9d002d5c:	92040310 	lbu	a0,784(s0)
9d002d60:	3c039d03 	lui	v1,0x9d03
9d002d64:	2463bd34 	addiu	v1,v1,-17100
9d002d68:	00042040 	sll	a0,a0,0x1
9d002d6c:	00831821 	addu	v1,a0,v1
9d002d70:	94630000 	lhu	v1,0(v1)
    }
    if (channelsPlaying > 0) {
        if (val < -32768) {
            val = -32768;
        }
        if (val > 32767) {
9d002d74:	34058000 	li	a1,0x8000
9d002d78:	00451021 	addu	v0,v0,a1
            val = 32767;
        }

        val = val + 32768;
        val = val >> (16 - AUDIO_LOG2);
        switch (digital_pin_to_timer_PGM[this->audioPin]) {
9d002d7c:	2c640006 	sltiu	a0,v1,6
9d002d80:	1480ffde 	bnez	a0,9d002cfc <_ZN8PWMAudio13generateAudioEv+0x14c>
9d002d84:	00022903 	sra	a1,v0,0x4
            case _TIMER_OC5:
                OC5RS = val;
                break;
        }

        this->ampOn();
9d002d88:	0f4009e7 	jal	9d00279c <_ZN8PWMAudio5ampOnEv>
9d002d8c:	02002021 	move	a0,s0
            this->ampOff();
        }
    }

}
9d002d90:	8fbf002c 	lw	ra,44(sp)
        this->ampOn();
        shutOff = 10;
    }

    if (shutOff > 0) {
        shutOff --;
9d002d94:	24020009 	li	v0,9
            this->ampOff();
        }
    }


}
9d002d98:	8fb50028 	lw	s5,40(sp)
9d002d9c:	8fb40024 	lw	s4,36(sp)
9d002da0:	8fb30020 	lw	s3,32(sp)
9d002da4:	8fb2001c 	lw	s2,28(sp)
9d002da8:	8fb10018 	lw	s1,24(sp)
9d002dac:	8fb00014 	lw	s0,20(sp)
        this->ampOn();
        shutOff = 10;
    }

    if (shutOff > 0) {
        shutOff --;
9d002db0:	af82805c 	sw	v0,-32676(gp)
            this->ampOff();
        }
    }


}
9d002db4:	03e00008 	jr	ra
9d002db8:	27bd0030 	addiu	sp,sp,48
        shutOff = 10;
    }

    if (shutOff > 0) {
        shutOff --;
        if (shutOff == 0) {
9d002dbc:	1440ffde 	bnez	v0,9d002d38 <_ZN8PWMAudio13generateAudioEv+0x188>
9d002dc0:	af82805c 	sw	v0,-32676(gp)
            this->ampOff();
9d002dc4:	02002021 	move	a0,s0
        }
    }


}
9d002dc8:	8fbf002c 	lw	ra,44(sp)
9d002dcc:	8fb50028 	lw	s5,40(sp)
9d002dd0:	8fb40024 	lw	s4,36(sp)
9d002dd4:	8fb30020 	lw	s3,32(sp)
9d002dd8:	8fb2001c 	lw	s2,28(sp)
9d002ddc:	8fb10018 	lw	s1,24(sp)
9d002de0:	8fb00014 	lw	s0,20(sp)
    }

    if (shutOff > 0) {
        shutOff --;
        if (shutOff == 0) {
            this->ampOff();
9d002de4:	0b4009f1 	j	9d0027c4 <_ZN8PWMAudio6ampOffEv>
9d002de8:	27bd0030 	addiu	sp,sp,48
                break;
            case _TIMER_OC4:
                OC4RS = val;
                break;
            case _TIMER_OC5:
                OC5RS = val;
9d002dec:	3c02bf80 	lui	v0,0xbf80
9d002df0:	ac453820 	sw	a1,14368(v0)
                break;
9d002df4:	0b400b62 	j	9d002d88 <_ZN8PWMAudio13generateAudioEv+0x1d8>
9d002df8:	00000000 	nop
                break;
            case _TIMER_OC3:
                OC3RS = val;
                break;
            case _TIMER_OC4:
                OC4RS = val;
9d002dfc:	3c02bf80 	lui	v0,0xbf80
9d002e00:	ac453620 	sw	a1,13856(v0)
                break;
9d002e04:	0b400b62 	j	9d002d88 <_ZN8PWMAudio13generateAudioEv+0x1d8>
9d002e08:	00000000 	nop
                break;
            case _TIMER_OC2:
                OC2RS = val;
                break;
            case _TIMER_OC3:
                OC3RS = val;
9d002e0c:	3c02bf80 	lui	v0,0xbf80
9d002e10:	ac453420 	sw	a1,13344(v0)
                break;
9d002e14:	0b400b62 	j	9d002d88 <_ZN8PWMAudio13generateAudioEv+0x1d8>
9d002e18:	00000000 	nop
        switch (digital_pin_to_timer_PGM[this->audioPin]) {
            case _TIMER_OC1:
                OC1RS = val;
                break;
            case _TIMER_OC2:
                OC2RS = val;
9d002e1c:	3c02bf80 	lui	v0,0xbf80
9d002e20:	ac453220 	sw	a1,12832(v0)
                break;
9d002e24:	0b400b62 	j	9d002d88 <_ZN8PWMAudio13generateAudioEv+0x1d8>
9d002e28:	00000000 	nop

        val = val + 32768;
        val = val >> (16 - AUDIO_LOG2);
        switch (digital_pin_to_timer_PGM[this->audioPin]) {
            case _TIMER_OC1:
                OC1RS = val;
9d002e2c:	3c02bf80 	lui	v0,0xbf80
9d002e30:	ac453020 	sw	a1,12320(v0)
                break;
9d002e34:	0b400b62 	j	9d002d88 <_ZN8PWMAudio13generateAudioEv+0x1d8>
9d002e38:	00000000 	nop

9d002e3c <_T4Interrupt>:
}


extern "C" {
    void __ISR(_TIMER_4_VECTOR, IPL5) _T4Interrupt(void)
    {
9d002e3c:	415de800 	rdpgpr	sp,sp
9d002e40:	401a7000 	mfc0	k0,c0_epc
9d002e44:	401b6000 	mfc0	k1,c0_status
9d002e48:	27bdff98 	addiu	sp,sp,-104
9d002e4c:	afbb0060 	sw	k1,96(sp)
9d002e50:	7c1b7844 	ins	k1,zero,0x1,0xf
9d002e54:	377b1400 	ori	k1,k1,0x1400
9d002e58:	afba0064 	sw	k0,100(sp)
9d002e5c:	409b6000 	mtc0	k1,c0_status
9d002e60:	afbf0054 	sw	ra,84(sp)
9d002e64:	afb90050 	sw	t9,80(sp)
9d002e68:	afb8004c 	sw	t8,76(sp)
9d002e6c:	afaf0048 	sw	t7,72(sp)
9d002e70:	afae0044 	sw	t6,68(sp)
9d002e74:	afad0040 	sw	t5,64(sp)
9d002e78:	afac003c 	sw	t4,60(sp)
9d002e7c:	afab0038 	sw	t3,56(sp)
9d002e80:	afaa0034 	sw	t2,52(sp)
9d002e84:	afa90030 	sw	t1,48(sp)
9d002e88:	afa8002c 	sw	t0,44(sp)
9d002e8c:	afa70028 	sw	a3,40(sp)
9d002e90:	afa60024 	sw	a2,36(sp)
9d002e94:	afa50020 	sw	a1,32(sp)
9d002e98:	afa4001c 	sw	a0,28(sp)
9d002e9c:	afa30018 	sw	v1,24(sp)
9d002ea0:	afa20014 	sw	v0,20(sp)
9d002ea4:	afa10010 	sw	at,16(sp)
9d002ea8:	00001012 	mflo	v0
        if (internalPWMAudioPointer) {
9d002eac:	8f848058 	lw	a0,-32680(gp)
}


extern "C" {
    void __ISR(_TIMER_4_VECTOR, IPL5) _T4Interrupt(void)
    {
9d002eb0:	afa2005c 	sw	v0,92(sp)
9d002eb4:	00001810 	mfhi	v1
        if (internalPWMAudioPointer) {
9d002eb8:	10800003 	beqz	a0,9d002ec8 <_T4Interrupt+0x8c>
9d002ebc:	afa30058 	sw	v1,88(sp)
            internalPWMAudioPointer->generateAudio();
9d002ec0:	0f400aec 	jal	9d002bb0 <_ZN8PWMAudio13generateAudioEv>
9d002ec4:	00000000 	nop
        }
        IFS0bits.T4IF = 0;
9d002ec8:	3c02bf88 	lui	v0,0xbf88
9d002ecc:	8c431030 	lw	v1,4144(v0)
9d002ed0:	7c038404 	ins	v1,zero,0x10,0x1
9d002ed4:	ac431030 	sw	v1,4144(v0)
    }
9d002ed8:	8fa2005c 	lw	v0,92(sp)
9d002edc:	8fa30058 	lw	v1,88(sp)
9d002ee0:	8fbf0054 	lw	ra,84(sp)
9d002ee4:	00400013 	mtlo	v0
9d002ee8:	8fb90050 	lw	t9,80(sp)
9d002eec:	8fb8004c 	lw	t8,76(sp)
9d002ef0:	8faf0048 	lw	t7,72(sp)
9d002ef4:	00600011 	mthi	v1
9d002ef8:	8fae0044 	lw	t6,68(sp)
9d002efc:	8fad0040 	lw	t5,64(sp)
9d002f00:	8fac003c 	lw	t4,60(sp)
9d002f04:	8fab0038 	lw	t3,56(sp)
9d002f08:	8faa0034 	lw	t2,52(sp)
9d002f0c:	8fa90030 	lw	t1,48(sp)
9d002f10:	8fa8002c 	lw	t0,44(sp)
9d002f14:	8fa70028 	lw	a3,40(sp)
9d002f18:	8fa60024 	lw	a2,36(sp)
9d002f1c:	8fa50020 	lw	a1,32(sp)
9d002f20:	8fa4001c 	lw	a0,28(sp)
9d002f24:	8fa30018 	lw	v1,24(sp)
9d002f28:	8fa20014 	lw	v0,20(sp)
9d002f2c:	8fa10010 	lw	at,16(sp)
9d002f30:	41606000 	di
9d002f34:	000000c0 	ehb
9d002f38:	8fba0064 	lw	k0,100(sp)
9d002f3c:	8fbb0060 	lw	k1,96(sp)
9d002f40:	409a7000 	mtc0	k0,c0_epc
9d002f44:	27bd0068 	addiu	sp,sp,104
9d002f48:	41dde800 	wrpgpr	sp,sp
9d002f4c:	409b6000 	mtc0	k1,c0_status
9d002f50:	42000018 	eret

9d002f54 <_ZN6LEDMux5writeEh>:
        digitalWrite(this->cathodes[this->digit], HIGH);
    }
}

void LEDMux::write(uint8_t c)
{
9d002f54:	30a500ff 	andi	a1,a1,0xff
    int i;
    switch(c) {
9d002f58:	2402000a 	li	v0,10
9d002f5c:	10a20010 	beq	a1,v0,9d002fa0 <_ZN6LEDMux5writeEh+0x4c>
9d002f60:	2402000d 	li	v0,13
9d002f64:	10a2001b 	beq	a1,v0,9d002fd4 <_ZN6LEDMux5writeEh+0x80>
9d002f68:	7c052c20 	seb	a1,a1
                this->buffer[i] = ' ';
            }
            this->cpos = 0;
            break;
        default:
            this->buffer[this->cpos] = c;
9d002f6c:	90820020 	lbu	v0,32(a0)
9d002f70:	00821821 	addu	v1,a0,v0
9d002f74:	a0650028 	sb	a1,40(v1)
            this->cpos++;
            if (this->cpos >= this->nCathodes) {
9d002f78:	90830006 	lbu	v1,6(a0)
            }
            this->cpos = 0;
            break;
        default:
            this->buffer[this->cpos] = c;
            this->cpos++;
9d002f7c:	24420001 	addiu	v0,v0,1
9d002f80:	304200ff 	andi	v0,v0,0xff
            if (this->cpos >= this->nCathodes) {
9d002f84:	306300ff 	andi	v1,v1,0xff
9d002f88:	0043182b 	sltu	v1,v0,v1
9d002f8c:	14600002 	bnez	v1,9d002f98 <_ZN6LEDMux5writeEh+0x44>
9d002f90:	a0820020 	sb	v0,32(a0)
                cpos = 0;
9d002f94:	a0800020 	sb	zero,32(a0)
9d002f98:	03e00008 	jr	ra
9d002f9c:	00000000 	nop
    switch(c) {
        case '\r':
            this->cpos = 0;
            break;
        case '\n':
            for (i=0; i<this->nCathodes; i++) {
9d002fa0:	90830006 	lbu	v1,6(a0)
9d002fa4:	00001021 	move	v0,zero
9d002fa8:	306300ff 	andi	v1,v1,0xff
9d002fac:	10600009 	beqz	v1,9d002fd4 <_ZN6LEDMux5writeEh+0x80>
9d002fb0:	24050020 	li	a1,32
                this->buffer[i] = ' ';
9d002fb4:	00821821 	addu	v1,a0,v0
9d002fb8:	a0650028 	sb	a1,40(v1)
    switch(c) {
        case '\r':
            this->cpos = 0;
            break;
        case '\n':
            for (i=0; i<this->nCathodes; i++) {
9d002fbc:	90830006 	lbu	v1,6(a0)
9d002fc0:	24420001 	addiu	v0,v0,1
9d002fc4:	306300ff 	andi	v1,v1,0xff
9d002fc8:	0043182a 	slt	v1,v0,v1
9d002fcc:	1460fffa 	bnez	v1,9d002fb8 <_ZN6LEDMux5writeEh+0x64>
9d002fd0:	00821821 	addu	v1,a0,v0
                this->buffer[i] = ' ';
            }
            this->cpos = 0;
            break;
9d002fd4:	03e00008 	jr	ra
9d002fd8:	a0800020 	sb	zero,32(a0)

9d002fdc <_ZN6LEDMux5writeEPci>:
            break;
    }
}

void LEDMux::write(char *s, int c)
{
9d002fdc:	27bdffd8 	addiu	sp,sp,-40
9d002fe0:	afb30020 	sw	s3,32(sp)
9d002fe4:	afb10018 	sw	s1,24(sp)
9d002fe8:	afb00014 	sw	s0,20(sp)
9d002fec:	afbf0024 	sw	ra,36(sp)
9d002ff0:	afb2001c 	sw	s2,28(sp)
9d002ff4:	00c08021 	move	s0,a2
9d002ff8:	00809821 	move	s3,a0
    int i;
    for (i=0; i<c; i++) {
9d002ffc:	18c0000c 	blez	a2,9d003030 <_ZN6LEDMux5writeEPci+0x54>
9d003000:	00a08821 	move	s1,a1
9d003004:	00009021 	move	s2,zero
        this->write(s[i]);
9d003008:	8e620000 	lw	v0,0(s3)
            }
            break;
    }
}

void LEDMux::write(char *s, int c)
9d00300c:	02321821 	addu	v1,s1,s2
{
    int i;
    for (i=0; i<c; i++) {
        this->write(s[i]);
9d003010:	90650000 	lbu	a1,0(v1)
9d003014:	8c420000 	lw	v0,0(v0)
9d003018:	02602021 	move	a0,s3
9d00301c:	0040f809 	jalr	v0
9d003020:	26520001 	addiu	s2,s2,1
}

void LEDMux::write(char *s, int c)
{
    int i;
    for (i=0; i<c; i++) {
9d003024:	0250102a 	slt	v0,s2,s0
9d003028:	5440fff8 	bnezl	v0,9d00300c <_ZN6LEDMux5writeEPci+0x30>
9d00302c:	8e620000 	lw	v0,0(s3)
        this->write(s[i]);
    }
}
9d003030:	8fbf0024 	lw	ra,36(sp)
9d003034:	8fb30020 	lw	s3,32(sp)
9d003038:	8fb2001c 	lw	s2,28(sp)
9d00303c:	8fb10018 	lw	s1,24(sp)
9d003040:	8fb00014 	lw	s0,20(sp)
9d003044:	03e00008 	jr	ra
9d003048:	27bd0028 	addiu	sp,sp,40

9d00304c <_ZN6LEDMuxC1Ehhj>:
    }

    this->delay = UPDATE_TIME;
}

LEDMux::LEDMux (unsigned char a, unsigned char c, unsigned int d)
9d00304c:	3c039d03 	lui	v1,0x9d03
	this->nAnodes = a;
	this->nCathodes = c;
    this->cpos = 0;

    for (i=0; i<8; i++) {
        this->buffer[i] = ' ';
9d003050:	24020020 	li	v0,32
    }

    this->delay = UPDATE_TIME;
}

LEDMux::LEDMux (unsigned char a, unsigned char c, unsigned int d)
9d003054:	30a500ff 	andi	a1,a1,0xff
9d003058:	30c600ff 	andi	a2,a2,0xff
9d00305c:	2463bc38 	addiu	v1,v1,-17352
{
    unsigned char i;
	this->nAnodes = a;
9d003060:	a0850005 	sb	a1,5(a0)
    }

    this->delay = UPDATE_TIME;
}

LEDMux::LEDMux (unsigned char a, unsigned char c, unsigned int d)
9d003064:	ac830000 	sw	v1,0(a0)
{
    unsigned char i;
	this->nAnodes = a;
	this->nCathodes = c;
9d003068:	a0860006 	sb	a2,6(a0)
    this->cpos = 0;
9d00306c:	a0800020 	sb	zero,32(a0)

    for (i=0; i<8; i++) {
        this->buffer[i] = ' ';
9d003070:	a0820028 	sb	v0,40(a0)
    }

    this->delay = d;
9d003074:	ac870024 	sw	a3,36(a0)
	this->nAnodes = a;
	this->nCathodes = c;
    this->cpos = 0;

    for (i=0; i<8; i++) {
        this->buffer[i] = ' ';
9d003078:	a0820029 	sb	v0,41(a0)
9d00307c:	a082002a 	sb	v0,42(a0)
9d003080:	a082002b 	sb	v0,43(a0)
9d003084:	a082002c 	sb	v0,44(a0)
9d003088:	a082002d 	sb	v0,45(a0)
9d00308c:	a082002e 	sb	v0,46(a0)
9d003090:	a082002f 	sb	v0,47(a0)
    }

    this->delay = d;
}
9d003094:	03e00008 	jr	ra
9d003098:	00000000 	nop

9d00309c <_ZN6LEDMux5beginEv>:
	IFS0bits.T4IF = 0;
	IEC0bits.T4IE = 1;
	T4CONbits.TON = 1;
#endif
#if USE_TIMER == 5
	T5CONbits.TCKPS = 0b010; // 1:4
9d00309c:	3c02bf80 	lui	v0,0xbf80
9d0030a0:	8c430e00 	lw	v1,3584(v0)
9d0030a4:	24050002 	li	a1,2
	PR5 = this->delay;
	IPC5bits.T5IP = 6;
9d0030a8:	24070006 	li	a3,6
	IFS0bits.T4IF = 0;
	IEC0bits.T4IE = 1;
	T4CONbits.TON = 1;
#endif
#if USE_TIMER == 5
	T5CONbits.TCKPS = 0b010; // 1:4
9d0030ac:	7ca33104 	ins	v1,a1,0x4,0x3
9d0030b0:	ac430e00 	sw	v1,3584(v0)
	PR5 = this->delay;
9d0030b4:	8c860024 	lw	a2,36(a0)
9d0030b8:	3c05bf80 	lui	a1,0xbf80
	IPC5bits.T5IP = 6;
9d0030bc:	3c03bf88 	lui	v1,0xbf88
	IEC0bits.T4IE = 1;
	T4CONbits.TON = 1;
#endif
#if USE_TIMER == 5
	T5CONbits.TCKPS = 0b010; // 1:4
	PR5 = this->delay;
9d0030c0:	aca60e20 	sw	a2,3616(a1)
	IPC5bits.T5IP = 6;
9d0030c4:	8c6510e0 	lw	a1,4320(v1)
	IFS0bits.T5IF = 0;
9d0030c8:	3c06bf88 	lui	a2,0xbf88
	IEC0bits.T5IE = 1;
	T5CONbits.TON = 1;
#endif

	internalLEDMuxPointer = this;
9d0030cc:	af848060 	sw	a0,-32672(gp)
	T4CONbits.TON = 1;
#endif
#if USE_TIMER == 5
	T5CONbits.TCKPS = 0b010; // 1:4
	PR5 = this->delay;
	IPC5bits.T5IP = 6;
9d0030d0:	7ce52084 	ins	a1,a3,0x2,0x3
9d0030d4:	ac6510e0 	sw	a1,4320(v1)
	IFS0bits.T5IF = 0;
9d0030d8:	8cc71030 	lw	a3,4144(a2)
	IEC0bits.T5IE = 1;
9d0030dc:	3c03bf88 	lui	v1,0xbf88
9d0030e0:	24050001 	li	a1,1
#endif
#if USE_TIMER == 5
	T5CONbits.TCKPS = 0b010; // 1:4
	PR5 = this->delay;
	IPC5bits.T5IP = 6;
	IFS0bits.T5IF = 0;
9d0030e4:	7c07a504 	ins	a3,zero,0x14,0x1
9d0030e8:	acc71030 	sw	a3,4144(a2)
	IEC0bits.T5IE = 1;
9d0030ec:	8c661060 	lw	a2,4192(v1)
9d0030f0:	7ca6a504 	ins	a2,a1,0x14,0x1
9d0030f4:	ac661060 	sw	a2,4192(v1)
	T5CONbits.TON = 1;
9d0030f8:	8c430e00 	lw	v1,3584(v0)
9d0030fc:	7ca37bc4 	ins	v1,a1,0xf,0x1
9d003100:	ac430e00 	sw	v1,3584(v0)
#endif
	internalLEDMuxPointer = this;
}
9d003104:	03e00008 	jr	ra
9d003108:	00000000 	nop

9d00310c <_ZN6LEDMux9setAnodesEhhhhhhhh>:
    pinMode(this->anodes[6], OUTPUT);
    digitalWrite(this->anodes[6], LOW);
}

void LEDMux::setAnodes(unsigned char a0, unsigned char a1, unsigned char a2, unsigned char a3, unsigned char a4, unsigned char a5, unsigned char a6, unsigned char a7)
{
9d00310c:	27bdffe8 	addiu	sp,sp,-24
9d003110:	93aa0028 	lbu	t2,40(sp)
9d003114:	93a9002c 	lbu	t1,44(sp)
9d003118:	93a80030 	lbu	t0,48(sp)
9d00311c:	93a30034 	lbu	v1,52(sp)
9d003120:	93a20038 	lbu	v0,56(sp)
9d003124:	30c600ff 	andi	a2,a2,0xff
9d003128:	30e700ff 	andi	a3,a3,0xff
9d00312c:	30a500ff 	andi	a1,a1,0xff
9d003130:	afbf0014 	sw	ra,20(sp)
9d003134:	afb00010 	sw	s0,16(sp)
    this->anodes[0] = a0;
9d003138:	a0850007 	sb	a1,7(a0)
    this->anodes[1] = a1;
9d00313c:	a0860008 	sb	a2,8(a0)
    this->anodes[2] = a2;
9d003140:	a0870009 	sb	a3,9(a0)
    this->anodes[3] = a3;
9d003144:	a08a000a 	sb	t2,10(a0)
    this->anodes[4] = a4;
9d003148:	a089000b 	sb	t1,11(a0)
    this->anodes[5] = a5;
9d00314c:	a088000c 	sb	t0,12(a0)
    this->anodes[6] = a6;
9d003150:	a083000d 	sb	v1,13(a0)
    this->anodes[7] = a7;
9d003154:	a082000e 	sb	v0,14(a0)
    pinMode(this->anodes[6], OUTPUT);
    digitalWrite(this->anodes[6], LOW);
}

void LEDMux::setAnodes(unsigned char a0, unsigned char a1, unsigned char a2, unsigned char a3, unsigned char a4, unsigned char a5, unsigned char a6, unsigned char a7)
{
9d003158:	00808021 	move	s0,a0
    this->anodes[4] = a4;
    this->anodes[5] = a5;
    this->anodes[6] = a6;
    this->anodes[7] = a7;

    pinMode(this->anodes[0], OUTPUT);
9d00315c:	90840007 	lbu	a0,7(a0)
9d003160:	24050001 	li	a1,1
9d003164:	0f400d9d 	jal	9d003674 <pinMode>
9d003168:	308400ff 	andi	a0,a0,0xff
    digitalWrite(this->anodes[0], LOW);
9d00316c:	92040007 	lbu	a0,7(s0)
9d003170:	00002821 	move	a1,zero
9d003174:	0f400e82 	jal	9d003a08 <digitalWrite>
9d003178:	308400ff 	andi	a0,a0,0xff
    pinMode(this->anodes[1], OUTPUT);
9d00317c:	92040008 	lbu	a0,8(s0)
9d003180:	24050001 	li	a1,1
9d003184:	0f400d9d 	jal	9d003674 <pinMode>
9d003188:	308400ff 	andi	a0,a0,0xff
    digitalWrite(this->anodes[1], LOW);
9d00318c:	92040008 	lbu	a0,8(s0)
9d003190:	00002821 	move	a1,zero
9d003194:	0f400e82 	jal	9d003a08 <digitalWrite>
9d003198:	308400ff 	andi	a0,a0,0xff

    pinMode(this->anodes[2], OUTPUT);
9d00319c:	92040009 	lbu	a0,9(s0)
9d0031a0:	24050001 	li	a1,1
9d0031a4:	0f400d9d 	jal	9d003674 <pinMode>
9d0031a8:	308400ff 	andi	a0,a0,0xff
    digitalWrite(this->anodes[2], LOW);
9d0031ac:	92040009 	lbu	a0,9(s0)
9d0031b0:	00002821 	move	a1,zero
9d0031b4:	0f400e82 	jal	9d003a08 <digitalWrite>
9d0031b8:	308400ff 	andi	a0,a0,0xff

    pinMode(this->anodes[3], OUTPUT);
9d0031bc:	9204000a 	lbu	a0,10(s0)
9d0031c0:	24050001 	li	a1,1
9d0031c4:	0f400d9d 	jal	9d003674 <pinMode>
9d0031c8:	308400ff 	andi	a0,a0,0xff
    digitalWrite(this->anodes[3], LOW);
9d0031cc:	9204000a 	lbu	a0,10(s0)
9d0031d0:	00002821 	move	a1,zero
9d0031d4:	0f400e82 	jal	9d003a08 <digitalWrite>
9d0031d8:	308400ff 	andi	a0,a0,0xff

    pinMode(this->anodes[4], OUTPUT);
9d0031dc:	9204000b 	lbu	a0,11(s0)
9d0031e0:	24050001 	li	a1,1
9d0031e4:	0f400d9d 	jal	9d003674 <pinMode>
9d0031e8:	308400ff 	andi	a0,a0,0xff
    digitalWrite(this->anodes[4], LOW);
9d0031ec:	9204000b 	lbu	a0,11(s0)
9d0031f0:	00002821 	move	a1,zero
9d0031f4:	0f400e82 	jal	9d003a08 <digitalWrite>
9d0031f8:	308400ff 	andi	a0,a0,0xff
    pinMode(this->anodes[5], OUTPUT);
9d0031fc:	9204000c 	lbu	a0,12(s0)
9d003200:	24050001 	li	a1,1
9d003204:	0f400d9d 	jal	9d003674 <pinMode>
9d003208:	308400ff 	andi	a0,a0,0xff
    digitalWrite(this->anodes[5], LOW);
9d00320c:	9204000c 	lbu	a0,12(s0)
9d003210:	00002821 	move	a1,zero
9d003214:	0f400e82 	jal	9d003a08 <digitalWrite>
9d003218:	308400ff 	andi	a0,a0,0xff

    pinMode(this->anodes[6], OUTPUT);
9d00321c:	9204000d 	lbu	a0,13(s0)
9d003220:	24050001 	li	a1,1
9d003224:	0f400d9d 	jal	9d003674 <pinMode>
9d003228:	308400ff 	andi	a0,a0,0xff
    digitalWrite(this->anodes[6], LOW);
9d00322c:	9204000d 	lbu	a0,13(s0)
9d003230:	00002821 	move	a1,zero
9d003234:	0f400e82 	jal	9d003a08 <digitalWrite>
9d003238:	308400ff 	andi	a0,a0,0xff

    pinMode(this->anodes[7], OUTPUT);
9d00323c:	9204000e 	lbu	a0,14(s0)
9d003240:	24050001 	li	a1,1
9d003244:	0f400d9d 	jal	9d003674 <pinMode>
9d003248:	308400ff 	andi	a0,a0,0xff
    digitalWrite(this->anodes[7], LOW);
9d00324c:	9204000e 	lbu	a0,14(s0)
}
9d003250:	8fbf0014 	lw	ra,20(sp)
9d003254:	8fb00010 	lw	s0,16(sp)

    pinMode(this->anodes[6], OUTPUT);
    digitalWrite(this->anodes[6], LOW);

    pinMode(this->anodes[7], OUTPUT);
    digitalWrite(this->anodes[7], LOW);
9d003258:	00002821 	move	a1,zero
9d00325c:	308400ff 	andi	a0,a0,0xff
9d003260:	0b400e82 	j	9d003a08 <digitalWrite>
9d003264:	27bd0018 	addiu	sp,sp,24

9d003268 <_ZN6LEDMux11setCathodesEhh>:
    pinMode(c0, OUTPUT);
    digitalWrite(c0, LOW);
}

void LEDMux::setCathodes(unsigned char c0, unsigned char c1)
{
9d003268:	27bdffe0 	addiu	sp,sp,-32
9d00326c:	afb10018 	sw	s1,24(sp)
9d003270:	afb00014 	sw	s0,20(sp)
9d003274:	30d100ff 	andi	s1,a2,0xff
9d003278:	30b000ff 	andi	s0,a1,0xff
9d00327c:	afbf001c 	sw	ra,28(sp)
    this->cathodes[0] = c0;
    this->cathodes[1] = c1;

    pinMode(c0, OUTPUT);
9d003280:	24050001 	li	a1,1
    digitalWrite(c0, LOW);
}

void LEDMux::setCathodes(unsigned char c0, unsigned char c1)
{
    this->cathodes[0] = c0;
9d003284:	a090000f 	sb	s0,15(a0)
    this->cathodes[1] = c1;
9d003288:	a0910010 	sb	s1,16(a0)

    pinMode(c0, OUTPUT);
9d00328c:	0f400d9d 	jal	9d003674 <pinMode>
9d003290:	02002021 	move	a0,s0
    digitalWrite(c0, LOW);
9d003294:	02002021 	move	a0,s0
9d003298:	0f400e82 	jal	9d003a08 <digitalWrite>
9d00329c:	00002821 	move	a1,zero

    pinMode(c1, OUTPUT);
9d0032a0:	02202021 	move	a0,s1
9d0032a4:	0f400d9d 	jal	9d003674 <pinMode>
9d0032a8:	24050001 	li	a1,1
    digitalWrite(c1, LOW);
9d0032ac:	02202021 	move	a0,s1
}
9d0032b0:	8fbf001c 	lw	ra,28(sp)
9d0032b4:	8fb10018 	lw	s1,24(sp)
9d0032b8:	8fb00014 	lw	s0,20(sp)

    pinMode(c0, OUTPUT);
    digitalWrite(c0, LOW);

    pinMode(c1, OUTPUT);
    digitalWrite(c1, LOW);
9d0032bc:	00002821 	move	a1,zero
9d0032c0:	0b400e82 	j	9d003a08 <digitalWrite>
9d0032c4:	27bd0020 	addiu	sp,sp,32

9d0032c8 <_ZN6LEDMux6updateEv>:
    pinMode(c7, OUTPUT);
    digitalWrite(c7, LOW);
}

void LEDMux::update()
{
9d0032c8:	27bdffe0 	addiu	sp,sp,-32
9d0032cc:	afb10014 	sw	s1,20(sp)
9d0032d0:	afbf001c 	sw	ra,28(sp)
9d0032d4:	afb20018 	sw	s2,24(sp)
9d0032d8:	afb00010 	sw	s0,16(sp)
    unsigned char v;
    unsigned char i;
    unsigned char c;
    static unsigned char b = 0;

    for (i=0; i<this->nAnodes; i++) {
9d0032dc:	90820005 	lbu	v0,5(a0)
9d0032e0:	304200ff 	andi	v0,v0,0xff
9d0032e4:	1040000e 	beqz	v0,9d003320 <_ZN6LEDMux6updateEv+0x58>
9d0032e8:	00808821 	move	s1,a0
9d0032ec:	00008021 	move	s0,zero
		digitalWrite(this->anodes[i], 0);
9d0032f0:	02301021 	addu	v0,s1,s0
9d0032f4:	90440007 	lbu	a0,7(v0)
9d0032f8:	00002821 	move	a1,zero
    unsigned char v;
    unsigned char i;
    unsigned char c;
    static unsigned char b = 0;

    for (i=0; i<this->nAnodes; i++) {
9d0032fc:	26100001 	addiu	s0,s0,1
		digitalWrite(this->anodes[i], 0);
9d003300:	0f400e82 	jal	9d003a08 <digitalWrite>
9d003304:	308400ff 	andi	a0,a0,0xff
    unsigned char v;
    unsigned char i;
    unsigned char c;
    static unsigned char b = 0;

    for (i=0; i<this->nAnodes; i++) {
9d003308:	92220005 	lbu	v0,5(s1)
9d00330c:	321000ff 	andi	s0,s0,0xff
9d003310:	304200ff 	andi	v0,v0,0xff
9d003314:	0202102b 	sltu	v0,s0,v0
9d003318:	1440fff6 	bnez	v0,9d0032f4 <_ZN6LEDMux6updateEv+0x2c>
9d00331c:	02301021 	addu	v0,s1,s0
		digitalWrite(this->anodes[i], 0);
	}
    for (i=0; i<this->nCathodes; i++) {
9d003320:	92220006 	lbu	v0,6(s1)
9d003324:	304200ff 	andi	v0,v0,0xff
9d003328:	1040000e 	beqz	v0,9d003364 <_ZN6LEDMux6updateEv+0x9c>
9d00332c:	00000000 	nop
9d003330:	00008021 	move	s0,zero
		digitalWrite(this->cathodes[i], 0);
9d003334:	02301021 	addu	v0,s1,s0
9d003338:	9044000f 	lbu	a0,15(v0)
9d00333c:	00002821 	move	a1,zero
    static unsigned char b = 0;

    for (i=0; i<this->nAnodes; i++) {
		digitalWrite(this->anodes[i], 0);
	}
    for (i=0; i<this->nCathodes; i++) {
9d003340:	26100001 	addiu	s0,s0,1
		digitalWrite(this->cathodes[i], 0);
9d003344:	0f400e82 	jal	9d003a08 <digitalWrite>
9d003348:	308400ff 	andi	a0,a0,0xff
    static unsigned char b = 0;
    for (i=0; i<this->nAnodes; i++) {
		digitalWrite(this->anodes[i], 0);
	}
    for (i=0; i<this->nCathodes; i++) {
9d00334c:	92220006 	lbu	v0,6(s1)
9d003350:	321000ff 	andi	s0,s0,0xff
9d003354:	304200ff 	andi	v0,v0,0xff
9d003358:	0202102b 	sltu	v0,s0,v0
9d00335c:	1440fff6 	bnez	v0,9d003338 <_ZN6LEDMux6updateEv+0x70>
9d003360:	02301021 	addu	v0,s1,s0
		digitalWrite(this->cathodes[i], 0);
	}

    this->digit++;
9d003364:	92220004 	lbu	v0,4(s1)
9d003368:	24420001 	addiu	v0,v0,1
9d00336c:	304200ff 	andi	v0,v0,0xff
9d003370:	a2220004 	sb	v0,4(s1)
    if (this->digit >= this->nCathodes) {
9d003374:	92230004 	lbu	v1,4(s1)
9d003378:	92220006 	lbu	v0,6(s1)
9d00337c:	306300ff 	andi	v1,v1,0xff
9d003380:	304200ff 	andi	v0,v0,0xff
9d003384:	0062102b 	sltu	v0,v1,v0
9d003388:	14400006 	bnez	v0,9d0033a4 <_ZN6LEDMux6updateEv+0xdc>
9d00338c:	00000000 	nop
			this->digit = 0;
9d003390:	a2200004 	sb	zero,4(s1)
            b++;
9d003394:	93828064 	lbu	v0,-32668(gp)
9d003398:	24420001 	addiu	v0,v0,1
            b = b & 0b11111;
9d00339c:	3042001f 	andi	v0,v0,0x1f
9d0033a0:	a3828064 	sb	v0,-32668(gp)
    }

    if (this->brightness[this->digit] == 0) {
9d0033a4:	92220004 	lbu	v0,4(s1)
9d0033a8:	304200ff 	andi	v0,v0,0xff
9d0033ac:	02221021 	addu	v0,s1,v0
9d0033b0:	90420017 	lbu	v0,23(v0)
9d0033b4:	304200ff 	andi	v0,v0,0xff
9d0033b8:	1040003f 	beqz	v0,9d0034b8 <_ZN6LEDMux6updateEv+0x1f0>
9d0033bc:	8fbf001c 	lw	ra,28(sp)
        return;
    }

    if (b < (1<<(this->brightness[this->digit]-1))) {
9d0033c0:	92220004 	lbu	v0,4(s1)
9d0033c4:	93838064 	lbu	v1,-32668(gp)
9d0033c8:	24040001 	li	a0,1
9d0033cc:	304200ff 	andi	v0,v0,0xff
9d0033d0:	02221021 	addu	v0,s1,v0
9d0033d4:	90420017 	lbu	v0,23(v0)
9d0033d8:	2442001f 	addiu	v0,v0,31
9d0033dc:	00441004 	sllv	v0,a0,v0
9d0033e0:	0062102a 	slt	v0,v1,v0
9d0033e4:	10400035 	beqz	v0,9d0034bc <_ZN6LEDMux6updateEv+0x1f4>
9d0033e8:	8fb20018 	lw	s2,24(sp)
        c = buffer[this->digit];
9d0033ec:	92220004 	lbu	v0,4(s1)
9d0033f0:	304200ff 	andi	v0,v0,0xff
9d0033f4:	02221021 	addu	v0,s1,v0
9d0033f8:	90420028 	lbu	v0,40(v0)
9d0033fc:	304200ff 	andi	v0,v0,0xff
        if (c < ' ') {
9d003400:	2c430020 	sltiu	v1,v0,32
9d003404:	54600031 	bnezl	v1,9d0034cc <_ZN6LEDMux6updateEv+0x204>
9d003408:	24020020 	li	v0,32
            c = ' ';
        }
    
        if (c > 135) {
9d00340c:	2c430088 	sltiu	v1,v0,136
9d003410:	1460002e 	bnez	v1,9d0034cc <_ZN6LEDMux6updateEv+0x204>
9d003414:	00003021 	move	a2,zero
            c = ' ';
        }
        c = c - ' ';

        v = digits[c];
9d003418:	3c059d03 	lui	a1,0x9d03
        if ((this->dp >> this->digit) & 1) {
9d00341c:	9224001f 	lbu	a0,31(s1)
        if (c > 135) {
            c = ' ';
        }
        c = c - ' ';

        v = digits[c];
9d003420:	24a5bc48 	addiu	a1,a1,-17336
        if ((this->dp >> this->digit) & 1) {
9d003424:	92230004 	lbu	v1,4(s1)
        if (c > 135) {
            c = ' ';
        }
        c = c - ' ';

        v = digits[c];
9d003428:	00c51021 	addu	v0,a2,a1
9d00342c:	90500000 	lbu	s0,0(v0)
        if ((this->dp >> this->digit) & 1) {
            v = v | 0b10000000;
        }

        for (i=0; i<this->nAnodes; i++) {
9d003430:	92220005 	lbu	v0,5(s1)
            c = ' ';
        }
        c = c - ' ';
        v = digits[c];
        if ((this->dp >> this->digit) & 1) {
9d003434:	308400ff 	andi	a0,a0,0xff
9d003438:	00642007 	srav	a0,a0,v1
9d00343c:	30840001 	andi	a0,a0,0x1
            v = v | 0b10000000;
9d003440:	36030080 	ori	v1,s0,0x80
        }

        for (i=0; i<this->nAnodes; i++) {
9d003444:	304200ff 	andi	v0,v0,0xff
9d003448:	1040000f 	beqz	v0,9d003488 <_ZN6LEDMux6updateEv+0x1c0>
9d00344c:	0064800b 	movn	s0,v1,a0
9d003450:	00009021 	move	s2,zero
            digitalWrite(this->anodes[i], v & (1<<i) ? 1 : 0);
9d003454:	02321021 	addu	v0,s1,s2
9d003458:	90440007 	lbu	a0,7(v0)
9d00345c:	02502807 	srav	a1,s0,s2
9d003460:	30a50001 	andi	a1,a1,0x1
9d003464:	0f400e82 	jal	9d003a08 <digitalWrite>
9d003468:	308400ff 	andi	a0,a0,0xff
        v = digits[c];
        if ((this->dp >> this->digit) & 1) {
            v = v | 0b10000000;
        }

        for (i=0; i<this->nAnodes; i++) {
9d00346c:	92220005 	lbu	v0,5(s1)
9d003470:	26520001 	addiu	s2,s2,1
9d003474:	325200ff 	andi	s2,s2,0xff
9d003478:	304200ff 	andi	v0,v0,0xff
9d00347c:	0242102b 	sltu	v0,s2,v0
9d003480:	1440fff5 	bnez	v0,9d003458 <_ZN6LEDMux6updateEv+0x190>
9d003484:	02321021 	addu	v0,s1,s2
            digitalWrite(this->anodes[i], v & (1<<i) ? 1 : 0);
        }
        digitalWrite(this->cathodes[this->digit], HIGH);
9d003488:	92220004 	lbu	v0,4(s1)
    }
}
9d00348c:	8fbf001c 	lw	ra,28(sp)
9d003490:	8fb20018 	lw	s2,24(sp)
        }

        for (i=0; i<this->nAnodes; i++) {
            digitalWrite(this->anodes[i], v & (1<<i) ? 1 : 0);
        }
        digitalWrite(this->cathodes[this->digit], HIGH);
9d003494:	304200ff 	andi	v0,v0,0xff
9d003498:	02228821 	addu	s1,s1,v0
9d00349c:	9224000f 	lbu	a0,15(s1)
    }
}
9d0034a0:	8fb00010 	lw	s0,16(sp)
9d0034a4:	8fb10014 	lw	s1,20(sp)
        }

        for (i=0; i<this->nAnodes; i++) {
            digitalWrite(this->anodes[i], v & (1<<i) ? 1 : 0);
        }
        digitalWrite(this->cathodes[this->digit], HIGH);
9d0034a8:	24050001 	li	a1,1
9d0034ac:	308400ff 	andi	a0,a0,0xff
9d0034b0:	0b400e82 	j	9d003a08 <digitalWrite>
9d0034b4:	27bd0020 	addiu	sp,sp,32
    }
}
9d0034b8:	8fb20018 	lw	s2,24(sp)
9d0034bc:	8fb10014 	lw	s1,20(sp)
9d0034c0:	8fb00010 	lw	s0,16(sp)
9d0034c4:	03e00008 	jr	ra
9d0034c8:	27bd0020 	addiu	sp,sp,32
        c = buffer[this->digit];
        if (c < ' ') {
            c = ' ';
        }
    
        if (c > 135) {
9d0034cc:	2442ffe0 	addiu	v0,v0,-32
9d0034d0:	0b400d06 	j	9d003418 <_ZN6LEDMux6updateEv+0x150>
9d0034d4:	304600ff 	andi	a2,v0,0xff

9d0034d8 <_ZN6LEDMux13setBrightnessEh>:
}

void LEDMux::setBrightness(unsigned char b)
{
    unsigned char i;
    for (i=0; i<this->nCathodes; i++) {
9d0034d8:	90820006 	lbu	v0,6(a0)
9d0034dc:	304200ff 	andi	v0,v0,0xff
9d0034e0:	1040000b 	beqz	v0,9d003510 <_ZN6LEDMux13setBrightnessEh+0x38>
9d0034e4:	30a500ff 	andi	a1,a1,0xff
9d0034e8:	00001021 	move	v0,zero
    }
}

void LEDMux::setBrightness(unsigned char c, unsigned char b)
{
    this->brightness[c] = b;
9d0034ec:	00821821 	addu	v1,a0,v0
9d0034f0:	a0650017 	sb	a1,23(v1)
}

void LEDMux::setBrightness(unsigned char b)
{
    unsigned char i;
    for (i=0; i<this->nCathodes; i++) {
9d0034f4:	90830006 	lbu	v1,6(a0)
9d0034f8:	24420001 	addiu	v0,v0,1
9d0034fc:	304200ff 	andi	v0,v0,0xff
9d003500:	306300ff 	andi	v1,v1,0xff
9d003504:	0043182b 	sltu	v1,v0,v1
9d003508:	1460fff9 	bnez	v1,9d0034f0 <_ZN6LEDMux13setBrightnessEh+0x18>
9d00350c:	00821821 	addu	v1,a0,v0
9d003510:	03e00008 	jr	ra
9d003514:	00000000 	nop

9d003518 <_ZN6LEDMux15setDecimalPointEhh>:
    this->dp = d;
}

void LEDMux::setDecimalPoint(unsigned char pos, unsigned char val)
{
    this->dp &= ~(1<<pos);
9d003518:	9082001f 	lbu	v0,31(a0)
9d00351c:	24030001 	li	v1,1
9d003520:	00a31804 	sllv	v1,v1,a1
9d003524:	7c031c20 	seb	v1,v1
9d003528:	304200ff 	andi	v0,v0,0xff
9d00352c:	00032827 	nor	a1,zero,v1
9d003530:	00a21024 	and	v0,a1,v0
{
    this->dp = d;
}

void LEDMux::setDecimalPoint(unsigned char pos, unsigned char val)
{
9d003534:	30c600ff 	andi	a2,a2,0xff
    this->dp &= ~(1<<pos);
9d003538:	a082001f 	sb	v0,31(a0)
    if (val) {
9d00353c:	10c00005 	beqz	a2,9d003554 <_ZN6LEDMux15setDecimalPointEhh+0x3c>
9d003540:	00000000 	nop
        this->dp |= (1<<pos);
9d003544:	9082001f 	lbu	v0,31(a0)
9d003548:	00621825 	or	v1,v1,v0
9d00354c:	306300ff 	andi	v1,v1,0xff
9d003550:	a083001f 	sb	v1,31(a0)
9d003554:	03e00008 	jr	ra
9d003558:	00000000 	nop

9d00355c <_T5Interrupt>:
    void __ISR(_TIMER_4_VECTOR, IPL6) _T4Interrupt(void)
#endif
#if USE_TIMER == 5
    void __ISR(_TIMER_5_VECTOR, IPL6) _T5Interrupt(void)
#endif
    {
9d00355c:	415de800 	rdpgpr	sp,sp
9d003560:	401a7000 	mfc0	k0,c0_epc
9d003564:	401b6000 	mfc0	k1,c0_status
9d003568:	27bdff98 	addiu	sp,sp,-104
9d00356c:	afbb0060 	sw	k1,96(sp)
9d003570:	7c1b7844 	ins	k1,zero,0x1,0xf
9d003574:	377b1800 	ori	k1,k1,0x1800
9d003578:	afba0064 	sw	k0,100(sp)
9d00357c:	409b6000 	mtc0	k1,c0_status
9d003580:	afbf0054 	sw	ra,84(sp)
9d003584:	afb90050 	sw	t9,80(sp)
9d003588:	afb8004c 	sw	t8,76(sp)
9d00358c:	afaf0048 	sw	t7,72(sp)
9d003590:	afae0044 	sw	t6,68(sp)
9d003594:	afad0040 	sw	t5,64(sp)
9d003598:	afac003c 	sw	t4,60(sp)
9d00359c:	afab0038 	sw	t3,56(sp)
9d0035a0:	afaa0034 	sw	t2,52(sp)
9d0035a4:	afa90030 	sw	t1,48(sp)
9d0035a8:	afa8002c 	sw	t0,44(sp)
9d0035ac:	afa70028 	sw	a3,40(sp)
9d0035b0:	afa60024 	sw	a2,36(sp)
9d0035b4:	afa50020 	sw	a1,32(sp)
9d0035b8:	afa4001c 	sw	a0,28(sp)
9d0035bc:	afa30018 	sw	v1,24(sp)
9d0035c0:	afa20014 	sw	v0,20(sp)
9d0035c4:	afa10010 	sw	at,16(sp)
9d0035c8:	00001012 	mflo	v0
        if (internalLEDMuxPointer) {
9d0035cc:	8f848060 	lw	a0,-32672(gp)
    void __ISR(_TIMER_4_VECTOR, IPL6) _T4Interrupt(void)
#endif
#if USE_TIMER == 5
    void __ISR(_TIMER_5_VECTOR, IPL6) _T5Interrupt(void)
#endif
    {
9d0035d0:	afa2005c 	sw	v0,92(sp)
9d0035d4:	00001810 	mfhi	v1
        if (internalLEDMuxPointer) {
9d0035d8:	10800003 	beqz	a0,9d0035e8 <_T5Interrupt+0x8c>
9d0035dc:	afa30058 	sw	v1,88(sp)
            internalLEDMuxPointer->update();
9d0035e0:	0f400cb2 	jal	9d0032c8 <_ZN6LEDMux6updateEv>
9d0035e4:	00000000 	nop
#endif
#if USE_TIMER == 4
        IFS0bits.T4IF = 0;
#endif
#if USE_TIMER == 5
        IFS0bits.T5IF = 0;
9d0035e8:	3c02bf88 	lui	v0,0xbf88
9d0035ec:	8c431030 	lw	v1,4144(v0)
9d0035f0:	7c03a504 	ins	v1,zero,0x14,0x1
9d0035f4:	ac431030 	sw	v1,4144(v0)
#endif
    }
9d0035f8:	8fa2005c 	lw	v0,92(sp)
9d0035fc:	8fa30058 	lw	v1,88(sp)
9d003600:	8fbf0054 	lw	ra,84(sp)
9d003604:	00400013 	mtlo	v0
9d003608:	8fb90050 	lw	t9,80(sp)
9d00360c:	8fb8004c 	lw	t8,76(sp)
9d003610:	8faf0048 	lw	t7,72(sp)
9d003614:	00600011 	mthi	v1
9d003618:	8fae0044 	lw	t6,68(sp)
9d00361c:	8fad0040 	lw	t5,64(sp)
9d003620:	8fac003c 	lw	t4,60(sp)
9d003624:	8fab0038 	lw	t3,56(sp)
9d003628:	8faa0034 	lw	t2,52(sp)
9d00362c:	8fa90030 	lw	t1,48(sp)
9d003630:	8fa8002c 	lw	t0,44(sp)
9d003634:	8fa70028 	lw	a3,40(sp)
9d003638:	8fa60024 	lw	a2,36(sp)
9d00363c:	8fa50020 	lw	a1,32(sp)
9d003640:	8fa4001c 	lw	a0,28(sp)
9d003644:	8fa30018 	lw	v1,24(sp)
9d003648:	8fa20014 	lw	v0,20(sp)
9d00364c:	8fa10010 	lw	at,16(sp)
9d003650:	41606000 	di
9d003654:	000000c0 	ehb
9d003658:	8fba0064 	lw	k0,100(sp)
9d00365c:	8fbb0060 	lw	k1,96(sp)
9d003660:	409a7000 	mtc0	k0,c0_epc
9d003664:	27bd0068 	addiu	sp,sp,104
9d003668:	41dde800 	wrpgpr	sp,sp
9d00366c:	409b6000 	mtc0	k1,c0_status
9d003670:	42000018 	eret

9d003674 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

//************************************************************************
void pinMode(uint8_t pin, uint8_t mode)
{
9d003674:	308400ff 	andi	a0,a0,0xff
9d003678:	27bdffe0 	addiu	sp,sp,-32
uint32_t                cn;
#endif

	/* Check if pin number is in valid range.
	*/
	if (pin >= NUM_DIGITAL_PINS_EXTENDED)
9d00367c:	2c82001f 	sltiu	v0,a0,31
#include "wiring_private.h"
#include "pins_arduino.h"

//************************************************************************
void pinMode(uint8_t pin, uint8_t mode)
{
9d003680:	afbf001c 	sw	ra,28(sp)
9d003684:	afb10018 	sw	s1,24(sp)
9d003688:	afb00014 	sw	s0,20(sp)
uint32_t                cn;
#endif
	/* Check if pin number is in valid range.
	*/
	if (pin >= NUM_DIGITAL_PINS_EXTENDED)
9d00368c:	1040004d 	beqz	v0,9d0037c4 <pinMode+0x150>
9d003690:	30a500ff 	andi	a1,a1,0xff
		return;
	}
#endif	// OPT_BOARD_DIGITAL_IO
	//* Get the port number for this pin.
	if ((port = digitalPinToPort(pin)) == NOT_A_PIN)
9d003694:	3c029d03 	lui	v0,0x9d03
9d003698:	2442bcd4 	addiu	v0,v0,-17196
9d00369c:	00821021 	addu	v0,a0,v0
9d0036a0:	90420000 	lbu	v0,0(v0)
9d0036a4:	10400047 	beqz	v0,9d0037c4 <pinMode+0x150>
9d0036a8:	00023080 	sll	a2,v0,0x2
	{
		return;
	}

	//* Obtain pointer to the registers for this io port.
	iop = (p32_ioport *)portRegisters(port);
9d0036ac:	3c079d03 	lui	a3,0x9d03
9d0036b0:	24e7bcb0 	addiu	a3,a3,-17232
9d0036b4:	00c73821 	addu	a3,a2,a3

	//* Obtain bit mask for the specific bit for this pin.
	bit = digitalPinToBitMask(pin);
9d0036b8:	3c069d03 	lui	a2,0x9d03
9d0036bc:	00041840 	sll	v1,a0,0x1
9d0036c0:	24c6bcf4 	addiu	a2,a2,-17164
9d0036c4:	00c33021 	addu	a2,a2,v1
9d0036c8:	94d00000 	lhu	s0,0(a2)
	// analog input capable pins.
	// Clear the bit in the ANSELx register to ensure that the pin is in
	// digital input mode.
	iop->ansel.clr = bit;
#else
	if (port == _IOPORT_PB)
9d0036cc:	24060002 	li	a2,2
9d0036d0:	10460079 	beq	v0,a2,9d0038b8 <pinMode+0x244>
9d0036d4:	8cf10000 	lw	s1,0(a3)

	}
#endif	// defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)

	// Set the pin to the requested mode.
    switch (mode) {
9d0036d8:	24020002 	li	v0,2
9d0036dc:	10a2006f 	beq	a1,v0,9d00389c <pinMode+0x228>
9d0036e0:	2ca20003 	sltiu	v0,a1,3
9d0036e4:	5040003c 	beqzl	v0,9d0037d8 <pinMode+0x164>
9d0036e8:	2ca20006 	sltiu	v0,a1,6
9d0036ec:	14a0003c 	bnez	a1,9d0037e0 <pinMode+0x16c>
9d0036f0:	24020003 	li	v0,3
            } else {
                iop->cnpu.clr = bit;
                iop->cnpd.clr = bit;
            }
#else
            if (mode == INPUT_PULLUP) {
9d0036f4:	10a2008a 	beq	a1,v0,9d003920 <pinMode+0x2ac>
9d0036f8:	00000000 	nop
                cn = digitalPinToCN(pin);
                if (cn != NOT_CN_PIN) {
                    CNPUESET = cn;
                } 
            } else {
                cn = digitalPinToCN(pin);
9d0036fc:	1080007f 	beqz	a0,9d0038fc <pinMode+0x288>
9d003700:	24050004 	li	a1,4
9d003704:	24060001 	li	a2,1
9d003708:	108600b3 	beq	a0,a2,9d0039d8 <pinMode+0x364>
9d00370c:	24060002 	li	a2,2
9d003710:	5086007a 	beql	a0,a2,9d0038fc <pinMode+0x288>
9d003714:	24050010 	li	a1,16
9d003718:	50820078 	beql	a0,v0,9d0038fc <pinMode+0x288>
9d00371c:	24050020 	li	a1,32
9d003720:	50850076 	beql	a0,a1,9d0038fc <pinMode+0x288>
9d003724:	24050040 	li	a1,64
9d003728:	24020005 	li	v0,5
9d00372c:	50820073 	beql	a0,v0,9d0038fc <pinMode+0x288>
9d003730:	24050080 	li	a1,128
9d003734:	24020007 	li	v0,7
9d003738:	50820070 	beql	a0,v0,9d0038fc <pinMode+0x288>
9d00373c:	24052000 	li	a1,8192
9d003740:	2402000a 	li	v0,10
9d003744:	5082006d 	beql	a0,v0,9d0038fc <pinMode+0x288>
9d003748:	3c050002 	lui	a1,0x2
9d00374c:	2402000b 	li	v0,11
9d003750:	5082006a 	beql	a0,v0,9d0038fc <pinMode+0x288>
9d003754:	3c050004 	lui	a1,0x4
9d003758:	2402000c 	li	v0,12
9d00375c:	50820067 	beql	a0,v0,9d0038fc <pinMode+0x288>
9d003760:	34058000 	li	a1,0x8000
9d003764:	2402000d 	li	v0,13
9d003768:	50820064 	beql	a0,v0,9d0038fc <pinMode+0x288>
9d00376c:	24054000 	li	a1,16384
9d003770:	2402000e 	li	v0,14
9d003774:	50820061 	beql	a0,v0,9d0038fc <pinMode+0x288>
9d003778:	24050001 	li	a1,1
9d00377c:	24020011 	li	v0,17
9d003780:	5082005e 	beql	a0,v0,9d0038fc <pinMode+0x288>
9d003784:	24050400 	li	a1,1024
9d003788:	24020012 	li	v0,18
9d00378c:	1082005b 	beq	a0,v0,9d0038fc <pinMode+0x288>
9d003790:	24050200 	li	a1,512
9d003794:	2402001d 	li	v0,29
9d003798:	10820058 	beq	a0,v0,9d0038fc <pinMode+0x288>
9d00379c:	24050002 	li	a1,2
            }
#endif
            // continue into INPUT case
            //* Determine if this is an output compare pin. If so,
            //* we need to make sure PWM output is off.
            timer = digitalPinToTimerOC(pin) >> _BN_TIMER_OC;
9d0037a0:	3c029d03 	lui	v0,0x9d03
9d0037a4:	2442bd34 	addiu	v0,v0,-17100
9d0037a8:	00431821 	addu	v1,v0,v1
9d0037ac:	90640000 	lbu	a0,0(v1)
9d0037b0:	3084000f 	andi	a0,a0,0xf
            if (timer != NOT_ON_TIMER)
9d0037b4:	1480004b 	bnez	a0,9d0038e4 <pinMode+0x270>
9d0037b8:	00000000 	nop
            }

            //*	May  1,	2011
            //*	according to item #26 in PIC32MX5XX-6XX-7XX Errata.pdf 
            //*	if we are setting to input, set the data bit to zero first
            iop->lat.clr  = bit;	//clear to output bit		
9d0037bc:	ae300024 	sw	s0,36(s1)
            iop->tris.set = bit;	//make the pin an input
9d0037c0:	ae300008 	sw	s0,8(s1)
            } 
#endif
            iop->tris.clr = bit;	//make the pin an output
            iop->odc.clr  = bit;	//make sure it isn't open drain
	}
}
9d0037c4:	8fbf001c 	lw	ra,28(sp)
9d0037c8:	8fb10018 	lw	s1,24(sp)
9d0037cc:	8fb00014 	lw	s0,20(sp)
9d0037d0:	03e00008 	jr	ra
9d0037d4:	27bd0020 	addiu	sp,sp,32

	}
#endif	// defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)
	// Set the pin to the requested mode.
    switch (mode) {
9d0037d8:	1440ffc6 	bnez	v0,9d0036f4 <pinMode+0x80>
9d0037dc:	24020003 	li	v0,3
            // than error checking the input value.
#if defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)
            iop->cnpu.clr = bit;
            iop->cnpd.clr = bit;
#else
            cn = digitalPinToCN(pin);
9d0037e0:	1080003a 	beqz	a0,9d0038cc <pinMode+0x258>
9d0037e4:	24020004 	li	v0,4
9d0037e8:	24030001 	li	v1,1
9d0037ec:	10830047 	beq	a0,v1,9d00390c <pinMode+0x298>
9d0037f0:	24030002 	li	v1,2
9d0037f4:	1083007d 	beq	a0,v1,9d0039ec <pinMode+0x378>
9d0037f8:	24030003 	li	v1,3
9d0037fc:	50830033 	beql	a0,v1,9d0038cc <pinMode+0x258>
9d003800:	24020020 	li	v0,32
9d003804:	10820031 	beq	a0,v0,9d0038cc <pinMode+0x258>
9d003808:	24020040 	li	v0,64
9d00380c:	24020005 	li	v0,5
9d003810:	1082002e 	beq	a0,v0,9d0038cc <pinMode+0x258>
9d003814:	24020080 	li	v0,128
9d003818:	24020007 	li	v0,7
9d00381c:	1082002b 	beq	a0,v0,9d0038cc <pinMode+0x258>
9d003820:	24022000 	li	v0,8192
9d003824:	2402000a 	li	v0,10
9d003828:	10820028 	beq	a0,v0,9d0038cc <pinMode+0x258>
9d00382c:	3c020002 	lui	v0,0x2
9d003830:	2402000b 	li	v0,11
9d003834:	10820025 	beq	a0,v0,9d0038cc <pinMode+0x258>
9d003838:	3c020004 	lui	v0,0x4
9d00383c:	2402000c 	li	v0,12
9d003840:	10820022 	beq	a0,v0,9d0038cc <pinMode+0x258>
9d003844:	34028000 	li	v0,0x8000
9d003848:	2402000d 	li	v0,13
9d00384c:	1082001f 	beq	a0,v0,9d0038cc <pinMode+0x258>
9d003850:	24024000 	li	v0,16384
9d003854:	2402000e 	li	v0,14
9d003858:	1082001b 	beq	a0,v0,9d0038c8 <pinMode+0x254>
9d00385c:	24020011 	li	v0,17
9d003860:	1082001a 	beq	a0,v0,9d0038cc <pinMode+0x258>
9d003864:	24020400 	li	v0,1024
9d003868:	24020012 	li	v0,18
9d00386c:	10820017 	beq	a0,v0,9d0038cc <pinMode+0x258>
9d003870:	24020200 	li	v0,512
9d003874:	2402001d 	li	v0,29
9d003878:	10820014 	beq	a0,v0,9d0038cc <pinMode+0x258>
9d00387c:	24020002 	li	v0,2
            if (cn != NOT_CN_PIN) {
                CNPUECLR = cn;
            } 
#endif
            iop->tris.clr = bit;	//make the pin an output
9d003880:	ae300004 	sw	s0,4(s1)
            iop->odc.clr  = bit;	//make sure it isn't open drain
9d003884:	ae300034 	sw	s0,52(s1)
	}
}
9d003888:	8fbf001c 	lw	ra,28(sp)
9d00388c:	8fb10018 	lw	s1,24(sp)
9d003890:	8fb00014 	lw	s0,20(sp)
9d003894:	03e00008 	jr	ra
9d003898:	27bd0020 	addiu	sp,sp,32
9d00389c:	8fbf001c 	lw	ra,28(sp)
            //*	if we are setting to input, set the data bit to zero first
            iop->lat.clr  = bit;	//clear to output bit		
            iop->tris.set = bit;	//make the pin an input
            break;
        case OPEN:
            iop->tris.clr = bit;	//OPEN implies output, make the pin an output
9d0038a0:	ae300004 	sw	s0,4(s1)
            iop->odc.set  = bit;	//make the pin open drain
9d0038a4:	ae300038 	sw	s0,56(s1)
            } 
#endif
            iop->tris.clr = bit;	//make the pin an output
            iop->odc.clr  = bit;	//make sure it isn't open drain
	}
}
9d0038a8:	8fb10018 	lw	s1,24(sp)
9d0038ac:	8fb00014 	lw	s0,20(sp)
9d0038b0:	03e00008 	jr	ra
9d0038b4:	27bd0020 	addiu	sp,sp,32
		//	You have to set the bit in the AD1PCFG for an analog pin to be used as a 
		//	digital input. They come up after reset as analog input with the digital 
		//	input disabled. For the PORTB pins you switch between analog input and 
		//	digital input using AD1PCFG.

		AD1PCFGSET = bit;
9d0038b8:	3c02bf81 	lui	v0,0xbf81
9d0038bc:	ac509068 	sw	s0,-28568(v0)

	}
#endif	// defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)

	// Set the pin to the requested mode.
    switch (mode) {
9d0038c0:	0b400db7 	j	9d0036dc <pinMode+0x68>
9d0038c4:	24020002 	li	v0,2
            // than error checking the input value.
#if defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)
            iop->cnpu.clr = bit;
            iop->cnpd.clr = bit;
#else
            cn = digitalPinToCN(pin);
9d0038c8:	24020001 	li	v0,1
            if (cn != NOT_CN_PIN) {
                CNPUECLR = cn;
9d0038cc:	3c03bf88 	lui	v1,0xbf88
9d0038d0:	ac6261e4 	sw	v0,25060(v1)
            } 
#endif
            iop->tris.clr = bit;	//make the pin an output
9d0038d4:	ae300004 	sw	s0,4(s1)
            iop->odc.clr  = bit;	//make sure it isn't open drain
9d0038d8:	ae300034 	sw	s0,52(s1)
	}
}
9d0038dc:	0b400e23 	j	9d00388c <pinMode+0x218>
9d0038e0:	8fbf001c 	lw	ra,28(sp)
            //* Determine if this is an output compare pin. If so,
            //* we need to make sure PWM output is off.
            timer = digitalPinToTimerOC(pin) >> _BN_TIMER_OC;
            if (timer != NOT_ON_TIMER)
            {
                turnOffPWM(timer);
9d0038e4:	0f400f79 	jal	9d003de4 <turnOffPWM>
9d0038e8:	00000000 	nop
            }

            //*	May  1,	2011
            //*	according to item #26 in PIC32MX5XX-6XX-7XX Errata.pdf 
            //*	if we are setting to input, set the data bit to zero first
            iop->lat.clr  = bit;	//clear to output bit		
9d0038ec:	ae300024 	sw	s0,36(s1)
            iop->tris.set = bit;	//make the pin an input
9d0038f0:	ae300008 	sw	s0,8(s1)
            } 
#endif
            iop->tris.clr = bit;	//make the pin an output
            iop->odc.clr  = bit;	//make sure it isn't open drain
	}
}
9d0038f4:	0b400df2 	j	9d0037c8 <pinMode+0x154>
9d0038f8:	8fbf001c 	lw	ra,28(sp)
                    CNPUESET = cn;
                } 
            } else {
                cn = digitalPinToCN(pin);
                if (cn != NOT_CN_PIN) {
                    CNPUECLR = cn;
9d0038fc:	3c02bf88 	lui	v0,0xbf88
9d003900:	ac4561e4 	sw	a1,25060(v0)
            }
#endif
            // continue into INPUT case
            //* Determine if this is an output compare pin. If so,
            //* we need to make sure PWM output is off.
            timer = digitalPinToTimerOC(pin) >> _BN_TIMER_OC;
9d003904:	0b400de9 	j	9d0037a4 <pinMode+0x130>
9d003908:	3c029d03 	lui	v0,0x9d03
            // than error checking the input value.
#if defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)
            iop->cnpu.clr = bit;
            iop->cnpd.clr = bit;
#else
            cn = digitalPinToCN(pin);
9d00390c:	24020008 	li	v0,8
            if (cn != NOT_CN_PIN) {
                CNPUECLR = cn;
9d003910:	3c03bf88 	lui	v1,0xbf88
9d003914:	ac6261e4 	sw	v0,25060(v1)
9d003918:	0b400e35 	j	9d0038d4 <pinMode+0x260>
9d00391c:	00000000 	nop
                iop->cnpu.clr = bit;
                iop->cnpd.clr = bit;
            }
#else
            if (mode == INPUT_PULLUP) {
                cn = digitalPinToCN(pin);
9d003920:	10800029 	beqz	a0,9d0039c8 <pinMode+0x354>
9d003924:	24020004 	li	v0,4
9d003928:	24060001 	li	a2,1
9d00392c:	10860031 	beq	a0,a2,9d0039f4 <pinMode+0x380>
9d003930:	24060002 	li	a2,2
9d003934:	50860024 	beql	a0,a2,9d0039c8 <pinMode+0x354>
9d003938:	24020010 	li	v0,16
9d00393c:	50850022 	beql	a0,a1,9d0039c8 <pinMode+0x354>
9d003940:	24020020 	li	v0,32
9d003944:	10820020 	beq	a0,v0,9d0039c8 <pinMode+0x354>
9d003948:	24020040 	li	v0,64
9d00394c:	24020005 	li	v0,5
9d003950:	1082001d 	beq	a0,v0,9d0039c8 <pinMode+0x354>
9d003954:	24020080 	li	v0,128
9d003958:	24020007 	li	v0,7
9d00395c:	1082001a 	beq	a0,v0,9d0039c8 <pinMode+0x354>
9d003960:	24022000 	li	v0,8192
9d003964:	2402000a 	li	v0,10
9d003968:	10820017 	beq	a0,v0,9d0039c8 <pinMode+0x354>
9d00396c:	3c020002 	lui	v0,0x2
9d003970:	2402000b 	li	v0,11
9d003974:	10820014 	beq	a0,v0,9d0039c8 <pinMode+0x354>
9d003978:	3c020004 	lui	v0,0x4
9d00397c:	2402000c 	li	v0,12
9d003980:	10820011 	beq	a0,v0,9d0039c8 <pinMode+0x354>
9d003984:	34028000 	li	v0,0x8000
9d003988:	2402000d 	li	v0,13
9d00398c:	1082000e 	beq	a0,v0,9d0039c8 <pinMode+0x354>
9d003990:	24024000 	li	v0,16384
9d003994:	2402000e 	li	v0,14
9d003998:	1082000b 	beq	a0,v0,9d0039c8 <pinMode+0x354>
9d00399c:	24020001 	li	v0,1
9d0039a0:	24020011 	li	v0,17
9d0039a4:	10820008 	beq	a0,v0,9d0039c8 <pinMode+0x354>
9d0039a8:	24020400 	li	v0,1024
9d0039ac:	24020012 	li	v0,18
9d0039b0:	10820005 	beq	a0,v0,9d0039c8 <pinMode+0x354>
9d0039b4:	24020200 	li	v0,512
9d0039b8:	2402001d 	li	v0,29
9d0039bc:	5482ff79 	bnel	a0,v0,9d0037a4 <pinMode+0x130>
9d0039c0:	3c029d03 	lui	v0,0x9d03
9d0039c4:	24020002 	li	v0,2
                if (cn != NOT_CN_PIN) {
                    CNPUESET = cn;
9d0039c8:	3c04bf88 	lui	a0,0xbf88
9d0039cc:	ac8261e8 	sw	v0,25064(a0)
            }
#endif
            // continue into INPUT case
            //* Determine if this is an output compare pin. If so,
            //* we need to make sure PWM output is off.
            timer = digitalPinToTimerOC(pin) >> _BN_TIMER_OC;
9d0039d0:	0b400de9 	j	9d0037a4 <pinMode+0x130>
9d0039d4:	3c029d03 	lui	v0,0x9d03
                cn = digitalPinToCN(pin);
                if (cn != NOT_CN_PIN) {
                    CNPUESET = cn;
                } 
            } else {
                cn = digitalPinToCN(pin);
9d0039d8:	24050008 	li	a1,8
                if (cn != NOT_CN_PIN) {
                    CNPUECLR = cn;
9d0039dc:	3c02bf88 	lui	v0,0xbf88
9d0039e0:	ac4561e4 	sw	a1,25060(v0)
            }
#endif
            // continue into INPUT case
            //* Determine if this is an output compare pin. If so,
            //* we need to make sure PWM output is off.
            timer = digitalPinToTimerOC(pin) >> _BN_TIMER_OC;
9d0039e4:	0b400de9 	j	9d0037a4 <pinMode+0x130>
9d0039e8:	3c029d03 	lui	v0,0x9d03
            // than error checking the input value.
#if defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)
            iop->cnpu.clr = bit;
            iop->cnpd.clr = bit;
#else
            cn = digitalPinToCN(pin);
9d0039ec:	0b400e33 	j	9d0038cc <pinMode+0x258>
9d0039f0:	24020010 	li	v0,16
                iop->cnpu.clr = bit;
                iop->cnpd.clr = bit;
            }
#else
            if (mode == INPUT_PULLUP) {
                cn = digitalPinToCN(pin);
9d0039f4:	24020008 	li	v0,8
                if (cn != NOT_CN_PIN) {
                    CNPUESET = cn;
9d0039f8:	3c04bf88 	lui	a0,0xbf88
9d0039fc:	ac8261e8 	sw	v0,25064(a0)
            }
#endif
            // continue into INPUT case
            //* Determine if this is an output compare pin. If so,
            //* we need to make sure PWM output is off.
            timer = digitalPinToTimerOC(pin) >> _BN_TIMER_OC;
9d003a00:	0b400de9 	j	9d0037a4 <pinMode+0x130>
9d003a04:	3c029d03 	lui	v0,0x9d03
9d003a08 <digitalWrite>:
//*	Reading from PORT gives you a snapshot of the actual pins state regardless of how, 
//*	if at all, the PIC is trying to drive them.  
//*	Reading from LAT gives you the values last written to the pins, whether thru LAT or PORT.
//************************************************************************
void digitalWrite(uint8_t pin, uint8_t val)
{
9d003a08:	308400ff 	andi	a0,a0,0xff
9d003a0c:	27bdffd8 	addiu	sp,sp,-40
uint32_t                cn;
#endif

	/* Check if pin number is in valid range.
	*/
	if (pin >= NUM_DIGITAL_PINS_EXTENDED)
9d003a10:	2c82001f 	sltiu	v0,a0,31
//*	Reading from PORT gives you a snapshot of the actual pins state regardless of how, 
//*	if at all, the PIC is trying to drive them.  
//*	Reading from LAT gives you the values last written to the pins, whether thru LAT or PORT.
//************************************************************************
void digitalWrite(uint8_t pin, uint8_t val)
{
9d003a14:	afbf0024 	sw	ra,36(sp)
9d003a18:	afb10020 	sw	s1,32(sp)
9d003a1c:	afb0001c 	sw	s0,28(sp)
uint32_t                cn;
#endif

	/* Check if pin number is in valid range.
	*/
	if (pin >= NUM_DIGITAL_PINS_EXTENDED)
9d003a20:	10400042 	beqz	v0,9d003b2c <digitalWrite+0x124>
9d003a24:	30a500ff 	andi	a1,a1,0xff
		return;
	}
#endif		// OPT_BOARD_DIGITAL_IO

	//* Get the port number for this pin.
	if ((port = digitalPinToPort(pin)) == NOT_A_PIN)
9d003a28:	3c029d03 	lui	v0,0x9d03
9d003a2c:	2442bcd4 	addiu	v0,v0,-17196
9d003a30:	00821021 	addu	v0,a0,v0
9d003a34:	90420000 	lbu	v0,0(v0)
9d003a38:	1040003c 	beqz	v0,9d003b2c <digitalWrite+0x124>
9d003a3c:	3c039d03 	lui	v1,0x9d03
	{
		return;
	}

	//* Obtain pointer to the registers for this io port.
	iop = (p32_ioport *)portRegisters(port);
9d003a40:	2463bcb0 	addiu	v1,v1,-17232
9d003a44:	00021080 	sll	v0,v0,0x2
9d003a48:	00431021 	addu	v0,v0,v1
9d003a4c:	8c500000 	lw	s0,0(v0)

	//* Obtain bit mask for the specific bit for this pin.
	bit = digitalPinToBitMask(pin);
9d003a50:	3c069d03 	lui	a2,0x9d03
9d003a54:	00041040 	sll	v0,a0,0x1
9d003a58:	24c6bcf4 	addiu	a2,a2,-17164
9d003a5c:	00463021 	addu	a2,v0,a2

    //* If the port is in input mode and we write a value to it
    //* we must be enabling or disabling the internal pull-up
    //* resistor.  Only works for pins that have an associated
    //* change notification pin.
    if (iop->tris.reg & bit) {
9d003a60:	8e030000 	lw	v1,0(s0)
9d003a64:	94d10000 	lhu	s1,0(a2)
9d003a68:	02231824 	and	v1,s1,v1
9d003a6c:	10600034 	beqz	v1,9d003b40 <digitalWrite+0x138>
9d003a70:	3c039d03 	lui	v1,0x9d03
        } else {
            iop->cnpu.set = bit;
            iop->cnpd.clr = bit;
        }
#else
        cn = digitalPinToCN(pin);
9d003a74:	10800029 	beqz	a0,9d003b1c <digitalWrite+0x114>
9d003a78:	24020004 	li	v0,4
9d003a7c:	24030001 	li	v1,1
9d003a80:	10830049 	beq	a0,v1,9d003ba8 <digitalWrite+0x1a0>
9d003a84:	24030002 	li	v1,2
9d003a88:	10830042 	beq	a0,v1,9d003b94 <digitalWrite+0x18c>
9d003a8c:	24030003 	li	v1,3
9d003a90:	50830022 	beql	a0,v1,9d003b1c <digitalWrite+0x114>
9d003a94:	24020020 	li	v0,32
9d003a98:	10820020 	beq	a0,v0,9d003b1c <digitalWrite+0x114>
9d003a9c:	24020040 	li	v0,64
9d003aa0:	24020005 	li	v0,5
9d003aa4:	1082001d 	beq	a0,v0,9d003b1c <digitalWrite+0x114>
9d003aa8:	24020080 	li	v0,128
9d003aac:	24020007 	li	v0,7
9d003ab0:	1082001a 	beq	a0,v0,9d003b1c <digitalWrite+0x114>
9d003ab4:	24022000 	li	v0,8192
9d003ab8:	2402000a 	li	v0,10
9d003abc:	10820017 	beq	a0,v0,9d003b1c <digitalWrite+0x114>
9d003ac0:	3c020002 	lui	v0,0x2
9d003ac4:	2402000b 	li	v0,11
9d003ac8:	10820014 	beq	a0,v0,9d003b1c <digitalWrite+0x114>
9d003acc:	3c020004 	lui	v0,0x4
9d003ad0:	2402000c 	li	v0,12
9d003ad4:	10820011 	beq	a0,v0,9d003b1c <digitalWrite+0x114>
9d003ad8:	34028000 	li	v0,0x8000
9d003adc:	2402000d 	li	v0,13
9d003ae0:	1082000e 	beq	a0,v0,9d003b1c <digitalWrite+0x114>
9d003ae4:	24024000 	li	v0,16384
9d003ae8:	2402000e 	li	v0,14
9d003aec:	1082000b 	beq	a0,v0,9d003b1c <digitalWrite+0x114>
9d003af0:	24020001 	li	v0,1
9d003af4:	24020011 	li	v0,17
9d003af8:	10820008 	beq	a0,v0,9d003b1c <digitalWrite+0x114>
9d003afc:	24020400 	li	v0,1024
9d003b00:	24020012 	li	v0,18
9d003b04:	10820005 	beq	a0,v0,9d003b1c <digitalWrite+0x114>
9d003b08:	24020200 	li	v0,512
9d003b0c:	2402001d 	li	v0,29
9d003b10:	14820007 	bne	a0,v0,9d003b30 <digitalWrite+0x128>
9d003b14:	8fbf0024 	lw	ra,36(sp)
9d003b18:	24020002 	li	v0,2
        if (cn != NOT_CN_PIN) {
            if (val == LOW) {
9d003b1c:	14a0001f 	bnez	a1,9d003b9c <digitalWrite+0x194>
9d003b20:	3c03bf88 	lui	v1,0xbf88
                CNPUECLR = cn;
9d003b24:	3c03bf88 	lui	v1,0xbf88
9d003b28:	ac6261e4 	sw	v0,25060(v1)
        else
        {
            iop->lat.set = bit;
        }
    }
}
9d003b2c:	8fbf0024 	lw	ra,36(sp)
9d003b30:	8fb10020 	lw	s1,32(sp)
9d003b34:	8fb0001c 	lw	s0,28(sp)
9d003b38:	03e00008 	jr	ra
9d003b3c:	27bd0028 	addiu	sp,sp,40
#endif

    } else {
        //* Determine if this is an output compare pin. If so,
        //* we need to make sure PWM output is off.
        timer = digitalPinToTimerOC(pin);
9d003b40:	2463bd34 	addiu	v1,v1,-17100
9d003b44:	00431021 	addu	v0,v0,v1
9d003b48:	90440000 	lbu	a0,0(v0)
9d003b4c:	3084000f 	andi	a0,a0,0xf
        if (timer != NOT_ON_TIMER)
9d003b50:	14800009 	bnez	a0,9d003b78 <digitalWrite+0x170>
9d003b54:	00000000 	nop
        {
            turnOffPWM(timer);
        }

        //* Set the pin state
        if (val == LOW)
9d003b58:	10a0000b 	beqz	a1,9d003b88 <digitalWrite+0x180>
9d003b5c:	00000000 	nop
        else
        {
            iop->lat.set = bit;
        }
    }
}
9d003b60:	8fbf0024 	lw	ra,36(sp)
        {
            iop->lat.clr = bit;
        }
        else
        {
            iop->lat.set = bit;
9d003b64:	ae110028 	sw	s1,40(s0)
        }
    }
}
9d003b68:	8fb10020 	lw	s1,32(sp)
9d003b6c:	8fb0001c 	lw	s0,28(sp)
9d003b70:	03e00008 	jr	ra
9d003b74:	27bd0028 	addiu	sp,sp,40
        //* Determine if this is an output compare pin. If so,
        //* we need to make sure PWM output is off.
        timer = digitalPinToTimerOC(pin);
        if (timer != NOT_ON_TIMER)
        {
            turnOffPWM(timer);
9d003b78:	0f400f79 	jal	9d003de4 <turnOffPWM>
9d003b7c:	afa50010 	sw	a1,16(sp)
9d003b80:	0b400ed6 	j	9d003b58 <digitalWrite+0x150>
9d003b84:	8fa50010 	lw	a1,16(sp)
        }

        //* Set the pin state
        if (val == LOW)
        {
            iop->lat.clr = bit;
9d003b88:	ae110024 	sw	s1,36(s0)
        else
        {
            iop->lat.set = bit;
        }
    }
}
9d003b8c:	0b400ecc 	j	9d003b30 <digitalWrite+0x128>
9d003b90:	8fbf0024 	lw	ra,36(sp)
        } else {
            iop->cnpu.set = bit;
            iop->cnpd.clr = bit;
        }
#else
        cn = digitalPinToCN(pin);
9d003b94:	0b400ec7 	j	9d003b1c <digitalWrite+0x114>
9d003b98:	24020010 	li	v0,16
        if (cn != NOT_CN_PIN) {
            if (val == LOW) {
                CNPUECLR = cn;
            } else {
                CNPUESET = cn;
9d003b9c:	ac6261e8 	sw	v0,25064(v1)
        else
        {
            iop->lat.set = bit;
        }
    }
}
9d003ba0:	0b400ecc 	j	9d003b30 <digitalWrite+0x128>
9d003ba4:	8fbf0024 	lw	ra,36(sp)
        } else {
            iop->cnpu.set = bit;
            iop->cnpd.clr = bit;
        }
#else
        cn = digitalPinToCN(pin);
9d003ba8:	0b400ec7 	j	9d003b1c <digitalWrite+0x114>
9d003bac:	24020008 	li	v0,8

9d003bb0 <digitalRead>:
    }
}

//************************************************************************
int digitalRead(uint8_t pin)
{
9d003bb0:	308400ff 	andi	a0,a0,0xff
uint8_t					port;
int						highLow;

	/* Check if pin number is in valid range.
	*/
	if (pin >= NUM_DIGITAL_PINS_EXTENDED)
9d003bb4:	2c83001f 	sltiu	v1,a0,31
9d003bb8:	10600017 	beqz	v1,9d003c18 <digitalRead+0x68>
9d003bbc:	00001021 	move	v0,zero
		return tmp;
	}
#endif		// OPT_BOARD_DIGITAL_IO

	//* Get the port number for this pin.
	if ((port = digitalPinToPort(pin)) == NOT_A_PIN)
9d003bc0:	3c039d03 	lui	v1,0x9d03
9d003bc4:	2463bcd4 	addiu	v1,v1,-17196
9d003bc8:	00831821 	addu	v1,a0,v1
9d003bcc:	90630000 	lbu	v1,0(v1)
9d003bd0:	10600011 	beqz	v1,9d003c18 <digitalRead+0x68>
9d003bd4:	00000000 	nop
	{
		return LOW;
	}

	//* Obtain pointer to the registers for this io port.
	iop = (p32_ioport *)portRegisters(port);
9d003bd8:	3c029d03 	lui	v0,0x9d03
9d003bdc:	00032880 	sll	a1,v1,0x2
9d003be0:	2442bcb0 	addiu	v0,v0,-17232
9d003be4:	00a21021 	addu	v0,a1,v0

	//* Obtain bit mask for the specific bit for this pin.
	bit = digitalPinToBitMask(pin);
9d003be8:	3c059d03 	lui	a1,0x9d03
9d003bec:	24a5bcf4 	addiu	a1,a1,-17164
9d003bf0:	00042040 	sll	a0,a0,0x1
9d003bf4:	00852021 	addu	a0,a0,a1
	{
		return LOW;
	}

	//* Obtain pointer to the registers for this io port.
	iop = (p32_ioport *)portRegisters(port);
9d003bf8:	8c450000 	lw	a1,0(v0)

	//* Obtain bit mask for the specific bit for this pin.
	bit = digitalPinToBitMask(pin);
9d003bfc:	94820000 	lhu	v0,0(a0)
	// analog input capable pins.
	// Clear the bit in the ANSELx register to ensure that the pin is in
	// digital input mode.
	iop->ansel.clr = bit;
#else
	if (port == _IOPORT_PB)
9d003c00:	24040002 	li	a0,2
9d003c04:	10640006 	beq	v1,a0,9d003c20 <digitalRead+0x70>
9d003c08:	3c03bf81 	lui	v1,0xbf81

	}
#endif	// defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)

	//* Get the pin state.
	if ((iop->port.reg & bit) != 0) 
9d003c0c:	8ca30010 	lw	v1,16(a1)
9d003c10:	00431024 	and	v0,v0,v1

	/* Check if pin number is in valid range.
	*/
	if (pin >= NUM_DIGITAL_PINS_EXTENDED)
	{
		return 0;
9d003c14:	0002102b 	sltu	v0,zero,v0
	{
		highLow	=	LOW;
	}

	return(highLow);
}
9d003c18:	03e00008 	jr	ra
9d003c1c:	00000000 	nop
		//	You have to set the bit in the AD1PCFG for an analog pin to be used as a 
		//	digital input. They come up after reset as analog input with the digital 
		//	input disabled. For the PORTB pins you switch between analog input and 
		//	digital input using AD1PCFG.

		AD1PCFGSET = bit;
9d003c20:	ac629068 	sw	v0,-28568(v1)
9d003c24:	0b400f03 	j	9d003c0c <digitalRead+0x5c>
9d003c28:	00000000 	nop

9d003c2c <analogWrite>:
//*	analogWrite resets timer 2 each time it is called. 
//*	This causes the PWM to fail if it is called repeatedly with a short interval between calls.
//*	This is the suggested fixed version of analogWrite.
//*********************************************************************
void analogWrite(uint8_t pin, int val)
{
9d003c2c:	27bdffe0 	addiu	sp,sp,-32
9d003c30:	afb00014 	sw	s0,20(sp)
9d003c34:	309000ff 	andi	s0,a0,0xff
	uint8_t		pwm_mask;
	p32_oc *	ocp;

	/* Check if pin number is in valid range.
	*/
	if (pin >= NUM_DIGITAL_PINS_EXTENDED)
9d003c38:	2e02001f 	sltiu	v0,s0,31
//*	analogWrite resets timer 2 each time it is called. 
//*	This causes the PWM to fail if it is called repeatedly with a short interval between calls.
//*	This is the suggested fixed version of analogWrite.
//*********************************************************************
void analogWrite(uint8_t pin, int val)
{
9d003c3c:	afb10018 	sw	s1,24(sp)
9d003c40:	afbf001c 	sw	ra,28(sp)
	uint8_t		pwm_mask;
	p32_oc *	ocp;
	/* Check if pin number is in valid range.
	*/
	if (pin >= NUM_DIGITAL_PINS_EXTENDED)
9d003c44:	1040003e 	beqz	v0,9d003d40 <analogWrite+0x114>
9d003c48:	00a08821 	move	s1,a1
	** The value in timer will be the output compare number associated with
	** the pin, or NOT_ON_TIMER if no OC is connected to the pin.
	** The values 0 or >=255 have the side effect of turning off PWM on
	** pins that are PWM capable.
	*/
	timer = digitalPinToTimerOC(pin) >> _BN_TIMER_OC;
9d003c4c:	3c029d03 	lui	v0,0x9d03
9d003c50:	00101840 	sll	v1,s0,0x1
9d003c54:	2442bd34 	addiu	v0,v0,-17100
9d003c58:	00621021 	addu	v0,v1,v0
9d003c5c:	94420000 	lhu	v0,0(v0)
9d003c60:	3042000f 	andi	v0,v0,0xf

	if ((timer == NOT_ON_TIMER) || (val == 0) || (val >= 255))
9d003c64:	10400006 	beqz	v0,9d003c80 <analogWrite+0x54>
9d003c68:	02002021 	move	a0,s0
9d003c6c:	10a00039 	beqz	a1,9d003d54 <analogWrite+0x128>
9d003c70:	28a300ff 	slti	v1,a1,255
9d003c74:	1460000d 	bnez	v1,9d003cac <analogWrite+0x80>
9d003c78:	93838065 	lbu	v1,-32667(gp)
		** it LOW or HIGH depending on the value requested to be
		** written. The digitalWrite function has the side effect
		** of turning off PWM on the pin if it happens to be a
		** PWM capable pin.
		*/
		pinMode(pin, OUTPUT);
9d003c7c:	02002021 	move	a0,s0
9d003c80:	24050001 	li	a1,1
9d003c84:	0f400d9d 	jal	9d003674 <pinMode>
9d003c88:	2a310080 	slti	s1,s1,128

	    if (val < 128)
9d003c8c:	16200033 	bnez	s1,9d003d5c <analogWrite+0x130>
9d003c90:	02002021 	move	a0,s0

		/* Set the duty cycle register for the requested output compare
		*/
		ocp->ocxRs.reg = ((PWM_TIMER_PERIOD*val)/256);
	}
}
9d003c94:	8fbf001c 	lw	ra,28(sp)
9d003c98:	8fb10018 	lw	s1,24(sp)
9d003c9c:	8fb00014 	lw	s0,20(sp)
	    {
	        digitalWrite(pin, LOW);
	    }
	    else
	    {
	        digitalWrite(pin, HIGH);
9d003ca0:	24050001 	li	a1,1
9d003ca4:	0b400e82 	j	9d003a08 <digitalWrite>
9d003ca8:	27bd0020 	addiu	sp,sp,32
	{
		/* It's a PWM capable pin. Timer 2 is used for the time base
		** for analog output, so if no PWM are currently active then
		** Timer 2 needs to be initialized
		*/
	    if (pwm_active == 0)
9d003cac:	14600032 	bnez	v1,9d003d78 <analogWrite+0x14c>
9d003cb0:	2444ffff 	addiu	a0,v0,-1
	    {
			T2CON = TBCON_PS_256;
			TMR2 = 0;
			PR2 = PWM_TIMER_PERIOD;
9d003cb4:	8f848098 	lw	a0,-32616(gp)
9d003cb8:	3c03010b 	lui	v1,0x10b
9d003cbc:	24637e70 	addiu	v1,v1,32368
9d003cc0:	00042242 	srl	a0,a0,0x9
9d003cc4:	00830019 	multu	a0,v1
			T2CONSET = TBCON_ON;
	    }
		/* Generate bit mask for this output compare.
		*/
		pwm_mask = (1 << (timer - (_TIMER_OC1 >> _BN_TIMER_OC)));
9d003cc8:	24050001 	li	a1,1
9d003ccc:	2444ffff 	addiu	a0,v0,-1
9d003cd0:	00852004 	sllv	a0,a1,a0
		** NOTE: as of 11/15/2011 All existing PIC32 devices
		** (PIC32MX1XX/2XX/3XX/4XX/5XX/6XX/7XX) have the output compares
		** in consecutive locations. The base address is _OCMP1_BASE_ADDRESS
		** and the distance between their addresses is 0x200.
		*/
		ocp = (p32_oc *)(_OCMP1_BASE_ADDRESS + (0x200 * (timer - (_TIMER_OC1 >> _BN_TIMER_OC))));
9d003cd4:	3c05005f 	lui	a1,0x5f
9d003cd8:	34a5c017 	ori	a1,a1,0xc017
9d003cdc:	00451021 	addu	v0,v0,a1
		** for analog output, so if no PWM are currently active then
		** Timer 2 needs to be initialized
		*/
	    if (pwm_active == 0)
	    {
			T2CON = TBCON_PS_256;
9d003ce0:	24060070 	li	a2,112
9d003ce4:	3c05bf80 	lui	a1,0xbf80
9d003ce8:	aca60800 	sw	a2,2048(a1)
			TMR2 = 0;
9d003cec:	3c05bf80 	lui	a1,0xbf80
9d003cf0:	aca00810 	sw	zero,2064(a1)
			PR2 = PWM_TIMER_PERIOD;
9d003cf4:	3c05bf80 	lui	a1,0xbf80
			T2CONSET = TBCON_ON;
9d003cf8:	34068000 	li	a2,0x8000
	    }

		/* Generate bit mask for this output compare.
		*/
		pwm_mask = (1 << (timer - (_TIMER_OC1 >> _BN_TIMER_OC)));
9d003cfc:	308400ff 	andi	a0,a0,0xff
		** NOTE: as of 11/15/2011 All existing PIC32 devices
		** (PIC32MX1XX/2XX/3XX/4XX/5XX/6XX/7XX) have the output compares
		** in consecutive locations. The base address is _OCMP1_BASE_ADDRESS
		** and the distance between their addresses is 0x200.
		*/
		ocp = (p32_oc *)(_OCMP1_BASE_ADDRESS + (0x200 * (timer - (_TIMER_OC1 >> _BN_TIMER_OC))));
9d003d00:	00021240 	sll	v0,v0,0x9
		*/
	    if (pwm_active == 0)
	    {
			T2CON = TBCON_PS_256;
			TMR2 = 0;
			PR2 = PWM_TIMER_PERIOD;
9d003d04:	00001810 	mfhi	v1
9d003d08:	aca30820 	sw	v1,2080(a1)
			T2CONSET = TBCON_ON;
9d003d0c:	3c05bf80 	lui	a1,0xbf80
9d003d10:	aca60808 	sw	a2,2056(a1)
			** the output compare to the pin.
			*/
			pps = ppsOutputRegister(timerOCtoDigitalPin(timer));
			*pps = ppsOutputSelect(timerOCtoOutputSelect(timer));
#endif
	        ocp->ocxR.reg   = ((PWM_TIMER_PERIOD*val)/256);
9d003d14:	70718802 	mul	s1,v1,s1
			ocp->ocxCon.reg = OCCON_SRC_TIMER2 | OCCON_PWM_FAULT_DISABLE;
			ocp->ocxCon.set = OCCON_ON;

	        pwm_active |= pwm_mask;
9d003d18:	93838065 	lbu	v1,-32667(gp)
9d003d1c:	00832025 	or	a0,a0,v1
			*/
			pps = ppsOutputRegister(timerOCtoDigitalPin(timer));
			*pps = ppsOutputSelect(timerOCtoOutputSelect(timer));
#endif
	        ocp->ocxR.reg   = ((PWM_TIMER_PERIOD*val)/256);
			ocp->ocxCon.reg = OCCON_SRC_TIMER2 | OCCON_PWM_FAULT_DISABLE;
9d003d20:	24030006 	li	v1,6
			** the output compare to the pin.
			*/
			pps = ppsOutputRegister(timerOCtoDigitalPin(timer));
			*pps = ppsOutputSelect(timerOCtoOutputSelect(timer));
#endif
	        ocp->ocxR.reg   = ((PWM_TIMER_PERIOD*val)/256);
9d003d24:	00118a02 	srl	s1,s1,0x8
9d003d28:	ac510010 	sw	s1,16(v0)
			ocp->ocxCon.reg = OCCON_SRC_TIMER2 | OCCON_PWM_FAULT_DISABLE;
9d003d2c:	ac430000 	sw	v1,0(v0)
			ocp->ocxCon.set = OCCON_ON;
9d003d30:	34038000 	li	v1,0x8000
9d003d34:	ac430008 	sw	v1,8(v0)

	        pwm_active |= pwm_mask;
9d003d38:	a3848065 	sb	a0,-32667(gp)
	    }

		/* Set the duty cycle register for the requested output compare
		*/
		ocp->ocxRs.reg = ((PWM_TIMER_PERIOD*val)/256);
9d003d3c:	ac510020 	sw	s1,32(v0)
	}
}
9d003d40:	8fbf001c 	lw	ra,28(sp)
9d003d44:	8fb10018 	lw	s1,24(sp)
9d003d48:	8fb00014 	lw	s0,20(sp)
9d003d4c:	03e00008 	jr	ra
9d003d50:	27bd0020 	addiu	sp,sp,32
		** it LOW or HIGH depending on the value requested to be
		** written. The digitalWrite function has the side effect
		** of turning off PWM on the pin if it happens to be a
		** PWM capable pin.
		*/
		pinMode(pin, OUTPUT);
9d003d54:	0f400d9d 	jal	9d003674 <pinMode>
9d003d58:	24050001 	li	a1,1

	    if (val < 128)
	    {
	        digitalWrite(pin, LOW);
9d003d5c:	02002021 	move	a0,s0

		/* Set the duty cycle register for the requested output compare
		*/
		ocp->ocxRs.reg = ((PWM_TIMER_PERIOD*val)/256);
	}
}
9d003d60:	8fbf001c 	lw	ra,28(sp)
9d003d64:	8fb10018 	lw	s1,24(sp)
9d003d68:	8fb00014 	lw	s0,20(sp)
		*/
		pinMode(pin, OUTPUT);

	    if (val < 128)
	    {
	        digitalWrite(pin, LOW);
9d003d6c:	00002821 	move	a1,zero
	    }
	    else
	    {
	        digitalWrite(pin, HIGH);
9d003d70:	0b400e82 	j	9d003a08 <digitalWrite>
9d003d74:	27bd0020 	addiu	sp,sp,32
			T2CONSET = TBCON_ON;
	    }

		/* Generate bit mask for this output compare.
		*/
		pwm_mask = (1 << (timer - (_TIMER_OC1 >> _BN_TIMER_OC)));
9d003d78:	24050001 	li	a1,1
9d003d7c:	00852004 	sllv	a0,a1,a0
		** NOTE: as of 11/15/2011 All existing PIC32 devices
		** (PIC32MX1XX/2XX/3XX/4XX/5XX/6XX/7XX) have the output compares
		** in consecutive locations. The base address is _OCMP1_BASE_ADDRESS
		** and the distance between their addresses is 0x200.
		*/
		ocp = (p32_oc *)(_OCMP1_BASE_ADDRESS + (0x200 * (timer - (_TIMER_OC1 >> _BN_TIMER_OC))));
9d003d80:	3c05005f 	lui	a1,0x5f
			T2CONSET = TBCON_ON;
	    }

		/* Generate bit mask for this output compare.
		*/
		pwm_mask = (1 << (timer - (_TIMER_OC1 >> _BN_TIMER_OC)));
9d003d84:	308400ff 	andi	a0,a0,0xff
		** NOTE: as of 11/15/2011 All existing PIC32 devices
		** (PIC32MX1XX/2XX/3XX/4XX/5XX/6XX/7XX) have the output compares
		** in consecutive locations. The base address is _OCMP1_BASE_ADDRESS
		** and the distance between their addresses is 0x200.
		*/
		ocp = (p32_oc *)(_OCMP1_BASE_ADDRESS + (0x200 * (timer - (_TIMER_OC1 >> _BN_TIMER_OC))));
9d003d88:	34a5c017 	ori	a1,a1,0xc017
9d003d8c:	00451021 	addu	v0,v0,a1

		/* If the requested PWM isn't active, init its output compare. Enabling
		** the output compare takes over control of pin direction and forces the
		** pin to be an output.
		*/
		if ((pwm_active & pwm_mask) == 0) 
9d003d90:	00831824 	and	v1,a0,v1
9d003d94:	1060000c 	beqz	v1,9d003dc8 <analogWrite+0x19c>
9d003d98:	00021240 	sll	v0,v0,0x9
9d003d9c:	8f848098 	lw	a0,-32616(gp)
9d003da0:	3c03010b 	lui	v1,0x10b
9d003da4:	24637e70 	addiu	v1,v1,32368
9d003da8:	00042242 	srl	a0,a0,0x9
9d003dac:	00830019 	multu	a0,v1
9d003db0:	00001810 	mfhi	v1
9d003db4:	72238802 	mul	s1,s1,v1
9d003db8:	00118a02 	srl	s1,s1,0x8
	        pwm_active |= pwm_mask;
	    }

		/* Set the duty cycle register for the requested output compare
		*/
		ocp->ocxRs.reg = ((PWM_TIMER_PERIOD*val)/256);
9d003dbc:	ac510020 	sw	s1,32(v0)
	}
}
9d003dc0:	0b400f51 	j	9d003d44 <analogWrite+0x118>
9d003dc4:	8fbf001c 	lw	ra,28(sp)
		/* If the requested PWM isn't active, init its output compare. Enabling
		** the output compare takes over control of pin direction and forces the
		** pin to be an output.
		*/
		if ((pwm_active & pwm_mask) == 0) 
9d003dc8:	8f858098 	lw	a1,-32616(gp)
9d003dcc:	3c030001 	lui	v1,0x1
9d003dd0:	3463ea00 	ori	v1,v1,0xea00
9d003dd4:	00a3001b 	divu	zero,a1,v1
9d003dd8:	006001f4 	teq	v1,zero,0x7
9d003ddc:	0b400f45 	j	9d003d14 <analogWrite+0xe8>
9d003de0:	00001812 	mflo	v1

9d003de4 <turnOffPWM>:
}
//************************************************************************
void turnOffPWM(uint8_t timer)
{
9d003de4:	308400ff 	andi	a0,a0,0xff
	*/
	ocp = (p32_oc *)(_OCMP1_BASE_ADDRESS + (0x200 * (timer - (_TIMER_OC1 >> _BN_TIMER_OC))));
	ocp->ocxCon.clr = OCCON_ON;

	// Turn off the bit saying that this PWM is active.
	pwm_active &= ~(1 << (timer - (_TIMER_OC1 >> _BN_TIMER_OC)));
9d003de8:	2482ffff 	addiu	v0,a0,-1
9d003dec:	24030001 	li	v1,1
9d003df0:	93858065 	lbu	a1,-32667(gp)
9d003df4:	00431004 	sllv	v0,v1,v0
{
	p32_oc *	ocp;

	/* Disable the output compare.
	*/
	ocp = (p32_oc *)(_OCMP1_BASE_ADDRESS + (0x200 * (timer - (_TIMER_OC1 >> _BN_TIMER_OC))));
9d003df8:	3c03005f 	lui	v1,0x5f
9d003dfc:	3463c017 	ori	v1,v1,0xc017
9d003e00:	00832021 	addu	a0,a0,v1
	ocp->ocxCon.clr = OCCON_ON;

	// Turn off the bit saying that this PWM is active.
	pwm_active &= ~(1 << (timer - (_TIMER_OC1 >> _BN_TIMER_OC)));
9d003e04:	00021027 	nor	v0,zero,v0
{
	p32_oc *	ocp;

	/* Disable the output compare.
	*/
	ocp = (p32_oc *)(_OCMP1_BASE_ADDRESS + (0x200 * (timer - (_TIMER_OC1 >> _BN_TIMER_OC))));
9d003e08:	00042240 	sll	a0,a0,0x9
	ocp->ocxCon.clr = OCCON_ON;
9d003e0c:	34038000 	li	v1,0x8000

	// Turn off the bit saying that this PWM is active.
	pwm_active &= ~(1 << (timer - (_TIMER_OC1 >> _BN_TIMER_OC)));
9d003e10:	00451024 	and	v0,v0,a1
	p32_oc *	ocp;

	/* Disable the output compare.
	*/
	ocp = (p32_oc *)(_OCMP1_BASE_ADDRESS + (0x200 * (timer - (_TIMER_OC1 >> _BN_TIMER_OC))));
	ocp->ocxCon.clr = OCCON_ON;
9d003e14:	ac830004 	sw	v1,4(a0)

	// Turn off the bit saying that this PWM is active.
	pwm_active &= ~(1 << (timer - (_TIMER_OC1 >> _BN_TIMER_OC)));

	// If no PWM are active, turn off the timer.
	if (pwm_active == 0)
9d003e18:	14400003 	bnez	v0,9d003e28 <turnOffPWM+0x44>
9d003e1c:	a3828065 	sb	v0,-32667(gp)
	{
    	T2CONCLR = TBCON_ON;
9d003e20:	3c02bf80 	lui	v0,0xbf80
9d003e24:	ac430804 	sw	v1,2052(v0)
9d003e28:	03e00008 	jr	ra
9d003e2c:	00000000 	nop

9d003e30 <millisecondCoreTimerService>:
*/
uint32_t millisecondCoreTimerService(uint32_t curTime)
{
    static int nextInt = 0;
    uint32_t relWait = 0;
    uint32_t relTime = curTime - nextInt;
9d003e30:	8f858074 	lw	a1,-32652(gp)
    uint32_t millisLocal = gTimer0_millis;  // defeat volatility
9d003e34:	8f838068 	lw	v1,-32664(gp)
**
*/
uint32_t millisecondCoreTimerService(uint32_t curTime)
{
    static int nextInt = 0;
    uint32_t relWait = 0;
9d003e38:	00001021 	move	v0,zero
    uint32_t relTime = curTime - nextInt;
9d003e3c:	00852023 	subu	a0,a0,a1

    // catch-up up to current time; we may have fallen behind due to interrupts being diabled.
    while(relWait <= relTime)
    {
        millisLocal++;                      // add a ms to our time
        relWait += CORE_TICK_RATE;          // add a ms to our next ISR time
9d003e40:	34079c40 	li	a3,0x9c40
9d003e44:	00471021 	addu	v0,v0,a3
    uint32_t relWait = 0;
    uint32_t relTime = curTime - nextInt;
    uint32_t millisLocal = gTimer0_millis;  // defeat volatility

    // catch-up up to current time; we may have fallen behind due to interrupts being diabled.
    while(relWait <= relTime)
9d003e48:	0082302b 	sltu	a2,a0,v0
9d003e4c:	10c0fffd 	beqz	a2,9d003e44 <millisecondCoreTimerService+0x14>
9d003e50:	24630001 	addiu	v1,v1,1
        millisLocal++;                      // add a ms to our time
        relWait += CORE_TICK_RATE;          // add a ms to our next ISR time
     }

    // set when we want to be called again
    nextInt += relWait;                     // calculate the absolute interrupt time we want.
9d003e54:	00451021 	addu	v0,v0,a1
    // we want to sync gCore_timer_last_val with the last millisecond "count" value
    // curTime may not be exactly on a millisecond boundary, but we know where that is
    // we know nextInt is our next millisecond boundary, so less 1 CORE_TICK_RATE will be our last one
    // gCore_timer_last_val = curTime;         // This is the original bogus code
    gCore_timer_last_val =  nextInt - CORE_TICK_RATE;
9d003e58:	34049c40 	li	a0,0x9c40
9d003e5c:	00442023 	subu	a0,v0,a0
9d003e60:	af84806c 	sw	a0,-32660(gp)
        millisLocal++;                      // add a ms to our time
        relWait += CORE_TICK_RATE;          // add a ms to our next ISR time
     }

    // set when we want to be called again
    nextInt += relWait;                     // calculate the absolute interrupt time we want.
9d003e64:	af828074 	sw	v0,-32652(gp)
    // we know nextInt is our next millisecond boundary, so less 1 CORE_TICK_RATE will be our last one
    // gCore_timer_last_val = curTime;         // This is the original bogus code
    gCore_timer_last_val =  nextInt - CORE_TICK_RATE;

    // update the global millisecond counter.
    gTimer0_millis = millisLocal;           // Total number of ms
9d003e68:	af838068 	sw	v1,-32664(gp)

    return(nextInt);
}
9d003e6c:	03e00008 	jr	ra
9d003e70:	00000000 	nop

9d003e74 <CoreTimerHandler>:
**      each service's logical compare values. And then the next and soonest logical compare value is searched for and set as
**      the real compare value to be interrupted to notify the Serivces when count hits that value.
**
*/
void __attribute__((interrupt(),nomips16)) CoreTimerHandler(void)
{
9d003e74:	415de800 	rdpgpr	sp,sp
9d003e78:	401b7000 	mfc0	k1,c0_epc
9d003e7c:	401a6002 	mfc0	k0,c0_srsctl
9d003e80:	27bdff58 	addiu	sp,sp,-168
9d003e84:	afbb00a4 	sw	k1,164(sp)
9d003e88:	401b6000 	mfc0	k1,c0_status
9d003e8c:	afba00a0 	sw	k0,160(sp)
9d003e90:	401a6800 	mfc0	k0,c0_cause
9d003e94:	001ad282 	srl	k0,k0,0xa
9d003e98:	afbb009c 	sw	k1,156(sp)
9d003e9c:	7f5b7a84 	ins	k1,k0,0xa,0x6
9d003ea0:	7c1b2044 	ins	k1,zero,0x1,0x4
9d003ea4:	409b6000 	mtc0	k1,c0_status
9d003ea8:	afa3002c 	sw	v1,44(sp)
9d003eac:	8fa300a0 	lw	v1,160(sp)
9d003eb0:	3063000f 	andi	v1,v1,0xf
9d003eb4:	1460001a 	bnez	v1,9d003f20 <CoreTimerHandler+0xac>
9d003eb8:	afa20028 	sw	v0,40(sp)
9d003ebc:	afbf008c 	sw	ra,140(sp)
9d003ec0:	afbe0088 	sw	s8,136(sp)
9d003ec4:	afb90084 	sw	t9,132(sp)
9d003ec8:	afb80080 	sw	t8,128(sp)
9d003ecc:	afb7007c 	sw	s7,124(sp)
9d003ed0:	afb60078 	sw	s6,120(sp)
9d003ed4:	afb50074 	sw	s5,116(sp)
9d003ed8:	afb40070 	sw	s4,112(sp)
9d003edc:	afb3006c 	sw	s3,108(sp)
9d003ee0:	afb20068 	sw	s2,104(sp)
9d003ee4:	afb10064 	sw	s1,100(sp)
9d003ee8:	afb00060 	sw	s0,96(sp)
9d003eec:	afaf005c 	sw	t7,92(sp)
9d003ef0:	afae0058 	sw	t6,88(sp)
9d003ef4:	afad0054 	sw	t5,84(sp)
9d003ef8:	afac0050 	sw	t4,80(sp)
9d003efc:	afab004c 	sw	t3,76(sp)
9d003f00:	afaa0048 	sw	t2,72(sp)
9d003f04:	afa90044 	sw	t1,68(sp)
9d003f08:	afa80040 	sw	t0,64(sp)
9d003f0c:	afa7003c 	sw	a3,60(sp)
9d003f10:	afa60038 	sw	a2,56(sp)
9d003f14:	afa50034 	sw	a1,52(sp)
9d003f18:	afa40030 	sw	a0,48(sp)
9d003f1c:	afa10024 	sw	at,36(sp)
9d003f20:	00001012 	mflo	v0
9d003f24:	afa20094 	sw	v0,148(sp)
9d003f28:	00001810 	mfhi	v1
9d003f2c:	afa30090 	sw	v1,144(sp)

    // we know that count >= compare, otherwise we would not have been interrupted
    // we also know that count and compare >= gLastBaseCount as this was our last count value.
    // get our current time; this will establish our next base
    read_count(curTime); 
9d003f30:	40134800 	mfc0	s3,c0_count
    relCurTime = curTime - gLastBaseCount;
9d003f34:	8f9e8070 	lw	s8,-32656(gp)
9d003f38:	3c10a000 	lui	s0,0xa000
        {
            // if the serivce exists
            if(gCoreTimerInfo[i].serivce != NULL)
            {
                // if their time has come up
                relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
9d003f3c:	3c05a000 	lui	a1,0xa000
    // we know that count >= compare, otherwise we would not have been interrupted
    // we also know that count and compare >= gLastBaseCount as this was our last count value.

    // get our current time; this will establish our next base
    read_count(curTime); 
    relCurTime = curTime - gLastBaseCount;
9d003f40:	027ef023 	subu	s8,s3,s8

    // we know that count >= compare, otherwise we would not have been interrupted
    // we also know that count and compare >= gLastBaseCount as this was our last count value.

    // get our current time; this will establish our next base
    read_count(curTime); 
9d003f44:	02603021 	move	a2,s3
9d003f48:	2610000c 	addiu	s0,s0,12
9d003f4c:	3c12bf88 	lui	s2,0xbf88
        {
            // if the serivce exists
            if(gCoreTimerInfo[i].serivce != NULL)
            {
                // if their time has come up
                relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
9d003f50:	24a50008 	addiu	a1,a1,8
    {
        // make sure we find the lowest int to set
        relNextInt = 0xFFFFFFFF;

        // check to see who all we need to call
        for(i=0; i<MaxNbrOfCoreTimerServices; i++)
9d003f54:	24030003 	li	v1,3
        // we need to apply our base to convert from relative values to an absolute time.
        compare = relNextInt + gLastBaseCount;
        write_comp(compare); 

        // clear the CT flag
        mCTClearIntFlag();
9d003f58:	24110001 	li	s1,1
    // we know that count >= compare, otherwise we would not have been interrupted
    // we also know that count and compare >= gLastBaseCount as this was our last count value.

    // get our current time; this will establish our next base
    read_count(curTime); 
    relCurTime = curTime - gLastBaseCount;
9d003f5c:	0200b021 	move	s6,s0
    {
        // make sure we find the lowest int to set
        relNextInt = 0xFFFFFFFF;

        // check to see who all we need to call
        for(i=0; i<MaxNbrOfCoreTimerServices; i++)
9d003f60:	0000a021 	move	s4,zero
    nextBase = curTime;

    do
    {
        // make sure we find the lowest int to set
        relNextInt = 0xFFFFFFFF;
9d003f64:	2415ffff 	li	s5,-1

        // check to see who all we need to call
        for(i=0; i<MaxNbrOfCoreTimerServices; i++)
        {
            // if the serivce exists
            if(gCoreTimerInfo[i].serivce != NULL)
9d003f68:	8ec20000 	lw	v0,0(s6)
            {
                // if their time has come up
                relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
9d003f6c:	0014b8c0 	sll	s7,s4,0x3
9d003f70:	02e5b821 	addu	s7,s7,a1
    {
        // make sure we find the lowest int to set
        relNextInt = 0xFFFFFFFF;

        // check to see who all we need to call
        for(i=0; i<MaxNbrOfCoreTimerServices; i++)
9d003f74:	26940001 	addiu	s4,s4,1
        {
            // if the serivce exists
            if(gCoreTimerInfo[i].serivce != NULL)
9d003f78:	10400009 	beqz	v0,9d003fa0 <CoreTimerHandler+0x12c>
9d003f7c:	26d60008 	addiu	s6,s6,8
            {
                // if their time has come up
                relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
9d003f80:	8ee70000 	lw	a3,0(s7)
9d003f84:	8f848070 	lw	a0,-32656(gp)
9d003f88:	00e42023 	subu	a0,a3,a0
                if(relInt <= relCurTime)
9d003f8c:	03c4382b 	sltu	a3,s8,a0
9d003f90:	50e0003d 	beqzl	a3,9d004088 <CoreTimerHandler+0x214>
9d003f94:	00c02021 	move	a0,a2
                    relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
                }

                // see if this is the next interrupt we want to set
                // we are looking for the closest/lowest int to set.
                if(relInt < relNextInt)
9d003f98:	0095102b 	sltu	v0,a0,s5
9d003f9c:	0082a80b 	movn	s5,a0,v0
    {
        // make sure we find the lowest int to set
        relNextInt = 0xFFFFFFFF;

        // check to see who all we need to call
        for(i=0; i<MaxNbrOfCoreTimerServices; i++)
9d003fa0:	5683fff2 	bnel	s4,v1,9d003f6c <CoreTimerHandler+0xf8>
9d003fa4:	8ec20000 	lw	v0,0(s6)
        // other service may cause the compare value to be set for an earlier time; but we always know there will be a compare time
        // to set, so we know that relNextInt has a value other than 0xFFFFFFFF in it.

        // Go ahead and set the compare register to the next interrupt we want.
        // we need to apply our base to convert from relative values to an absolute time.
        compare = relNextInt + gLastBaseCount;
9d003fa8:	8f828070 	lw	v0,-32656(gp)
9d003fac:	02a21021 	addu	v0,s5,v0
        write_comp(compare); 
9d003fb0:	40825800 	mtc0	v0,c0_compare

        // clear the CT flag
        mCTClearIntFlag();
9d003fb4:	ae511034 	sw	s1,4148(s2)

        // read the count after the CT flag has been set so we can make sure count has not passed compare
        // during our processing of this int
        read_count(curTime); 
9d003fb8:	40064800 	mfc0	a2,c0_count

        // get the relative time so we can operate in the linear portion of our uint32.
        relCurTime = curTime - gLastBaseCount;
9d003fbc:	8f9e8070 	lw	s8,-32656(gp)
9d003fc0:	00def023 	subu	s8,a2,s8

        // if the current time has passed our interrupt time, then we basically hit the interrupt again
        // so we probabaly missed the CT flag being set and we need to reprocess this interrupt and find the next one to set.
    } while(relNextInt <= relCurTime);
9d003fc4:	03d5a82b 	sltu	s5,s8,s5
9d003fc8:	52a0ffe5 	beqzl	s5,9d003f60 <CoreTimerHandler+0xec>
9d003fcc:	0200b021 	move	s6,s0
    // otherwise the next interrupt time (compare time) is after the current time and CT will catch it when count == compare.
    // we can safely exit the ISR.

    // but first we must set our new base so the next time we come into this routine we
    // have a valid lower base to shift our times to for comparisons.
    gLastBaseCount = nextBase;
9d003fd0:	af938070 	sw	s3,-32656(gp)
}
9d003fd4:	8fa20094 	lw	v0,148(sp)
9d003fd8:	8fa30090 	lw	v1,144(sp)
9d003fdc:	00400013 	mtlo	v0
9d003fe0:	8fa200a0 	lw	v0,160(sp)
9d003fe4:	3042000f 	andi	v0,v0,0xf
9d003fe8:	1440001c 	bnez	v0,9d00405c <CoreTimerHandler+0x1e8>
9d003fec:	00600011 	mthi	v1
9d003ff0:	8fbf008c 	lw	ra,140(sp)
9d003ff4:	8fbe0088 	lw	s8,136(sp)
9d003ff8:	8fb90084 	lw	t9,132(sp)
9d003ffc:	8fb80080 	lw	t8,128(sp)
9d004000:	8fb7007c 	lw	s7,124(sp)
9d004004:	8fb60078 	lw	s6,120(sp)
9d004008:	8fb50074 	lw	s5,116(sp)
9d00400c:	8fb40070 	lw	s4,112(sp)
9d004010:	8fb3006c 	lw	s3,108(sp)
9d004014:	8fb20068 	lw	s2,104(sp)
9d004018:	8fb10064 	lw	s1,100(sp)
9d00401c:	8fb00060 	lw	s0,96(sp)
9d004020:	8faf005c 	lw	t7,92(sp)
9d004024:	8fae0058 	lw	t6,88(sp)
9d004028:	8fad0054 	lw	t5,84(sp)
9d00402c:	8fac0050 	lw	t4,80(sp)
9d004030:	8fab004c 	lw	t3,76(sp)
9d004034:	8faa0048 	lw	t2,72(sp)
9d004038:	8fa90044 	lw	t1,68(sp)
9d00403c:	8fa80040 	lw	t0,64(sp)
9d004040:	8fa7003c 	lw	a3,60(sp)
9d004044:	8fa60038 	lw	a2,56(sp)
9d004048:	8fa50034 	lw	a1,52(sp)
9d00404c:	8fa40030 	lw	a0,48(sp)
9d004050:	8fa3002c 	lw	v1,44(sp)
9d004054:	8fa20028 	lw	v0,40(sp)
9d004058:	8fa10024 	lw	at,36(sp)
9d00405c:	41606000 	di
9d004060:	000000c0 	ehb
9d004064:	8fba00a4 	lw	k0,164(sp)
9d004068:	8fbb009c 	lw	k1,156(sp)
9d00406c:	409a7000 	mtc0	k0,c0_epc
9d004070:	8fba00a0 	lw	k0,160(sp)
9d004074:	27bd00a8 	addiu	sp,sp,168
9d004078:	409a6002 	mtc0	k0,c0_srsctl
9d00407c:	41dde800 	wrpgpr	sp,sp
9d004080:	409b6000 	mtc0	k1,c0_status
9d004084:	42000018 	eret
                // if their time has come up
                relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
                if(relInt <= relCurTime)
                {
                    // call their routine to get their next interrupt time
                    gCoreTimerInfo[i].nextInt = gCoreTimerInfo[i].serivce(curTime);
9d004088:	afa30018 	sw	v1,24(sp)
9d00408c:	afa50014 	sw	a1,20(sp)
9d004090:	0040f809 	jalr	v0
9d004094:	afa60010 	sw	a2,16(sp)
9d004098:	aee20000 	sw	v0,0(s7)

                    // recalculate the relative time of thier next int
                    // so we can see if this is the next int we need to set
                    relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
9d00409c:	8ee40000 	lw	a0,0(s7)
9d0040a0:	8f828070 	lw	v0,-32656(gp)
9d0040a4:	8fa60010 	lw	a2,16(sp)
9d0040a8:	8fa50014 	lw	a1,20(sp)
9d0040ac:	00822023 	subu	a0,a0,v0
                }

                // see if this is the next interrupt we want to set
                // we are looking for the closest/lowest int to set.
                if(relInt < relNextInt)
9d0040b0:	0095102b 	sltu	v0,a0,s5
                    // call their routine to get their next interrupt time
                    gCoreTimerInfo[i].nextInt = gCoreTimerInfo[i].serivce(curTime);

                    // recalculate the relative time of thier next int
                    // so we can see if this is the next int we need to set
                    relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
9d0040b4:	8fa30018 	lw	v1,24(sp)
                }

                // see if this is the next interrupt we want to set
                // we are looking for the closest/lowest int to set.
                if(relInt < relNextInt)
9d0040b8:	0b400fe8 	j	9d003fa0 <CoreTimerHandler+0x12c>
9d0040bc:	0082a80b 	movn	s5,a0,v0

9d0040c0 <millis>:
uint8_t ppsGlobalLock = false;

//************************************************************************
unsigned long millis()
{
	return(gTimer0_millis);
9d0040c0:	8f828068 	lw	v0,-32664(gp)
}
9d0040c4:	03e00008 	jr	ra
9d0040c8:	00000000 	nop

9d0040cc <delay>:
}

//************************************************************************
// Delay for a given number of milliseconds.
void delay(unsigned long ms)
{
9d0040cc:	27bdffe0 	addiu	sp,sp,-32
9d0040d0:	afb10018 	sw	s1,24(sp)
unsigned long	startMillis;

	startMillis	=	gTimer0_millis;
9d0040d4:	8f918068 	lw	s1,-32664(gp)
	while ((gTimer0_millis - startMillis) < ms)
9d0040d8:	8f828068 	lw	v0,-32664(gp)
}

//************************************************************************
// Delay for a given number of milliseconds.
void delay(unsigned long ms)
{
9d0040dc:	afb00014 	sw	s0,20(sp)
9d0040e0:	afbf001c 	sw	ra,28(sp)
unsigned long	startMillis;
	startMillis	=	gTimer0_millis;
	while ((gTimer0_millis - startMillis) < ms)
9d0040e4:	00511023 	subu	v0,v0,s1
9d0040e8:	0044102b 	sltu	v0,v0,a0
9d0040ec:	10400008 	beqz	v0,9d004110 <delay+0x44>
9d0040f0:	00808021 	move	s0,a0
	{
		_scheduleTask();
9d0040f4:	0f40135a 	jal	9d004d68 <_scheduleTask>
9d0040f8:	00000000 	nop
void delay(unsigned long ms)
{
unsigned long	startMillis;

	startMillis	=	gTimer0_millis;
	while ((gTimer0_millis - startMillis) < ms)
9d0040fc:	8f828068 	lw	v0,-32664(gp)
9d004100:	00511023 	subu	v0,v0,s1
9d004104:	0050102b 	sltu	v0,v0,s0
9d004108:	1440fffa 	bnez	v0,9d0040f4 <delay+0x28>
9d00410c:	00000000 	nop
	{
		_scheduleTask();
	}
}
9d004110:	8fbf001c 	lw	ra,28(sp)
9d004114:	8fb10018 	lw	s1,24(sp)
9d004118:	8fb00014 	lw	s0,20(sp)
9d00411c:	03e00008 	jr	ra
9d004120:	27bd0020 	addiu	sp,sp,32

9d004124 <init>:
	__PIC32_pbClk	=	SYSTEMConfigPerformance(F_CPU);
#endif
#endif

	// Configure the processor for the proper number of wait states and caching.
	_configSystem(F_CPU);
9d004124:	3c0404c4 	lui	a0,0x4c4
}

//************************************************************************
void init()
{
9d004128:	27bdffe8 	addiu	sp,sp,-24
9d00412c:	afbf0014 	sw	ra,20(sp)
	__PIC32_pbClk	=	SYSTEMConfigPerformance(F_CPU);
#endif
#endif

	// Configure the processor for the proper number of wait states and caching.
	_configSystem(F_CPU);
9d004130:	0f4010c1 	jal	9d004304 <_configSystem>
9d004134:	3484b400 	ori	a0,a0,0xb400

	// Enable multi-vector interrupts
	_enableMultiVectorInterrupts();
9d004138:	0f4010e2 	jal	9d004388 <_enableMultiVectorInterrupts>
9d00413c:	00000000 	nop

	// Initialize the core timer for use to maintain the system timer tick.
	_initCoreTimer(CORE_TICK_RATE);
9d004140:	0f4010eb 	jal	9d0043ac <_initCoreTimer>
9d004144:	34049c40 	li	a0,0x9c40

    initIntVector();
9d004148:	0f401075 	jal	9d0041d4 <initIntVector>
9d00414c:	00000000 	nop

	setIntPriority(_CORE_TIMER_VECTOR, _CT_IPL_IPC, _CT_SPL_IPC);
9d004150:	00003021 	move	a2,zero
9d004154:	00002021 	move	a0,zero
9d004158:	0f4010a3 	jal	9d00428c <setIntPriority>
9d00415c:	24050007 	li	a1,7
	setIntVector(_CORE_TIMER_VECTOR, CoreTimerHandler);
9d004160:	3c059d00 	lui	a1,0x9d00
9d004164:	24a53e74 	addiu	a1,a1,15988
9d004168:	0f40108a 	jal	9d004228 <setIntVector>
9d00416c:	00002021 	move	a0,zero
	setIntEnable(_CORE_TIMER_IRQ);
9d004170:	0f401095 	jal	9d004254 <setIntEnable>
9d004174:	00002021 	move	a0,zero
	// Save the peripheral bus frequency for later use.
	__PIC32_pbClk = getPeripheralClock();
9d004178:	0f4010ba 	jal	9d0042e8 <getPeripheralClock>
9d00417c:	00000000 	nop

   // allow for debugging, this will stop the core timer when the debugger takes control
    _CP0_BIC_DEBUG(_CP0_DEBUG_COUNTDM_MASK); 
9d004180:	3c030200 	lui	v1,0x200
	setIntPriority(_CORE_TIMER_VECTOR, _CT_IPL_IPC, _CT_SPL_IPC);
	setIntVector(_CORE_TIMER_VECTOR, CoreTimerHandler);
	setIntEnable(_CORE_TIMER_IRQ);

	// Save the peripheral bus frequency for later use.
	__PIC32_pbClk = getPeripheralClock();
9d004184:	af828098 	sw	v0,-32616(gp)

   // allow for debugging, this will stop the core timer when the debugger takes control
    _CP0_BIC_DEBUG(_CP0_DEBUG_COUNTDM_MASK); 
9d004188:	4002b800 	mfc0	v0,c0_debug
9d00418c:	00031827 	nor	v1,zero,v1
9d004190:	00431824 	and	v1,v0,v1
9d004194:	4083b800 	mtc0	v1,c0_debug
9d004198:	000000c0 	ehb
	RtccSetTimeDate(0x10073000, 0x10101701);
	// please note that the rsvd field has to be 0 in the time field!
#endif
#endif

	delay(50);
9d00419c:	0f401033 	jal	9d0040cc <delay>
9d0041a0:	24040032 	li	a0,50
#if defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)
	CFGCONbits.JTAGEN = 0;
	//CFGCONbits.TDOEN = 0;
	//OSCCONbits.SOSCEN = 0;
#else
	DDPCONbits.JTAGEN	=	0;
9d0041a4:	3c02bf81 	lui	v0,0xbf81
9d0041a8:	8c43f200 	lw	v1,-3584(v0)
9d0041ac:	7c0318c4 	ins	v1,zero,0x3,0x1
9d0041b0:	ac43f200 	sw	v1,-3584(v0)
void	_board_init(void);
	_board_init();
#endif

	//* Initialize the periodic task manager
	_initTaskManager();
9d0041b4:	0f40134d 	jal	9d004d34 <_initTaskManager>
9d0041b8:	00000000 	nop
#if defined(_SER0_BASE)
	p32_uart *	uart;
	uart = (p32_uart *)_SER0_BASE;
	uart->uxMode.clr = (1 << _UARTMODE_ON);
#endif
}
9d0041bc:	8fbf0014 	lw	ra,20(sp)
	//*	Issue #84
	//*	disable the uart so that the pins can be used as general purpose I/O
#if defined(_SER0_BASE)
	p32_uart *	uart;
	uart = (p32_uart *)_SER0_BASE;
	uart->uxMode.clr = (1 << _UARTMODE_ON);
9d0041c0:	34038000 	li	v1,0x8000
9d0041c4:	3c02bf80 	lui	v0,0xbf80
9d0041c8:	ac436804 	sw	v1,26628(v0)
#endif
}
9d0041cc:	03e00008 	jr	ra
9d0041d0:	27bd0018 	addiu	sp,sp,24

9d0041d4 <initIntVector>:
*/
void initIntVector(void)
{
    const IMAGE_HEADER_INFO * pImageHeader = getImageHeaderInfoStructure();
    int i = 0;
    void * pvOrgIntVec = (void *)pImageHeader->pOrgVector0;
9d0041d4:	3c029d01 	lui	v0,0x9d01
9d0041d8:	2442cc78 	addiu	v0,v0,-13192
9d0041dc:	88430043 	lwl	v1,67(v0)
9d0041e0:	8846004b 	lwl	a2,75(v0)
    {
        // If a compiler installed interrupt handler exits, pre-load it
        // and don't fool with the priority
        if(*((uint32_t *) pvOrgIntVec) != 0xFFFFFFFF)
        {
            _isr_primary_install[i] = (isrFunc) pvOrgIntVec;
9d0041e4:	3c08a000 	lui	t0,0xa000
*/
void initIntVector(void)
{
    const IMAGE_HEADER_INFO * pImageHeader = getImageHeaderInfoStructure();
    int i = 0;
    void * pvOrgIntVec = (void *)pImageHeader->pOrgVector0;
9d0041e8:	98430040 	lwr	v1,64(v0)
9d0041ec:	98460048 	lwr	a2,72(v0)

    for(i=0; i<NUM_INT_VECTOR; i++)
    {
        // If a compiler installed interrupt handler exits, pre-load it
        // and don't fool with the priority
        if(*((uint32_t *) pvOrgIntVec) != 0xFFFFFFFF)
9d0041f0:	2409ffff 	li	t1,-1
{
    const IMAGE_HEADER_INFO * pImageHeader = getImageHeaderInfoStructure();
    int i = 0;
    void * pvOrgIntVec = (void *)pImageHeader->pOrgVector0;

    for(i=0; i<NUM_INT_VECTOR; i++)
9d0041f4:	00001021 	move	v0,zero
    {
        // If a compiler installed interrupt handler exits, pre-load it
        // and don't fool with the priority
        if(*((uint32_t *) pvOrgIntVec) != 0xFFFFFFFF)
        {
            _isr_primary_install[i] = (isrFunc) pvOrgIntVec;
9d0041f8:	25080020 	addiu	t0,t0,32
{
    const IMAGE_HEADER_INFO * pImageHeader = getImageHeaderInfoStructure();
    int i = 0;
    void * pvOrgIntVec = (void *)pImageHeader->pOrgVector0;

    for(i=0; i<NUM_INT_VECTOR; i++)
9d0041fc:	24070034 	li	a3,52
    {
        // If a compiler installed interrupt handler exits, pre-load it
        // and don't fool with the priority
        if(*((uint32_t *) pvOrgIntVec) != 0xFFFFFFFF)
9d004200:	8c640000 	lw	a0,0(v1)
        {
            _isr_primary_install[i] = (isrFunc) pvOrgIntVec;
9d004204:	00022880 	sll	a1,v0,0x2
9d004208:	00a82821 	addu	a1,a1,t0

    for(i=0; i<NUM_INT_VECTOR; i++)
    {
        // If a compiler installed interrupt handler exits, pre-load it
        // and don't fool with the priority
        if(*((uint32_t *) pvOrgIntVec) != 0xFFFFFFFF)
9d00420c:	10890002 	beq	a0,t1,9d004218 <initIntVector+0x44>
9d004210:	24420001 	addiu	v0,v0,1
        {
            _isr_primary_install[i] = (isrFunc) pvOrgIntVec;
9d004214:	aca30000 	sw	v1,0(a1)
{
    const IMAGE_HEADER_INFO * pImageHeader = getImageHeaderInfoStructure();
    int i = 0;
    void * pvOrgIntVec = (void *)pImageHeader->pOrgVector0;

    for(i=0; i<NUM_INT_VECTOR; i++)
9d004218:	1447fff9 	bne	v0,a3,9d004200 <initIntVector+0x2c>
9d00421c:	00661821 	addu	v1,v1,a2
9d004220:	03e00008 	jr	ra
9d004224:	00000000 	nop

9d004228 <setIntVector>:
isrFunc setIntVector(int vec, isrFunc func)
{
 //   const IMAGE_HEADER_INFO * pImageHeader = getImageHeaderInfoStructure();
    isrFunc t = 0;

    if (vec < NUM_INT_VECTOR)
9d004228:	28830034 	slti	v1,a0,52
9d00422c:	10600007 	beqz	v1,9d00424c <setIntVector+0x24>
9d004230:	00001021 	move	v0,zero
    {
        t = _isr_primary_install[vec];
9d004234:	3c02a000 	lui	v0,0xa000
9d004238:	24420020 	addiu	v0,v0,32
9d00423c:	00042080 	sll	a0,a0,0x2
9d004240:	00822021 	addu	a0,a0,v0
9d004244:	8c820000 	lw	v0,0(a0)
        _isr_primary_install[vec] = func;       
9d004248:	ac850000 	sw	a1,0(a0)
    }

    return t;
}
9d00424c:	03e00008 	jr	ra
9d004250:	00000000 	nop

9d004254 <setIntEnable>:
uint32_t setIntEnable(int irq)
{
	p32_regset *	iec;
	uint32_t		st;

	iec = ((p32_regset *)&IEC0) + (irq / 32);
9d004254:	28830000 	slti	v1,a0,0
9d004258:	2482001f 	addiu	v0,a0,31
9d00425c:	0083100a 	movz	v0,a0,v1
9d004260:	00021143 	sra	v0,v0,0x5
9d004264:	3c03bf88 	lui	v1,0xbf88
9d004268:	00021100 	sll	v0,v0,0x4
	st = iec->reg;
	iec->set = 1 << (irq % 32);
9d00426c:	24050001 	li	a1,1
uint32_t setIntEnable(int irq)
{
	p32_regset *	iec;
	uint32_t		st;

	iec = ((p32_regset *)&IEC0) + (irq / 32);
9d004270:	24631060 	addiu	v1,v1,4192
9d004274:	00621821 	addu	v1,v1,v0
	st = iec->reg;
	iec->set = 1 << (irq % 32);
9d004278:	00852004 	sllv	a0,a1,a0
{
	p32_regset *	iec;
	uint32_t		st;

	iec = ((p32_regset *)&IEC0) + (irq / 32);
	st = iec->reg;
9d00427c:	8c620000 	lw	v0,0(v1)
	iec->set = 1 << (irq % 32);
9d004280:	ac640008 	sw	a0,8(v1)
	return st;
}
9d004284:	03e00008 	jr	ra
9d004288:	00000000 	nop

9d00428c <setIntPriority>:
	ipc = ((p32_regset *)&IPC0) + (vec / 4);

	/* Compute the number of bit positions to shift to get to the
	** correct position for the priority bits for this vector.
	*/
	bn = 8 * (vec % 4);
9d00428c:	000417c3 	sra	v0,a0,0x1f
9d004290:	00021782 	srl	v0,v0,0x1e
9d004294:	00821821 	addu	v1,a0,v0
	int				bn;

	/* Compute the address of the interrupt priority control register used
	** by this interrupt vector
	*/
	ipc = ((p32_regset *)&IPC0) + (vec / 4);
9d004298:	24870003 	addiu	a3,a0,3
9d00429c:	28880000 	slti	t0,a0,0

	/* Compute the number of bit positions to shift to get to the
	** correct position for the priority bits for this vector.
	*/
	bn = 8 * (vec % 4);
9d0042a0:	30630003 	andi	v1,v1,0x3
	int				bn;

	/* Compute the address of the interrupt priority control register used
	** by this interrupt vector
	*/
	ipc = ((p32_regset *)&IPC0) + (vec / 4);
9d0042a4:	00e8200b 	movn	a0,a3,t0

	/* Compute the number of bit positions to shift to get to the
	** correct position for the priority bits for this vector.
	*/
	bn = 8 * (vec % 4);
9d0042a8:	00621023 	subu	v0,v1,v0
	int				bn;

	/* Compute the address of the interrupt priority control register used
	** by this interrupt vector
	*/
	ipc = ((p32_regset *)&IPC0) + (vec / 4);
9d0042ac:	00042083 	sra	a0,a0,0x2
9d0042b0:	3c03bf88 	lui	v1,0xbf88
9d0042b4:	24631090 	addiu	v1,v1,4240
	bn = 8 * (vec % 4);

	/* Set the interrupt privilege level and sub-privilege level
	*/
	ipc->clr = (0x1F << bn);
	ipc->set = ((ipl << 2) + spl) << bn;
9d0042b8:	00052880 	sll	a1,a1,0x2
	int				bn;

	/* Compute the address of the interrupt priority control register used
	** by this interrupt vector
	*/
	ipc = ((p32_regset *)&IPC0) + (vec / 4);
9d0042bc:	00042100 	sll	a0,a0,0x4
9d0042c0:	00642021 	addu	a0,v1,a0

	/* Compute the number of bit positions to shift to get to the
	** correct position for the priority bits for this vector.
	*/
	bn = 8 * (vec % 4);
9d0042c4:	000210c0 	sll	v0,v0,0x3

	/* Set the interrupt privilege level and sub-privilege level
	*/
	ipc->clr = (0x1F << bn);
	ipc->set = ((ipl << 2) + spl) << bn;
9d0042c8:	00c52821 	addu	a1,a2,a1
	*/
	bn = 8 * (vec % 4);

	/* Set the interrupt privilege level and sub-privilege level
	*/
	ipc->clr = (0x1F << bn);
9d0042cc:	2403001f 	li	v1,31
9d0042d0:	00431804 	sllv	v1,v1,v0
	ipc->set = ((ipl << 2) + spl) << bn;
9d0042d4:	00451004 	sllv	v0,a1,v0
	*/
	bn = 8 * (vec % 4);

	/* Set the interrupt privilege level and sub-privilege level
	*/
	ipc->clr = (0x1F << bn);
9d0042d8:	ac830004 	sw	v1,4(a0)
	ipc->set = ((ipl << 2) + spl) << bn;
9d0042dc:	ac820008 	sw	v0,8(a0)
}
9d0042e0:	03e00008 	jr	ra
9d0042e4:	00000000 	nop

9d0042e8 <getPeripheralClock>:
uint32_t getPeripheralClock()
{
	uint32_t	clkPb;

    clkPb = F_CPU;
    clkPb >>= OSCCONbits.PBDIV;
9d0042e8:	3c02bf81 	lui	v0,0xbf81
9d0042ec:	8c43f000 	lw	v1,-4096(v0)

    return clkPb;

}
9d0042f0:	3c0204c4 	lui	v0,0x4c4
9d0042f4:	3442b400 	ori	v0,v0,0xb400
uint32_t getPeripheralClock()
{
	uint32_t	clkPb;

    clkPb = F_CPU;
    clkPb >>= OSCCONbits.PBDIV;
9d0042f8:	7c630cc0 	ext	v1,v1,0x13,0x2

    return clkPb;

}
9d0042fc:	03e00008 	jr	ra
9d004300:	00621006 	srlv	v0,v0,v1

9d004304 <_configSystem>:

uint32_t __attribute__((nomips16)) disableInterrupts(void)
{
    uint32_t status = 0;

    asm volatile("di    %0" : "=r"(status));
9d004304:	41686000 	di	t0

	stInt = disableInterrupts();

	/* Disable wait states in data ram.
	*/
	BMXCONCLR = (1 << _BMXCON_BMXWSDRM_POSITION);
9d004308:	24030040 	li	v1,64
9d00430c:	3c02bf88 	lui	v0,0xbf88
9d004310:	ac432004 	sw	v1,8196(v0)

#ifdef _PCACHE

	stCache = CHECON;
9d004314:	3c07bf88 	lui	a3,0xbf88
9d004318:	8ce94000 	lw	t1,16384(a3)
    stCache |= (3 << _CHECON_PREFEN_POSITION);

	/* Turn on caching for KSEG0
	*/
	asm("mfc0 %0,$16,0" :  "=r"(tmp));
	tmp = (tmp & ~7) | 3;
9d00431c:	2402fff8 	li	v0,-8
	*/
    stCache |= (3 << _CHECON_PREFEN_POSITION);
	/* Turn on caching for KSEG0
	*/
	asm("mfc0 %0,$16,0" :  "=r"(tmp));
9d004320:	40038000 	mfc0	v1,c0_config
	tmp = (tmp & ~7) | 3;
9d004324:	00621024 	and	v0,v1,v0
	stCache = CHECON;

	/* Configure predictive prefetch caching for both cached and
	** non-cached memory regions.
	*/
    stCache |= (3 << _CHECON_PREFEN_POSITION);
9d004328:	35290030 	ori	t1,t1,0x30

	/* Turn on caching for KSEG0
	*/
	asm("mfc0 %0,$16,0" :  "=r"(tmp));
	tmp = (tmp & ~7) | 3;
9d00432c:	34420003 	ori	v0,v0,0x3
	asm("mtc0 %0,$16,0" :: "r" (tmp));
9d004330:	40828000 	mtc0	v0,c0_config

	/* Configure the number of wait states in the program flash
	*/
    wait = 0;

    while(clk > FLASH_SPEED_HZ)
9d004334:	3c0501c9 	lui	a1,0x1c9
9d004338:	34a5c381 	ori	a1,a1,0xc381
9d00433c:	0085182b 	sltu	v1,a0,a1
9d004340:	14600007 	bnez	v1,9d004360 <_configSystem+0x5c>
9d004344:	00001021 	move	v0,zero
    {
        wait += 1;
        clk -= FLASH_SPEED_HZ;
9d004348:	3c06fe36 	lui	a2,0xfe36
9d00434c:	24c63c80 	addiu	a2,a2,15488
9d004350:	00862021 	addu	a0,a0,a2

	/* Configure the number of wait states in the program flash
	*/
    wait = 0;

    while(clk > FLASH_SPEED_HZ)
9d004354:	0085182b 	sltu	v1,a0,a1
9d004358:	1060fffd 	beqz	v1,9d004350 <_configSystem+0x4c>
9d00435c:	24420001 	addiu	v0,v0,1
    {
        wait += 1;
        clk -= FLASH_SPEED_HZ;
    }

    stCache &= ~_CHECON_PFMWS_MASK;
9d004360:	2404fff8 	li	a0,-8
9d004364:	01241824 	and	v1,t1,a0
	stCache |= (wait << _CHECON_PFMWS_POSITION);
9d004368:	00431025 	or	v0,v0,v1
**		enableInterrupts() or disableInterrupts().
*/

void __attribute__((nomips16))  restoreInterrupts(uint32_t st)
{
    if (st & 0x00000001)
9d00436c:	31030001 	andi	v1,t0,0x1
    }

    stCache &= ~_CHECON_PFMWS_MASK;
	stCache |= (wait << _CHECON_PFMWS_POSITION);

	CHECON = stCache;
9d004370:	14600003 	bnez	v1,9d004380 <_configSystem+0x7c>
**		enableInterrupts() or disableInterrupts().
*/

void __attribute__((nomips16))  restoreInterrupts(uint32_t st)
{
    if (st & 0x00000001)
9d004374:	ace24000 	sw	v0,16384(a3)
	{
        asm volatile("ei");
	}
    else
	{
        asm volatile("di");
9d004378:	03e00008 	jr	ra
9d00437c:	41606000 	di

void __attribute__((nomips16))  restoreInterrupts(uint32_t st)
{
    if (st & 0x00000001)
	{
        asm volatile("ei");
9d004380:	03e00008 	jr	ra
9d004384:	41606020 	ei

9d004388 <_enableMultiVectorInterrupts>:
    unsigned int val;

    /* Set the CP0 bit so that interrupt exceptions use the
	** special interrupt vector and not the general exception vector.
	*/
    asm volatile("mfc0   %0,$13" : "=r"(val));
9d004388:	40036800 	mfc0	v1,c0_cause
    val |= 0x00800000;
9d00438c:	3c020080 	lui	v0,0x80
9d004390:	00621025 	or	v0,v1,v0
    asm volatile("mtc0   %0,$13" : "+r"(val));
9d004394:	40826800 	mtc0	v0,c0_cause

	/* Turn on multi-vectored interrupts.
	*/
    INTCONSET = _INTCON_MVEC_MASK;
9d004398:	24031000 	li	v1,4096
9d00439c:	3c02bf88 	lui	v0,0xbf88
9d0043a0:	ac431008 	sw	v1,4104(v0)

uint32_t __attribute__((nomips16))  enableInterrupts(void)
{
    uint32_t status = 0;

    asm volatile("ei    %0" : "=r"(status));
9d0043a4:	03e00008 	jr	ra

    /* Enable interrupts.
	*/
    enableInterrupts();

}
9d0043a8:	41626020 	ei	v0

9d0043ac <_initCoreTimer>:

void __attribute__((nomips16)) _initCoreTimer(uint32_t prd)
{
	/* Clear the core timer counter
	*/
    asm volatile("mtc0   $0,$9");
9d0043ac:	40804800 	mtc0	zero,c0_count

    /* Store the requested value in the compare register
	*/
    asm volatile("mtc0   %0,$11" : "+r"(prd));
9d0043b0:	03e00008 	jr	ra
}
9d0043b4:	40845800 	mtc0	a0,c0_compare

9d0043b8 <_ZN14HardwareSerial9availableEv>:
**		receive buffer.
*/

int HardwareSerial::available(void)
{
	return (RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
9d0043b8:	8c820224 	lw	v0,548(a0)
9d0043bc:	8c830228 	lw	v1,552(a0)
9d0043c0:	24420200 	addiu	v0,v0,512
9d0043c4:	00431023 	subu	v0,v0,v1
9d0043c8:	00021fc3 	sra	v1,v0,0x1f
9d0043cc:	00031dc2 	srl	v1,v1,0x17
9d0043d0:	00431021 	addu	v0,v0,v1
9d0043d4:	304201ff 	andi	v0,v0,0x1ff
}
9d0043d8:	03e00008 	jr	ra
9d0043dc:	00431023 	subu	v0,v0,v1

9d0043e0 <_ZN14HardwareSerial4peekEv>:
**		removing it from the buffer, or -1 if no characters are in the buffer.
*/

int HardwareSerial::peek()
{
	if (rx_buffer.head == rx_buffer.tail)
9d0043e0:	8c830228 	lw	v1,552(a0)
9d0043e4:	8c850224 	lw	a1,548(a0)
9d0043e8:	10a30003 	beq	a1,v1,9d0043f8 <_ZN14HardwareSerial4peekEv+0x18>
9d0043ec:	2402ffff 	li	v0,-1
	{
		return -1;
	}
	else
	{
		return rx_buffer.buffer[rx_buffer.tail];
9d0043f0:	00832021 	addu	a0,a0,v1
9d0043f4:	90820024 	lbu	v0,36(a0)
	}
}
9d0043f8:	03e00008 	jr	ra
9d0043fc:	00000000 	nop

9d004400 <_ZN14HardwareSerial4readEv>:
int HardwareSerial::read(void)
{
	unsigned char theChar;

	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer.head == rx_buffer.tail)
9d004400:	8c830228 	lw	v1,552(a0)
9d004404:	8c850224 	lw	a1,548(a0)
9d004408:	10a3000a 	beq	a1,v1,9d004434 <_ZN14HardwareSerial4readEv+0x34>
9d00440c:	2402ffff 	li	v0,-1
		return -1;
	}
	else
	{
		theChar			= rx_buffer.buffer[rx_buffer.tail];
		rx_buffer.tail	= (rx_buffer.tail + 1) % RX_BUFFER_SIZE;
9d004410:	24660001 	addiu	a2,v1,1
9d004414:	00062fc3 	sra	a1,a2,0x1f
9d004418:	00052dc2 	srl	a1,a1,0x17
9d00441c:	00c53021 	addu	a2,a2,a1
	{
		return -1;
	}
	else
	{
		theChar			= rx_buffer.buffer[rx_buffer.tail];
9d004420:	00831821 	addu	v1,a0,v1
		rx_buffer.tail	= (rx_buffer.tail + 1) % RX_BUFFER_SIZE;
9d004424:	30c601ff 	andi	a2,a2,0x1ff
	{
		return -1;
	}
	else
	{
		theChar			= rx_buffer.buffer[rx_buffer.tail];
9d004428:	90620024 	lbu	v0,36(v1)
		rx_buffer.tail	= (rx_buffer.tail + 1) % RX_BUFFER_SIZE;
9d00442c:	00c52823 	subu	a1,a2,a1
9d004430:	ac850228 	sw	a1,552(a0)
		return (theChar);
	}
}
9d004434:	03e00008 	jr	ra
9d004438:	00000000 	nop

9d00443c <_ZN14HardwareSerial5flushEv>:
**	Description:
**		Empty the send buffer by waiting for the
**		fifo to empty and the transmitter to become idle
*/
void HardwareSerial::flush()
{
9d00443c:	8c830004 	lw	v1,4(a0)
	while ((uart->uxSta.reg & (1 << _UARTSTA_TMRT)) == 0)	//check the TRMT bit
9d004440:	8c620010 	lw	v0,16(v1)
9d004444:	30420100 	andi	v0,v0,0x100
9d004448:	1040fffd 	beqz	v0,9d004440 <_ZN14HardwareSerial5flushEv+0x4>
9d00444c:	00000000 	nop
	{
		//* wait for the transmitter to be clear
	}
}
9d004450:	03e00008 	jr	ra
9d004454:	00000000 	nop

9d004458 <_ZN14HardwareSerial5purgeEv>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer.head = rx_buffer.tail;
9d004458:	8c820228 	lw	v0,552(a0)
}
9d00445c:	03e00008 	jr	ra
9d004460:	ac820224 	sw	v0,548(a0)

9d004464 <_ZN14HardwareSerial5writeEh>:
**		Wait until the transmitter is idle, and then transmit the
**		specified character.
*/

void HardwareSerial::write(uint8_t theChar)
{
9d004464:	8c820004 	lw	v0,4(a0)
9d004468:	30a500ff 	andi	a1,a1,0xff

	while ((uart->uxSta.reg & (1 << _UARTSTA_UTXBF)) != 0)	//check the UTXBF bit
9d00446c:	8c430010 	lw	v1,16(v0)
9d004470:	30630200 	andi	v1,v1,0x200
9d004474:	1460fffd 	bnez	v1,9d00446c <_ZN14HardwareSerial5writeEh+0x8>
9d004478:	00000000 	nop
  {
		//* wait for the transmitter buffer to have room
	}

	uart->uxTx.reg = theChar;
9d00447c:	ac450020 	sw	a1,32(v0)
}
9d004480:	03e00008 	jr	ra
9d004484:	00000000 	nop

9d004488 <_ZN14HardwareSerial5beginEm>:
//	p32_regset *	ipc;	//interrupt priority control register set
//	int				irq_shift;

	/* Initialize the receive buffer.
	*/
	purge();
9d004488:	8c820000 	lw	v0,0(a0)
**		Initialize the UART for use, setting the baud rate to the
**		requested value, data size of 8-bits, and no parity.
*/

void HardwareSerial::begin(unsigned long baudRate)
{
9d00448c:	27bdffe0 	addiu	sp,sp,-32
9d004490:	afbf001c 	sw	ra,28(sp)
//	p32_regset *	ipc;	//interrupt priority control register set
//	int				irq_shift;

	/* Initialize the receive buffer.
	*/
	purge();
9d004494:	8c42001c 	lw	v0,28(v0)
**		Initialize the UART for use, setting the baud rate to the
**		requested value, data size of 8-bits, and no parity.
*/
void HardwareSerial::begin(unsigned long baudRate)
{
9d004498:	afb10018 	sw	s1,24(sp)
9d00449c:	afb00014 	sw	s0,20(sp)
9d0044a0:	00808021 	move	s0,a0
//	p32_regset *	ipc;	//interrupt priority control register set
//	int				irq_shift;

	/* Initialize the receive buffer.
	*/
	purge();
9d0044a4:	0040f809 	jalr	v0
9d0044a8:	00a08821 	move	s1,a1
	/* Map the UART RX to the appropriate pin.
	*/
    mapPps(pinRx, ppsRx);
#endif

    setIntVector(vec, isr);
9d0044ac:	9204000d 	lbu	a0,13(s0)
9d0044b0:	0f40108a 	jal	9d004228 <setIntVector>
9d0044b4:	8e050008 	lw	a1,8(s0)

	/* Set the interrupt privilege level and sub-privilege level
	*/
	setIntPriority(vec, ipl, spl);
9d0044b8:	9204000d 	lbu	a0,13(s0)
9d0044bc:	9205000e 	lbu	a1,14(s0)
9d0044c0:	0f4010a3 	jal	9d00428c <setIntPriority>
9d0044c4:	9206000f 	lbu	a2,15(s0)

	/* Clear the interrupt flags, and set the interrupt enables for the
	** interrupts used by this UART.
	*/
	ifs->clr = bit_rx + bit_tx + bit_err;	//clear all interrupt flags
9d0044c8:	8e04001c 	lw	a0,28(s0)
9d0044cc:	8e050020 	lw	a1,32(s0)
9d0044d0:	8e060018 	lw	a2,24(s0)
9d0044d4:	8e070010 	lw	a3,16(s0)
9d0044d8:	00852821 	addu	a1,a0,a1
	iec->clr = bit_rx + bit_tx + bit_err;	//disable all interrupts
9d0044dc:	8e030014 	lw	v1,20(s0)

	/* Initialize the UART itself.
	**	http://www.chipkit.org/forum/viewtopic.php?f=7&t=213&p=948#p948
    ** Use high baud rate divisor for bauds over LOW_HIGH_BAUD_SPLIT
    */
	uart->uxSta.reg = 0;
9d0044e0:	8e020004 	lw	v0,4(s0)
	setIntPriority(vec, ipl, spl);

	/* Clear the interrupt flags, and set the interrupt enables for the
	** interrupts used by this UART.
	*/
	ifs->clr = bit_rx + bit_tx + bit_err;	//clear all interrupt flags
9d0044e4:	00a62821 	addu	a1,a1,a2
	/* Initialize the UART itself.
	**	http://www.chipkit.org/forum/viewtopic.php?f=7&t=213&p=948#p948
    ** Use high baud rate divisor for bauds over LOW_HIGH_BAUD_SPLIT
    */
	uart->uxSta.reg = 0;
    if (baudRate < LOW_HIGH_BAUD_SPLIT)
9d0044e8:	3c060003 	lui	a2,0x3
9d0044ec:	24c60d40 	addiu	a2,a2,3392
9d0044f0:	0226302b 	sltu	a2,s1,a2
	setIntPriority(vec, ipl, spl);

	/* Clear the interrupt flags, and set the interrupt enables for the
	** interrupts used by this UART.
	*/
	ifs->clr = bit_rx + bit_tx + bit_err;	//clear all interrupt flags
9d0044f4:	ace50004 	sw	a1,4(a3)

	iec->clr = bit_rx + bit_tx + bit_err;	//disable all interrupts
9d0044f8:	ac650004 	sw	a1,4(v1)
	iec->set = bit_rx;						//enable rx interrupts
9d0044fc:	ac640008 	sw	a0,8(v1)

	/* Initialize the UART itself.
	**	http://www.chipkit.org/forum/viewtopic.php?f=7&t=213&p=948#p948
    ** Use high baud rate divisor for bauds over LOW_HIGH_BAUD_SPLIT
    */
	uart->uxSta.reg = 0;
9d004500:	ac400010 	sw	zero,16(v0)
    if (baudRate < LOW_HIGH_BAUD_SPLIT)
9d004504:	14c00011 	bnez	a2,9d00454c <_ZN14HardwareSerial5beginEm+0xc4>
9d004508:	8f838098 	lw	v1,-32616(gp)
    {
        uart->uxBrg.reg    = ((__PIC32_pbClk / 4 / baudRate) - 1);       // calculate actual BAUD generate value.
        uart->uxMode.reg = (1 << _UARTMODE_ON) | (1 << _UARTMODE_BRGH);  // enable UART module
    }
    uart->uxSta.reg  = (1 << _UARTSTA_UTXEN) + (1 << _UARTSTA_URXEN);    // enable transmitter and receiver
}
9d00450c:	8fbf001c 	lw	ra,28(sp)
9d004510:	8fb00014 	lw	s0,20(sp)
        uart->uxBrg.reg    = ((__PIC32_pbClk / 16 / baudRate) - 1);      // calculate actual BAUD generate value.
        uart->uxMode.reg = (1 << _UARTMODE_ON);                          // enable UART module
    }
    else
    {
        uart->uxBrg.reg    = ((__PIC32_pbClk / 4 / baudRate) - 1);       // calculate actual BAUD generate value.
9d004514:	00031882 	srl	v1,v1,0x2
9d004518:	0071001b 	divu	zero,v1,s1
9d00451c:	022001f4 	teq	s1,zero,0x7
        uart->uxMode.reg = (1 << _UARTMODE_ON) | (1 << _UARTMODE_BRGH);  // enable UART module
    }
    uart->uxSta.reg  = (1 << _UARTSTA_UTXEN) + (1 << _UARTSTA_URXEN);    // enable transmitter and receiver
}
9d004520:	8fb10018 	lw	s1,24(sp)
9d004524:	27bd0020 	addiu	sp,sp,32
        uart->uxBrg.reg    = ((__PIC32_pbClk / 16 / baudRate) - 1);      // calculate actual BAUD generate value.
        uart->uxMode.reg = (1 << _UARTMODE_ON);                          // enable UART module
    }
    else
    {
        uart->uxBrg.reg    = ((__PIC32_pbClk / 4 / baudRate) - 1);       // calculate actual BAUD generate value.
9d004528:	00001812 	mflo	v1
9d00452c:	2463ffff 	addiu	v1,v1,-1
9d004530:	ac430040 	sw	v1,64(v0)
        uart->uxMode.reg = (1 << _UARTMODE_ON) | (1 << _UARTMODE_BRGH);  // enable UART module
9d004534:	34038008 	li	v1,0x8008
9d004538:	ac430000 	sw	v1,0(v0)
    }
    uart->uxSta.reg  = (1 << _UARTSTA_UTXEN) + (1 << _UARTSTA_URXEN);    // enable transmitter and receiver
9d00453c:	24031400 	li	v1,5120
9d004540:	ac430010 	sw	v1,16(v0)
}
9d004544:	03e00008 	jr	ra
9d004548:	00000000 	nop
9d00454c:	8fbf001c 	lw	ra,28(sp)
9d004550:	8fb00014 	lw	s0,20(sp)
    ** Use high baud rate divisor for bauds over LOW_HIGH_BAUD_SPLIT
    */
	uart->uxSta.reg = 0;
    if (baudRate < LOW_HIGH_BAUD_SPLIT)
    {
        uart->uxBrg.reg    = ((__PIC32_pbClk / 16 / baudRate) - 1);      // calculate actual BAUD generate value.
9d004554:	00031902 	srl	v1,v1,0x4
9d004558:	0071001b 	divu	zero,v1,s1
9d00455c:	022001f4 	teq	s1,zero,0x7
    {
        uart->uxBrg.reg    = ((__PIC32_pbClk / 4 / baudRate) - 1);       // calculate actual BAUD generate value.
        uart->uxMode.reg = (1 << _UARTMODE_ON) | (1 << _UARTMODE_BRGH);  // enable UART module
    }
    uart->uxSta.reg  = (1 << _UARTSTA_UTXEN) + (1 << _UARTSTA_URXEN);    // enable transmitter and receiver
}
9d004560:	8fb10018 	lw	s1,24(sp)
9d004564:	27bd0020 	addiu	sp,sp,32
    ** Use high baud rate divisor for bauds over LOW_HIGH_BAUD_SPLIT
    */
	uart->uxSta.reg = 0;
    if (baudRate < LOW_HIGH_BAUD_SPLIT)
    {
        uart->uxBrg.reg    = ((__PIC32_pbClk / 16 / baudRate) - 1);      // calculate actual BAUD generate value.
9d004568:	00001812 	mflo	v1
9d00456c:	2463ffff 	addiu	v1,v1,-1
9d004570:	ac430040 	sw	v1,64(v0)
        uart->uxMode.reg = (1 << _UARTMODE_ON);                          // enable UART module
9d004574:	34038000 	li	v1,0x8000
9d004578:	ac430000 	sw	v1,0(v0)
    else
    {
        uart->uxBrg.reg    = ((__PIC32_pbClk / 4 / baudRate) - 1);       // calculate actual BAUD generate value.
        uart->uxMode.reg = (1 << _UARTMODE_ON) | (1 << _UARTMODE_BRGH);  // enable UART module
    }
    uart->uxSta.reg  = (1 << _UARTSTA_UTXEN) + (1 << _UARTSTA_URXEN);    // enable transmitter and receiver
9d00457c:	24031400 	li	v1,5120
9d004580:	ac430010 	sw	v1,16(v0)
}
9d004584:	03e00008 	jr	ra
9d004588:	00000000 	nop

9d00458c <_ZN14HardwareSerial11doSerialIntEv>:
	uint8_t	ch;

	/* If it's a receive interrupt, get the character and store
	** it in the receive buffer.
	*/
	if ((ifs->reg & bit_rx) != 0)
9d00458c:	8c820010 	lw	v0,16(a0)
9d004590:	8c83001c 	lw	v1,28(a0)
9d004594:	8c450000 	lw	a1,0(v0)
9d004598:	00652824 	and	a1,v1,a1
9d00459c:	10a00010 	beqz	a1,9d0045e0 <_ZN14HardwareSerial11doSerialIntEv+0x54>
9d0045a0:	00000000 	nop
	{
		ch = uart->uxRx.reg;
		bufIndex	= (rx_buffer.head + 1) % RX_BUFFER_SIZE;
9d0045a4:	8c870224 	lw	a3,548(a0)
	/* If it's a receive interrupt, get the character and store
	** it in the receive buffer.
	*/
	if ((ifs->reg & bit_rx) != 0)
	{
		ch = uart->uxRx.reg;
9d0045a8:	8c890004 	lw	t1,4(a0)
		/* If we should be storing the received character into the location
		** just before the tail (meaning that the head would advance to the
		** current location of the tail), we're about to overflow the buffer
		** and so we don't write the character or advance the head.
		*/
		if (bufIndex != rx_buffer.tail)
9d0045ac:	8c880228 	lw	t0,552(a0)
	** it in the receive buffer.
	*/
	if ((ifs->reg & bit_rx) != 0)
	{
		ch = uart->uxRx.reg;
		bufIndex	= (rx_buffer.head + 1) % RX_BUFFER_SIZE;
9d0045b0:	24e60001 	addiu	a2,a3,1
9d0045b4:	00062fc3 	sra	a1,a2,0x1f
9d0045b8:	00052dc2 	srl	a1,a1,0x17
9d0045bc:	00c53021 	addu	a2,a2,a1
9d0045c0:	30c601ff 	andi	a2,a2,0x1ff
9d0045c4:	00c52823 	subu	a1,a2,a1
	/* If it's a receive interrupt, get the character and store
	** it in the receive buffer.
	*/
	if ((ifs->reg & bit_rx) != 0)
	{
		ch = uart->uxRx.reg;
9d0045c8:	8d260030 	lw	a2,48(t1)
		/* If we should be storing the received character into the location
		** just before the tail (meaning that the head would advance to the
		** current location of the tail), we're about to overflow the buffer
		** and so we don't write the character or advance the head.
		*/
		if (bufIndex != rx_buffer.tail)
9d0045cc:	11050003 	beq	t0,a1,9d0045dc <_ZN14HardwareSerial11doSerialIntEv+0x50>
9d0045d0:	00873821 	addu	a3,a0,a3
	/* If it's a receive interrupt, get the character and store
	** it in the receive buffer.
	*/
	if ((ifs->reg & bit_rx) != 0)
	{
		ch = uart->uxRx.reg;
9d0045d4:	a0e60024 	sb	a2,36(a3)
		** and so we don't write the character or advance the head.
		*/
		if (bufIndex != rx_buffer.tail)
		{
			rx_buffer.buffer[rx_buffer.head] = ch;
			rx_buffer.head = bufIndex;
9d0045d8:	ac850224 	sw	a1,548(a0)
		}

		/* Clear the interrupt flag.
		*/
		ifs->clr = bit_rx;
9d0045dc:	ac430004 	sw	v1,4(v0)
	}

	/* If it's a transmit interrupt, ignore it, as we don't current
	** have interrupt driven i/o on the transmit side.
	*/
	if ((ifs->reg & bit_tx) != 0)
9d0045e0:	8c450000 	lw	a1,0(v0)
9d0045e4:	8c830020 	lw	v1,32(a0)
9d0045e8:	00652024 	and	a0,v1,a1
9d0045ec:	54800001 	bnezl	a0,9d0045f4 <_ZN14HardwareSerial11doSerialIntEv+0x68>
9d0045f0:	ac430004 	sw	v1,4(v0)
9d0045f4:	03e00008 	jr	ra
9d0045f8:	00000000 	nop

9d0045fc <IntSer2Handler>:
**		serial port 2.
*/
#if defined(_SER2_VECTOR)

void __attribute__((interrupt(), nomips16)) IntSer2Handler(void)
{
9d0045fc:	415de800 	rdpgpr	sp,sp
9d004600:	401b7000 	mfc0	k1,c0_epc
9d004604:	401a6002 	mfc0	k0,c0_srsctl
9d004608:	27bdff90 	addiu	sp,sp,-112
9d00460c:	afbb006c 	sw	k1,108(sp)
9d004610:	401b6000 	mfc0	k1,c0_status
9d004614:	afba0068 	sw	k0,104(sp)
9d004618:	401a6800 	mfc0	k0,c0_cause
9d00461c:	001ad282 	srl	k0,k0,0xa
9d004620:	afbb0064 	sw	k1,100(sp)
9d004624:	7f5b7a84 	ins	k1,k0,0xa,0x6
9d004628:	7c1b2044 	ins	k1,zero,0x1,0x4
9d00462c:	409b6000 	mtc0	k1,c0_status
9d004630:	afa30018 	sw	v1,24(sp)
9d004634:	8fa30068 	lw	v1,104(sp)
9d004638:	3063000f 	andi	v1,v1,0xf
9d00463c:	14600011 	bnez	v1,9d004684 <IntSer2Handler+0x88>
9d004640:	afa20014 	sw	v0,20(sp)
9d004644:	afbf0054 	sw	ra,84(sp)
9d004648:	afb90050 	sw	t9,80(sp)
9d00464c:	afb8004c 	sw	t8,76(sp)
9d004650:	afaf0048 	sw	t7,72(sp)
9d004654:	afae0044 	sw	t6,68(sp)
9d004658:	afad0040 	sw	t5,64(sp)
9d00465c:	afac003c 	sw	t4,60(sp)
9d004660:	afab0038 	sw	t3,56(sp)
9d004664:	afaa0034 	sw	t2,52(sp)
9d004668:	afa90030 	sw	t1,48(sp)
9d00466c:	afa8002c 	sw	t0,44(sp)
9d004670:	afa70028 	sw	a3,40(sp)
9d004674:	afa60024 	sw	a2,36(sp)
9d004678:	afa50020 	sw	a1,32(sp)
9d00467c:	afa4001c 	sw	a0,28(sp)
9d004680:	afa10010 	sw	at,16(sp)
	Serial2.doSerialInt();
9d004684:	3c04a000 	lui	a0,0xa000
**		serial port 2.
*/
#if defined(_SER2_VECTOR)

void __attribute__((interrupt(), nomips16)) IntSer2Handler(void)
{
9d004688:	00001012 	mflo	v0
	Serial2.doSerialInt();
9d00468c:	24841244 	addiu	a0,a0,4676
**		serial port 2.
*/
#if defined(_SER2_VECTOR)

void __attribute__((interrupt(), nomips16)) IntSer2Handler(void)
{
9d004690:	afa2005c 	sw	v0,92(sp)
9d004694:	00001810 	mfhi	v1
	Serial2.doSerialInt();
9d004698:	0f401163 	jal	9d00458c <_ZN14HardwareSerial11doSerialIntEv>
9d00469c:	afa30058 	sw	v1,88(sp)
}
9d0046a0:	8fa2005c 	lw	v0,92(sp)
9d0046a4:	8fa30058 	lw	v1,88(sp)
9d0046a8:	00400013 	mtlo	v0
9d0046ac:	8fa20068 	lw	v0,104(sp)
9d0046b0:	3042000f 	andi	v0,v0,0xf
9d0046b4:	14400013 	bnez	v0,9d004704 <IntSer2Handler+0x108>
9d0046b8:	00600011 	mthi	v1
9d0046bc:	8fbf0054 	lw	ra,84(sp)
9d0046c0:	8fb90050 	lw	t9,80(sp)
9d0046c4:	8fb8004c 	lw	t8,76(sp)
9d0046c8:	8faf0048 	lw	t7,72(sp)
9d0046cc:	8fae0044 	lw	t6,68(sp)
9d0046d0:	8fad0040 	lw	t5,64(sp)
9d0046d4:	8fac003c 	lw	t4,60(sp)
9d0046d8:	8fab0038 	lw	t3,56(sp)
9d0046dc:	8faa0034 	lw	t2,52(sp)
9d0046e0:	8fa90030 	lw	t1,48(sp)
9d0046e4:	8fa8002c 	lw	t0,44(sp)
9d0046e8:	8fa70028 	lw	a3,40(sp)
9d0046ec:	8fa60024 	lw	a2,36(sp)
9d0046f0:	8fa50020 	lw	a1,32(sp)
9d0046f4:	8fa4001c 	lw	a0,28(sp)
9d0046f8:	8fa30018 	lw	v1,24(sp)
9d0046fc:	8fa20014 	lw	v0,20(sp)
9d004700:	8fa10010 	lw	at,16(sp)
9d004704:	41606000 	di
9d004708:	000000c0 	ehb
9d00470c:	8fba006c 	lw	k0,108(sp)
9d004710:	8fbb0064 	lw	k1,100(sp)
9d004714:	409a7000 	mtc0	k0,c0_epc
9d004718:	8fba0068 	lw	k0,104(sp)
9d00471c:	27bd0070 	addiu	sp,sp,112
9d004720:	409a6002 	mtc0	k0,c0_srsctl
9d004724:	41dde800 	wrpgpr	sp,sp
9d004728:	409b6000 	mtc0	k1,c0_status
9d00472c:	42000018 	eret
9d004730 <IntSer1Handler>:
**		serial port 1.
*/
#if defined(_SER1_VECTOR)

void __attribute__((interrupt(), nomips16)) IntSer1Handler(void)
{
9d004730:	415de800 	rdpgpr	sp,sp
9d004734:	401b7000 	mfc0	k1,c0_epc
9d004738:	401a6002 	mfc0	k0,c0_srsctl
9d00473c:	27bdff90 	addiu	sp,sp,-112
9d004740:	afbb006c 	sw	k1,108(sp)
9d004744:	401b6000 	mfc0	k1,c0_status
9d004748:	afba0068 	sw	k0,104(sp)
9d00474c:	401a6800 	mfc0	k0,c0_cause
9d004750:	001ad282 	srl	k0,k0,0xa
9d004754:	afbb0064 	sw	k1,100(sp)
9d004758:	7f5b7a84 	ins	k1,k0,0xa,0x6
9d00475c:	7c1b2044 	ins	k1,zero,0x1,0x4
9d004760:	409b6000 	mtc0	k1,c0_status
9d004764:	afa30018 	sw	v1,24(sp)
9d004768:	8fa30068 	lw	v1,104(sp)
9d00476c:	3063000f 	andi	v1,v1,0xf
9d004770:	14600011 	bnez	v1,9d0047b8 <IntSer1Handler+0x88>
9d004774:	afa20014 	sw	v0,20(sp)
9d004778:	afbf0054 	sw	ra,84(sp)
9d00477c:	afb90050 	sw	t9,80(sp)
9d004780:	afb8004c 	sw	t8,76(sp)
9d004784:	afaf0048 	sw	t7,72(sp)
9d004788:	afae0044 	sw	t6,68(sp)
9d00478c:	afad0040 	sw	t5,64(sp)
9d004790:	afac003c 	sw	t4,60(sp)
9d004794:	afab0038 	sw	t3,56(sp)
9d004798:	afaa0034 	sw	t2,52(sp)
9d00479c:	afa90030 	sw	t1,48(sp)
9d0047a0:	afa8002c 	sw	t0,44(sp)
9d0047a4:	afa70028 	sw	a3,40(sp)
9d0047a8:	afa60024 	sw	a2,36(sp)
9d0047ac:	afa50020 	sw	a1,32(sp)
9d0047b0:	afa4001c 	sw	a0,28(sp)
9d0047b4:	afa10010 	sw	at,16(sp)
	Serial1.doSerialInt();
9d0047b8:	3c04a000 	lui	a0,0xa000
**		serial port 1.
*/
#if defined(_SER1_VECTOR)

void __attribute__((interrupt(), nomips16)) IntSer1Handler(void)
{
9d0047bc:	00001012 	mflo	v0
	Serial1.doSerialInt();
9d0047c0:	24841018 	addiu	a0,a0,4120
**		serial port 1.
*/
#if defined(_SER1_VECTOR)

void __attribute__((interrupt(), nomips16)) IntSer1Handler(void)
{
9d0047c4:	afa2005c 	sw	v0,92(sp)
9d0047c8:	00001810 	mfhi	v1
	Serial1.doSerialInt();
9d0047cc:	0f401163 	jal	9d00458c <_ZN14HardwareSerial11doSerialIntEv>
9d0047d0:	afa30058 	sw	v1,88(sp)
}
9d0047d4:	8fa2005c 	lw	v0,92(sp)
9d0047d8:	8fa30058 	lw	v1,88(sp)
9d0047dc:	00400013 	mtlo	v0
9d0047e0:	8fa20068 	lw	v0,104(sp)
9d0047e4:	3042000f 	andi	v0,v0,0xf
9d0047e8:	14400013 	bnez	v0,9d004838 <IntSer1Handler+0x108>
9d0047ec:	00600011 	mthi	v1
9d0047f0:	8fbf0054 	lw	ra,84(sp)
9d0047f4:	8fb90050 	lw	t9,80(sp)
9d0047f8:	8fb8004c 	lw	t8,76(sp)
9d0047fc:	8faf0048 	lw	t7,72(sp)
9d004800:	8fae0044 	lw	t6,68(sp)
9d004804:	8fad0040 	lw	t5,64(sp)
9d004808:	8fac003c 	lw	t4,60(sp)
9d00480c:	8fab0038 	lw	t3,56(sp)
9d004810:	8faa0034 	lw	t2,52(sp)
9d004814:	8fa90030 	lw	t1,48(sp)
9d004818:	8fa8002c 	lw	t0,44(sp)
9d00481c:	8fa70028 	lw	a3,40(sp)
9d004820:	8fa60024 	lw	a2,36(sp)
9d004824:	8fa50020 	lw	a1,32(sp)
9d004828:	8fa4001c 	lw	a0,28(sp)
9d00482c:	8fa30018 	lw	v1,24(sp)
9d004830:	8fa20014 	lw	v0,20(sp)
9d004834:	8fa10010 	lw	at,16(sp)
9d004838:	41606000 	di
9d00483c:	000000c0 	ehb
9d004840:	8fba006c 	lw	k0,108(sp)
9d004844:	8fbb0064 	lw	k1,100(sp)
9d004848:	409a7000 	mtc0	k0,c0_epc
9d00484c:	8fba0068 	lw	k0,104(sp)
9d004850:	27bd0070 	addiu	sp,sp,112
9d004854:	409a6002 	mtc0	k0,c0_srsctl
9d004858:	41dde800 	wrpgpr	sp,sp
9d00485c:	409b6000 	mtc0	k1,c0_status
9d004860:	42000018 	eret

9d004864 <IntSer0Handler>:
**		serial port 0.
*/
#if defined(_SER0_VECTOR)
void __attribute__((interrupt(), nomips16)) IntSer0Handler(void)
{
9d004864:	415de800 	rdpgpr	sp,sp
9d004868:	401b7000 	mfc0	k1,c0_epc
9d00486c:	401a6002 	mfc0	k0,c0_srsctl
9d004870:	27bdff90 	addiu	sp,sp,-112
9d004874:	afbb006c 	sw	k1,108(sp)
9d004878:	401b6000 	mfc0	k1,c0_status
9d00487c:	afba0068 	sw	k0,104(sp)
9d004880:	401a6800 	mfc0	k0,c0_cause
9d004884:	001ad282 	srl	k0,k0,0xa
9d004888:	afbb0064 	sw	k1,100(sp)
9d00488c:	7f5b7a84 	ins	k1,k0,0xa,0x6
9d004890:	7c1b2044 	ins	k1,zero,0x1,0x4
9d004894:	409b6000 	mtc0	k1,c0_status
9d004898:	afa30018 	sw	v1,24(sp)
9d00489c:	8fa30068 	lw	v1,104(sp)
9d0048a0:	3063000f 	andi	v1,v1,0xf
9d0048a4:	14600011 	bnez	v1,9d0048ec <IntSer0Handler+0x88>
9d0048a8:	afa20014 	sw	v0,20(sp)
9d0048ac:	afbf0054 	sw	ra,84(sp)
9d0048b0:	afb90050 	sw	t9,80(sp)
9d0048b4:	afb8004c 	sw	t8,76(sp)
9d0048b8:	afaf0048 	sw	t7,72(sp)
9d0048bc:	afae0044 	sw	t6,68(sp)
9d0048c0:	afad0040 	sw	t5,64(sp)
9d0048c4:	afac003c 	sw	t4,60(sp)
9d0048c8:	afab0038 	sw	t3,56(sp)
9d0048cc:	afaa0034 	sw	t2,52(sp)
9d0048d0:	afa90030 	sw	t1,48(sp)
9d0048d4:	afa8002c 	sw	t0,44(sp)
9d0048d8:	afa70028 	sw	a3,40(sp)
9d0048dc:	afa60024 	sw	a2,36(sp)
9d0048e0:	afa50020 	sw	a1,32(sp)
9d0048e4:	afa4001c 	sw	a0,28(sp)
9d0048e8:	afa10010 	sw	at,16(sp)
#if defined(_USB) && defined(_USE_USB_FOR_SERIAL_)
	Serial0.doSerialInt();
#else
	Serial.doSerialInt();
9d0048ec:	3c04a000 	lui	a0,0xa000
**		serial port 0.
*/
#if defined(_SER0_VECTOR)

void __attribute__((interrupt(), nomips16)) IntSer0Handler(void)
{
9d0048f0:	00001012 	mflo	v0
#if defined(_USB) && defined(_USE_USB_FOR_SERIAL_)
	Serial0.doSerialInt();
#else
	Serial.doSerialInt();
9d0048f4:	24840dec 	addiu	a0,a0,3564
**		serial port 0.
*/
#if defined(_SER0_VECTOR)

void __attribute__((interrupt(), nomips16)) IntSer0Handler(void)
{
9d0048f8:	afa2005c 	sw	v0,92(sp)
9d0048fc:	00001810 	mfhi	v1
#if defined(_USB) && defined(_USE_USB_FOR_SERIAL_)
	Serial0.doSerialInt();
#else
	Serial.doSerialInt();
9d004900:	0f401163 	jal	9d00458c <_ZN14HardwareSerial11doSerialIntEv>
9d004904:	afa30058 	sw	v1,88(sp)
#endif
}
9d004908:	8fa2005c 	lw	v0,92(sp)
9d00490c:	8fa30058 	lw	v1,88(sp)
9d004910:	00400013 	mtlo	v0
9d004914:	8fa20068 	lw	v0,104(sp)
9d004918:	3042000f 	andi	v0,v0,0xf
9d00491c:	14400013 	bnez	v0,9d00496c <IntSer0Handler+0x108>
9d004920:	00600011 	mthi	v1
9d004924:	8fbf0054 	lw	ra,84(sp)
9d004928:	8fb90050 	lw	t9,80(sp)
9d00492c:	8fb8004c 	lw	t8,76(sp)
9d004930:	8faf0048 	lw	t7,72(sp)
9d004934:	8fae0044 	lw	t6,68(sp)
9d004938:	8fad0040 	lw	t5,64(sp)
9d00493c:	8fac003c 	lw	t4,60(sp)
9d004940:	8fab0038 	lw	t3,56(sp)
9d004944:	8faa0034 	lw	t2,52(sp)
9d004948:	8fa90030 	lw	t1,48(sp)
9d00494c:	8fa8002c 	lw	t0,44(sp)
9d004950:	8fa70028 	lw	a3,40(sp)
9d004954:	8fa60024 	lw	a2,36(sp)
9d004958:	8fa50020 	lw	a1,32(sp)
9d00495c:	8fa4001c 	lw	a0,28(sp)
9d004960:	8fa30018 	lw	v1,24(sp)
9d004964:	8fa20014 	lw	v0,20(sp)
9d004968:	8fa10010 	lw	at,16(sp)
9d00496c:	41606000 	di
9d004970:	000000c0 	ehb
9d004974:	8fba006c 	lw	k0,108(sp)
9d004978:	8fbb0064 	lw	k1,100(sp)
9d00497c:	409a7000 	mtc0	k0,c0_epc
9d004980:	8fba0068 	lw	k0,104(sp)
9d004984:	27bd0070 	addiu	sp,sp,112
9d004988:	409a6002 	mtc0	k0,c0_srsctl
9d00498c:	41dde800 	wrpgpr	sp,sp
9d004990:	409b6000 	mtc0	k1,c0_status
9d004994:	42000018 	eret

9d004998 <_GLOBAL__I__ZN14HardwareSerialC2EP8p32_uartiiiiPFvvE>:
*/

#if defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler, int pinT, int pinR, ppsFunctionType ppsT, ppsFunctionType ppsR)
#else
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler)
9d004998:	3c069d03 	lui	a2,0x9d03
9d00499c:	3c0ea000 	lui	t6,0xa000
9d0049a0:	24c6bd78 	addiu	a2,a2,-17032
#endif
{
	uart = uartT;
9d0049a4:	25c40dec 	addiu	a0,t6,3564
*/

#if defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler, int pinT, int pinR, ppsFunctionType ppsT, ppsFunctionType ppsR)
#else
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler)
9d0049a8:	adc60dec 	sw	a2,3564(t6)
#endif
{
	uart = uartT;
	irq  = irqT;
9d0049ac:	240e0028 	li	t6,40
9d0049b0:	a08e000c 	sb	t6,12(a0)
	vec  = vecT;
9d0049b4:	240e0020 	li	t6,32
9d0049b8:	a08e000d 	sb	t6,13(a0)
	irq  = (uint8_t)irqT;
	vec  = (uint8_t)vecT;
	ipl  = (uint8_t)iplT;
	spl  = (uint8_t)splT;
    isr  = isrHandler;
9d0049bc:	3c0e9d00 	lui	t6,0x9d00
9d0049c0:	25ce4864 	addiu	t6,t6,18532
9d0049c4:	ac8e0008 	sw	t6,8(a0)
	** can be computed from the vector number. Each IPC register contains the
	** the priority bits for four vectors. Each byte of an IPC registger contains
	** the priority and sub-priority bits arranged such that  bits 0-1 are
	** the sub-priority, bits 2-4 the priority, and bits 5-7 unused.
	*/
	ifs = ((p32_regset *)&IFS0) + (irq / 32);	//interrupt flag register set
9d0049c8:	3c0cbf88 	lui	t4,0xbf88
	iec = ((p32_regset *)&IEC0) + (irq / 32);	//interrupt enable control reg set

	bit_err = 1 << (irq % 32);		//error interrupt flag/enable bit
9d0049cc:	240e0100 	li	t6,256
	** the priority bits for four vectors. Each byte of an IPC registger contains
	** the priority and sub-priority bits arranged such that  bits 0-1 are
	** the sub-priority, bits 2-4 the priority, and bits 5-7 unused.
	*/
	ifs = ((p32_regset *)&IFS0) + (irq / 32);	//interrupt flag register set
	iec = ((p32_regset *)&IEC0) + (irq / 32);	//interrupt enable control reg set
9d0049d0:	3c0bbf88 	lui	t3,0xbf88
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler, int pinT, int pinR, ppsFunctionType ppsT, ppsFunctionType ppsR)
#else
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler)
#endif
{
	uart = uartT;
9d0049d4:	3c07bf80 	lui	a3,0xbf80
	** the sub-priority, bits 2-4 the priority, and bits 5-7 unused.
	*/
	ifs = ((p32_regset *)&IFS0) + (irq / 32);	//interrupt flag register set
	iec = ((p32_regset *)&IEC0) + (irq / 32);	//interrupt enable control reg set

	bit_err = 1 << (irq % 32);		//error interrupt flag/enable bit
9d0049d8:	ac8e0018 	sw	t6,24(a0)
	** can be computed from the vector number. Each IPC register contains the
	** the priority bits for four vectors. Each byte of an IPC registger contains
	** the priority and sub-priority bits arranged such that  bits 0-1 are
	** the sub-priority, bits 2-4 the priority, and bits 5-7 unused.
	*/
	ifs = ((p32_regset *)&IFS0) + (irq / 32);	//interrupt flag register set
9d0049dc:	258c1030 	addiu	t4,t4,4144
	iec = ((p32_regset *)&IEC0) + (irq / 32);	//interrupt enable control reg set
9d0049e0:	256b1060 	addiu	t3,t3,4192

	bit_err = 1 << (irq % 32);		//error interrupt flag/enable bit
	bit_rx  = 1 << ((irq+1) % 32);	//rx interrupt flag/enable bit
9d0049e4:	240e0200 	li	t6,512
	uart = uartT;
	irq  = irqT;
	vec  = vecT;
	irq  = (uint8_t)irqT;
	vec  = (uint8_t)vecT;
	ipl  = (uint8_t)iplT;
9d0049e8:	24050002 	li	a1,2
	*/
	ifs = ((p32_regset *)&IFS0) + (irq / 32);	//interrupt flag register set
	iec = ((p32_regset *)&IEC0) + (irq / 32);	//interrupt enable control reg set

	bit_err = 1 << (irq % 32);		//error interrupt flag/enable bit
	bit_rx  = 1 << ((irq+1) % 32);	//rx interrupt flag/enable bit
9d0049ec:	ac8e001c 	sw	t6,28(a0)
*/

#if defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler, int pinT, int pinR, ppsFunctionType ppsT, ppsFunctionType ppsR)
#else
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler)
9d0049f0:	3c0da000 	lui	t5,0xa000
	** can be computed from the vector number. Each IPC register contains the
	** the priority bits for four vectors. Each byte of an IPC registger contains
	** the priority and sub-priority bits arranged such that  bits 0-1 are
	** the sub-priority, bits 2-4 the priority, and bits 5-7 unused.
	*/
	ifs = ((p32_regset *)&IFS0) + (irq / 32);	//interrupt flag register set
9d0049f4:	25890010 	addiu	t1,t4,16
	iec = ((p32_regset *)&IEC0) + (irq / 32);	//interrupt enable control reg set
9d0049f8:	25680010 	addiu	t0,t3,16
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler, int pinT, int pinR, ppsFunctionType ppsT, ppsFunctionType ppsR)
#else
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler)
#endif
{
	uart = uartT;
9d0049fc:	24f86800 	addiu	t8,a3,26624
	ifs = ((p32_regset *)&IFS0) + (irq / 32);	//interrupt flag register set
	iec = ((p32_regset *)&IEC0) + (irq / 32);	//interrupt enable control reg set

	bit_err = 1 << (irq % 32);		//error interrupt flag/enable bit
	bit_rx  = 1 << ((irq+1) % 32);	//rx interrupt flag/enable bit
	bit_tx  = 1 << ((irq+2) % 32);	//tx interrupt flag/enable bit
9d004a00:	240e0400 	li	t6,1024
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler, int pinT, int pinR, ppsFunctionType ppsT, ppsFunctionType ppsR)
#else
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler)
#endif
{
	uart = uartT;
9d004a04:	25a31018 	addiu	v1,t5,4120
9d004a08:	ac980004 	sw	t8,4(a0)
	irq  = irqT;
	vec  = vecT;
	irq  = (uint8_t)irqT;
	vec  = (uint8_t)vecT;
	ipl  = (uint8_t)iplT;
9d004a0c:	a085000e 	sb	a1,14(a0)
	spl  = (uint8_t)splT;
9d004a10:	a080000f 	sb	zero,15(a0)
	** can be computed from the vector number. Each IPC register contains the
	** the priority bits for four vectors. Each byte of an IPC registger contains
	** the priority and sub-priority bits arranged such that  bits 0-1 are
	** the sub-priority, bits 2-4 the priority, and bits 5-7 unused.
	*/
	ifs = ((p32_regset *)&IFS0) + (irq / 32);	//interrupt flag register set
9d004a14:	ac890010 	sw	t1,16(a0)
	iec = ((p32_regset *)&IEC0) + (irq / 32);	//interrupt enable control reg set
9d004a18:	ac880014 	sw	t0,20(a0)

	bit_err = 1 << (irq % 32);		//error interrupt flag/enable bit
	bit_rx  = 1 << ((irq+1) % 32);	//rx interrupt flag/enable bit
	bit_tx  = 1 << ((irq+2) % 32);	//tx interrupt flag/enable bit
9d004a1c:	ac8e0020 	sw	t6,32(a0)
#else
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler)
#endif
{
	uart = uartT;
	irq  = irqT;
9d004a20:	2404001a 	li	a0,26
9d004a24:	a064000c 	sb	a0,12(v1)
	vec  = vecT;
9d004a28:	24040018 	li	a0,24
9d004a2c:	a064000d 	sb	a0,13(v1)
	irq  = (uint8_t)irqT;
	vec  = (uint8_t)vecT;
	ipl  = (uint8_t)iplT;
	spl  = (uint8_t)splT;
    isr  = isrHandler;
9d004a30:	3c049d00 	lui	a0,0x9d00
9d004a34:	24844730 	addiu	a0,a0,18224
9d004a38:	ac640008 	sw	a0,8(v1)
	** the sub-priority, bits 2-4 the priority, and bits 5-7 unused.
	*/
	ifs = ((p32_regset *)&IFS0) + (irq / 32);	//interrupt flag register set
	iec = ((p32_regset *)&IEC0) + (irq / 32);	//interrupt enable control reg set

	bit_err = 1 << (irq % 32);		//error interrupt flag/enable bit
9d004a3c:	3c040400 	lui	a0,0x400
9d004a40:	ac640018 	sw	a0,24(v1)
	bit_rx  = 1 << ((irq+1) % 32);	//rx interrupt flag/enable bit
9d004a44:	3c040800 	lui	a0,0x800
9d004a48:	ac64001c 	sw	a0,28(v1)
*/

#if defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler, int pinT, int pinR, ppsFunctionType ppsT, ppsFunctionType ppsR)
#else
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler)
9d004a4c:	3c0aa000 	lui	t2,0xa000
#endif
{
	uart = uartT;
9d004a50:	24ef6000 	addiu	t7,a3,24576
	ifs = ((p32_regset *)&IFS0) + (irq / 32);	//interrupt flag register set
	iec = ((p32_regset *)&IEC0) + (irq / 32);	//interrupt enable control reg set
	bit_err = 1 << (irq % 32);		//error interrupt flag/enable bit
	bit_rx  = 1 << ((irq+1) % 32);	//rx interrupt flag/enable bit
	bit_tx  = 1 << ((irq+2) % 32);	//tx interrupt flag/enable bit
9d004a54:	3c041000 	lui	a0,0x1000
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler, int pinT, int pinR, ppsFunctionType ppsT, ppsFunctionType ppsR)
#else
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler)
#endif
{
	uart = uartT;
9d004a58:	25421244 	addiu	v0,t2,4676
9d004a5c:	ac6f0004 	sw	t7,4(v1)
	irq  = irqT;
	vec  = vecT;
	irq  = (uint8_t)irqT;
	vec  = (uint8_t)vecT;
	ipl  = (uint8_t)iplT;
9d004a60:	a065000e 	sb	a1,14(v1)
	spl  = (uint8_t)splT;
9d004a64:	a060000f 	sb	zero,15(v1)
	** can be computed from the vector number. Each IPC register contains the
	** the priority bits for four vectors. Each byte of an IPC registger contains
	** the priority and sub-priority bits arranged such that  bits 0-1 are
	** the sub-priority, bits 2-4 the priority, and bits 5-7 unused.
	*/
	ifs = ((p32_regset *)&IFS0) + (irq / 32);	//interrupt flag register set
9d004a68:	ac6c0010 	sw	t4,16(v1)
	iec = ((p32_regset *)&IEC0) + (irq / 32);	//interrupt enable control reg set
9d004a6c:	ac6b0014 	sw	t3,20(v1)

	bit_err = 1 << (irq % 32);		//error interrupt flag/enable bit
	bit_rx  = 1 << ((irq+1) % 32);	//rx interrupt flag/enable bit
	bit_tx  = 1 << ((irq+2) % 32);	//tx interrupt flag/enable bit
9d004a70:	ac640020 	sw	a0,32(v1)
#else
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler)
#endif
{
	uart = uartT;
	irq  = irqT;
9d004a74:	24030025 	li	v1,37
9d004a78:	a043000c 	sb	v1,12(v0)
	vec  = vecT;
9d004a7c:	2403001f 	li	v1,31
9d004a80:	a043000d 	sb	v1,13(v0)
	irq  = (uint8_t)irqT;
	vec  = (uint8_t)vecT;
	ipl  = (uint8_t)iplT;
	spl  = (uint8_t)splT;
    isr  = isrHandler;
9d004a84:	3c039d00 	lui	v1,0x9d00
9d004a88:	246345fc 	addiu	v1,v1,17916
9d004a8c:	ac430008 	sw	v1,8(v0)
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler, int pinT, int pinR, ppsFunctionType ppsT, ppsFunctionType ppsR)
#else
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler)
#endif
{
	uart = uartT;
9d004a90:	24e76400 	addiu	a3,a3,25600
	** the sub-priority, bits 2-4 the priority, and bits 5-7 unused.
	*/
	ifs = ((p32_regset *)&IFS0) + (irq / 32);	//interrupt flag register set
	iec = ((p32_regset *)&IEC0) + (irq / 32);	//interrupt enable control reg set

	bit_err = 1 << (irq % 32);		//error interrupt flag/enable bit
9d004a94:	24030020 	li	v1,32
*/

#if defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler, int pinT, int pinR, ppsFunctionType ppsT, ppsFunctionType ppsR)
#else
HardwareSerial::HardwareSerial(p32_uart * uartT, int irqT, int vecT, int iplT, int splT, isrFunc isrHandler)
9d004a98:	ada61018 	sw	a2,4120(t5)
9d004a9c:	ad461244 	sw	a2,4676(t2)
#endif
{
	uart = uartT;
9d004aa0:	ac470004 	sw	a3,4(v0)
	irq  = irqT;
	vec  = vecT;
	irq  = (uint8_t)irqT;
	vec  = (uint8_t)vecT;
	ipl  = (uint8_t)iplT;
9d004aa4:	a045000e 	sb	a1,14(v0)
	spl  = (uint8_t)splT;
9d004aa8:	a040000f 	sb	zero,15(v0)
	** can be computed from the vector number. Each IPC register contains the
	** the priority bits for four vectors. Each byte of an IPC registger contains
	** the priority and sub-priority bits arranged such that  bits 0-1 are
	** the sub-priority, bits 2-4 the priority, and bits 5-7 unused.
	*/
	ifs = ((p32_regset *)&IFS0) + (irq / 32);	//interrupt flag register set
9d004aac:	ac490010 	sw	t1,16(v0)
	iec = ((p32_regset *)&IEC0) + (irq / 32);	//interrupt enable control reg set
9d004ab0:	ac480014 	sw	t0,20(v0)

	bit_err = 1 << (irq % 32);		//error interrupt flag/enable bit
9d004ab4:	ac430018 	sw	v1,24(v0)
	bit_rx  = 1 << ((irq+1) % 32);	//rx interrupt flag/enable bit
9d004ab8:	24030040 	li	v1,64
9d004abc:	ac43001c 	sw	v1,28(v0)
	bit_tx  = 1 << ((irq+2) % 32);	//tx interrupt flag/enable bit
9d004ac0:	24030080 	li	v1,128
HardwareSerial Serial1((p32_uart *)_SER1_BASE, _SER1_IRQ, _SER1_VECTOR, _SER1_IPL, _SER1_SPL, IntSer1Handler);
#endif
#endif

#if defined(_SER2_BASE)
HardwareSerial Serial2((p32_uart *)_SER2_BASE, _SER2_IRQ, _SER2_VECTOR, _SER2_IPL, _SER2_SPL, IntSer2Handler);
9d004ac4:	03e00008 	jr	ra
9d004ac8:	ac430020 	sw	v1,32(v0)

9d004acc <main>:
__attribute__((section(".comment"))) void (*__use_force_isr_install)(void) = &__use_isr_install;
}

//************************************************************************
int main(void)
{
9d004acc:	27bdffe8 	addiu	sp,sp,-24
9d004ad0:	afbf0014 	sw	ra,20(sp)
	init();
9d004ad4:	0f401049 	jal	9d004124 <init>
9d004ad8:	00000000 	nop

	setup();
9d004adc:	0f400726 	jal	9d001c98 <setup>
9d004ae0:	00000000 	nop
	while (1)
	{
		_scheduleTask();
9d004ae4:	0f40135a 	jal	9d004d68 <_scheduleTask>
9d004ae8:	00000000 	nop
		loop();
9d004aec:	0f400796 	jal	9d001e58 <loop>
9d004af0:	00000000 	nop
9d004af4:	0b4012b9 	j	9d004ae4 <main+0x18>
9d004af8:	00000000 	nop

9d004afc <_ZN5Print5writeEPKc>:

//************************************************************************
/* default implementation: may be overridden */
//************************************************************************
void Print::write(const char *str)
{
9d004afc:	27bdffe0 	addiu	sp,sp,-32
9d004b00:	afb10018 	sw	s1,24(sp)
9d004b04:	afb00014 	sw	s0,20(sp)
9d004b08:	afbf001c 	sw	ra,28(sp)
9d004b0c:	00a08021 	move	s0,a1
	while (*str)
9d004b10:	80a50000 	lb	a1,0(a1)
9d004b14:	10a0000a 	beqz	a1,9d004b40 <_ZN5Print5writeEPKc+0x44>
9d004b18:	00808821 	move	s1,a0
	{
		write(*str++);
9d004b1c:	8e220000 	lw	v0,0(s1)
9d004b20:	30a500ff 	andi	a1,a1,0xff
9d004b24:	26100001 	addiu	s0,s0,1
9d004b28:	8c420000 	lw	v0,0(v0)
9d004b2c:	0040f809 	jalr	v0
9d004b30:	02202021 	move	a0,s1
//************************************************************************
/* default implementation: may be overridden */
//************************************************************************
void Print::write(const char *str)
{
	while (*str)
9d004b34:	82050000 	lb	a1,0(s0)
9d004b38:	54a0fff9 	bnezl	a1,9d004b20 <_ZN5Print5writeEPKc+0x24>
9d004b3c:	8e220000 	lw	v0,0(s1)
	{
		write(*str++);
	}
}
9d004b40:	8fbf001c 	lw	ra,28(sp)
9d004b44:	8fb10018 	lw	s1,24(sp)
9d004b48:	8fb00014 	lw	s0,20(sp)
9d004b4c:	03e00008 	jr	ra
9d004b50:	27bd0020 	addiu	sp,sp,32
9d004b54 <_ZN5Print5writeEPKhm>:

//************************************************************************
/* default implementation: may be overridden */
//************************************************************************
void Print::write(const uint8_t *buffer, size_t size)
{
9d004b54:	27bdffe0 	addiu	sp,sp,-32
9d004b58:	afb20018 	sw	s2,24(sp)
9d004b5c:	afb10014 	sw	s1,20(sp)
9d004b60:	afb00010 	sw	s0,16(sp)
9d004b64:	afbf001c 	sw	ra,28(sp)
9d004b68:	00c08021 	move	s0,a2
9d004b6c:	00809021 	move	s2,a0
	while (size--)
9d004b70:	10c0000a 	beqz	a2,9d004b9c <_ZN5Print5writeEPKhm+0x48>
9d004b74:	00a08821 	move	s1,a1
	{
		write(*buffer++);
9d004b78:	8e420000 	lw	v0,0(s2)
9d004b7c:	92250000 	lbu	a1,0(s1)
9d004b80:	2610ffff 	addiu	s0,s0,-1
9d004b84:	8c420000 	lw	v0,0(v0)
9d004b88:	02402021 	move	a0,s2
9d004b8c:	0040f809 	jalr	v0
9d004b90:	26310001 	addiu	s1,s1,1
//************************************************************************
/* default implementation: may be overridden */
//************************************************************************
void Print::write(const uint8_t *buffer, size_t size)
{
	while (size--)
9d004b94:	5600fff9 	bnezl	s0,9d004b7c <_ZN5Print5writeEPKhm+0x28>
9d004b98:	8e420000 	lw	v0,0(s2)
	{
		write(*buffer++);
	}
}
9d004b9c:	8fbf001c 	lw	ra,28(sp)
9d004ba0:	8fb20018 	lw	s2,24(sp)
9d004ba4:	8fb10014 	lw	s1,20(sp)
9d004ba8:	8fb00010 	lw	s0,16(sp)
9d004bac:	03e00008 	jr	ra
9d004bb0:	27bd0020 	addiu	sp,sp,32

9d004bb4 <_ZN5Print5printEPKc>:
	}
}
//************************************************************************
void Print::print(const char str[])
{
	write(str);
9d004bb4:	8c820000 	lw	v0,0(a0)
9d004bb8:	8c590004 	lw	t9,4(v0)
9d004bbc:	03200008 	jr	t9
9d004bc0:	00000000 	nop

9d004bc4 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

//************************************************************************
void Print::printNumber(unsigned long n, uint8_t base)
{
9d004bc4:	27bdffc0 	addiu	sp,sp,-64
9d004bc8:	afb10038 	sw	s1,56(sp)
9d004bcc:	afb00034 	sw	s0,52(sp)
9d004bd0:	afbf003c 	sw	ra,60(sp)
9d004bd4:	00808021 	move	s0,a0
9d004bd8:	30c600ff 	andi	a2,a2,0xff
unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars.
unsigned long i = 0;

	if (n == 0)
9d004bdc:	10a00020 	beqz	a1,9d004c60 <_ZN5Print11printNumberEmh+0x9c>
9d004be0:	00008821 	move	s1,zero
		return;
	}

	while (n > 0)
	{
		buf[i++] = n % base;
9d004be4:	00a6001b 	divu	zero,a1,a2
9d004be8:	00c001f4 	teq	a2,zero,0x7
}

// Private Methods /////////////////////////////////////////////////////////////

//************************************************************************
void Print::printNumber(unsigned long n, uint8_t base)
9d004bec:	27a40010 	addiu	a0,sp,16
9d004bf0:	00911021 	addu	v0,a0,s1
		return;
	}

	while (n > 0)
	{
		buf[i++] = n % base;
9d004bf4:	26310001 	addiu	s1,s1,1
9d004bf8:	00001810 	mfhi	v1
9d004bfc:	00002812 	mflo	a1
	{
		print('0');
		return;
	}

	while (n > 0)
9d004c00:	14a0fff8 	bnez	a1,9d004be4 <_ZN5Print11printNumberEmh+0x20>
9d004c04:	a0430000 	sb	v1,0(v0)
	{
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
9d004c08:	12200011 	beqz	s1,9d004c50 <_ZN5Print11printNumberEmh+0x8c>
9d004c0c:	8fbf003c 	lw	ra,60(sp)
}

// Private Methods /////////////////////////////////////////////////////////////

//************************************************************************
void Print::printNumber(unsigned long n, uint8_t base)
9d004c10:	27a30010 	addiu	v1,sp,16
9d004c14:	00711021 	addu	v0,v1,s1
		n /= base;
	}

	for (; i > 0; i--)
	{
		print((char) (buf[i - 1] < 10 ?
9d004c18:	9042ffff 	lbu	v0,-1(v0)
					'0' + buf[i - 1] :
					'A' + buf[i - 1] - 10));
9d004c1c:	24450030 	addiu	a1,v0,48
9d004c20:	2c43000a 	sltiu	v1,v0,10
9d004c24:	7c052c20 	seb	a1,a1
9d004c28:	14600002 	bnez	v1,9d004c34 <_ZN5Print11printNumberEmh+0x70>
9d004c2c:	24420037 	addiu	v0,v0,55
9d004c30:	7c022c20 	seb	a1,v0
	{
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
9d004c34:	2631ffff 	addiu	s1,s1,-1
}

//************************************************************************
void Print::print(char c, int base)
{
	print((long) c, base);
9d004c38:	02002021 	move	a0,s0
9d004c3c:	0f401328 	jal	9d004ca0 <_ZN5Print5printEli>
9d004c40:	00003021 	move	a2,zero
	{
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
9d004c44:	1620fff3 	bnez	s1,9d004c14 <_ZN5Print11printNumberEmh+0x50>
9d004c48:	27a30010 	addiu	v1,sp,16
	{
		print((char) (buf[i - 1] < 10 ?
					'0' + buf[i - 1] :
					'A' + buf[i - 1] - 10));
	}
}
9d004c4c:	8fbf003c 	lw	ra,60(sp)
9d004c50:	8fb10038 	lw	s1,56(sp)
9d004c54:	8fb00034 	lw	s0,52(sp)
9d004c58:	03e00008 	jr	ra
9d004c5c:	27bd0040 	addiu	sp,sp,64
9d004c60:	8fbf003c 	lw	ra,60(sp)
9d004c64:	8fb10038 	lw	s1,56(sp)
9d004c68:	8fb00034 	lw	s0,52(sp)
}

//************************************************************************
void Print::print(char c, int base)
{
	print((long) c, base);
9d004c6c:	24050030 	li	a1,48
9d004c70:	00003021 	move	a2,zero
9d004c74:	0b401328 	j	9d004ca0 <_ZN5Print5printEli>
9d004c78:	27bd0040 	addiu	sp,sp,64
9d004c7c <_ZN5Print5printEmi>:
}

//************************************************************************
void Print::print(unsigned long n, int base)
{
	if (base == 0)
9d004c7c:	50c00003 	beqzl	a2,9d004c8c <_ZN5Print5printEmi+0x10>
9d004c80:	8c830000 	lw	v1,0(a0)
	{
		write(n);
	}
	else
	{
		printNumber(n, base);
9d004c84:	0b4012f1 	j	9d004bc4 <_ZN5Print11printNumberEmh>
9d004c88:	30c600ff 	andi	a2,a2,0xff
//************************************************************************
void Print::print(unsigned long n, int base)
{
	if (base == 0)
	{
		write(n);
9d004c8c:	8c790000 	lw	t9,0(v1)
9d004c90:	03200008 	jr	t9
9d004c94:	30a500ff 	andi	a1,a1,0xff

9d004c98 <_ZN5Print5printEji>:
}

//************************************************************************
void Print::print(unsigned int n, int base)
{
	print((unsigned long) n, base);
9d004c98:	0b40131f 	j	9d004c7c <_ZN5Print5printEmi>
9d004c9c:	00000000 	nop

9d004ca0 <_ZN5Print5printEli>:
}

//************************************************************************
void Print::print(long n, int base)
{
9d004ca0:	27bdffe0 	addiu	sp,sp,-32
9d004ca4:	afb10018 	sw	s1,24(sp)
9d004ca8:	afb00014 	sw	s0,20(sp)
9d004cac:	afbf001c 	sw	ra,28(sp)
9d004cb0:	00808821 	move	s1,a0
	if (base == 0)
9d004cb4:	10c00013 	beqz	a2,9d004d04 <_ZN5Print5printEli+0x64>
9d004cb8:	00a08021 	move	s0,a1
	{
		write(n);
	}
	else if (base == 10)
9d004cbc:	2402000a 	li	v0,10
9d004cc0:	10c20006 	beq	a2,v0,9d004cdc <_ZN5Print5printEli+0x3c>
9d004cc4:	8fbf001c 	lw	ra,28(sp)
	}
	else
	{
		printNumber(n, base);
	}
}
9d004cc8:	8fb10018 	lw	s1,24(sp)
9d004ccc:	8fb00014 	lw	s0,20(sp)
		}
		printNumber(n, 10);
	}
	else
	{
		printNumber(n, base);
9d004cd0:	30c600ff 	andi	a2,a2,0xff
9d004cd4:	0b4012f1 	j	9d004bc4 <_ZN5Print11printNumberEmh>
9d004cd8:	27bd0020 	addiu	sp,sp,32
	{
		write(n);
	}
	else if (base == 10)
	{
		if (n < 0)
9d004cdc:	04a00011 	bltz	a1,9d004d24 <_ZN5Print5printEli+0x84>
9d004ce0:	2405002d 	li	a1,45
		{
			print('-');
			n = -n;
		}
		printNumber(n, 10);
9d004ce4:	02202021 	move	a0,s1
9d004ce8:	02002821 	move	a1,s0
	}
	else
	{
		printNumber(n, base);
	}
}
9d004cec:	8fbf001c 	lw	ra,28(sp)
9d004cf0:	8fb10018 	lw	s1,24(sp)
9d004cf4:	8fb00014 	lw	s0,20(sp)
		if (n < 0)
		{
			print('-');
			n = -n;
		}
		printNumber(n, 10);
9d004cf8:	2406000a 	li	a2,10
	}
	else
	{
		printNumber(n, base);
9d004cfc:	0b4012f1 	j	9d004bc4 <_ZN5Print11printNumberEmh>
9d004d00:	27bd0020 	addiu	sp,sp,32
//************************************************************************
void Print::print(long n, int base)
{
	if (base == 0)
	{
		write(n);
9d004d04:	8c820000 	lw	v0,0(a0)
	}
	else
	{
		printNumber(n, base);
	}
}
9d004d08:	8fbf001c 	lw	ra,28(sp)
9d004d0c:	8fb10018 	lw	s1,24(sp)
//************************************************************************
void Print::print(long n, int base)
{
	if (base == 0)
	{
		write(n);
9d004d10:	8c590000 	lw	t9,0(v0)
	}
	else
	{
		printNumber(n, base);
	}
}
9d004d14:	8fb00014 	lw	s0,20(sp)
//************************************************************************
void Print::print(long n, int base)
{
	if (base == 0)
	{
		write(n);
9d004d18:	30a500ff 	andi	a1,a1,0xff
9d004d1c:	03200008 	jr	t9
9d004d20:	27bd0020 	addiu	sp,sp,32
}

//************************************************************************
void Print::print(char c, int base)
{
	print((long) c, base);
9d004d24:	0f401328 	jal	9d004ca0 <_ZN5Print5printEli>
9d004d28:	00003021 	move	a2,zero
	else if (base == 10)
	{
		if (n < 0)
		{
			print('-');
			n = -n;
9d004d2c:	0b401339 	j	9d004ce4 <_ZN5Print5printEli+0x44>
9d004d30:	00108023 	negu	s0,s0

9d004d34 <_initTaskManager>:
void
_initTaskManager() {
	int		id;

	for (id = 0; id < NUM_TASKS; id++) {
		rgtaskTable[id].pfnTask = 0;
9d004d34:	3c03a000 	lui	v1,0xa000
9d004d38:	24621470 	addiu	v0,v1,5232
9d004d3c:	ac601470 	sw	zero,5232(v1)
9d004d40:	ac400014 	sw	zero,20(v0)
9d004d44:	ac400028 	sw	zero,40(v0)
9d004d48:	ac40003c 	sw	zero,60(v0)
9d004d4c:	ac400050 	sw	zero,80(v0)
9d004d50:	ac400064 	sw	zero,100(v0)
9d004d54:	ac400078 	sw	zero,120(v0)
9d004d58:	ac40008c 	sw	zero,140(v0)
	}

	tmsLastEvent = 0;
9d004d5c:	af808080 	sw	zero,-32640(gp)
	tmsNextEvent = 0;

}
9d004d60:	03e00008 	jr	ra
9d004d64:	af80807c 	sw	zero,-32644(gp)

9d004d68 <_scheduleTask>:
	unsigned long	tmsCur;		//current system time
	unsigned long	tmsNxt;		//time for next event for this task
	unsigned long	dtmsNext;
	unsigned long	dtms;

	if (cntActiveTask == 0) {
9d004d68:	8f828078 	lw	v0,-32648(gp)
**	xxxN..C..........................................Lxx
**		current time and next time have wrapped: (N < L) && (C >= N)
*/

void
_scheduleTask() {
9d004d6c:	27bdffc8 	addiu	sp,sp,-56
9d004d70:	afbf0034 	sw	ra,52(sp)
9d004d74:	afb50030 	sw	s5,48(sp)
9d004d78:	afb4002c 	sw	s4,44(sp)
9d004d7c:	afb30028 	sw	s3,40(sp)
9d004d80:	afb20024 	sw	s2,36(sp)
9d004d84:	afb10020 	sw	s1,32(sp)
	unsigned long	tmsCur;		//current system time
	unsigned long	tmsNxt;		//time for next event for this task
	unsigned long	dtmsNext;
	unsigned long	dtms;

	if (cntActiveTask == 0) {
9d004d88:	1440000a 	bnez	v0,9d004db4 <_scheduleTask+0x4c>
9d004d8c:	afb0001c 	sw	s0,28(sp)

	/* Compute when the next event time will be by adding the event
	** time delta to the current time.
	*/
	tmsNextEvent = tmsCur + dtmsNext;
}
9d004d90:	8fbf0034 	lw	ra,52(sp)
9d004d94:	8fb50030 	lw	s5,48(sp)
9d004d98:	8fb4002c 	lw	s4,44(sp)
9d004d9c:	8fb30028 	lw	s3,40(sp)
9d004da0:	8fb20024 	lw	s2,36(sp)
9d004da4:	8fb10020 	lw	s1,32(sp)
9d004da8:	8fb0001c 	lw	s0,28(sp)
9d004dac:	03e00008 	jr	ra
9d004db0:	27bd0038 	addiu	sp,sp,56

	if (cntActiveTask == 0) {
		return;
	}

	tmsCur = millis();
9d004db4:	0f401030 	jal	9d0040c0 <millis>
9d004db8:	00000000 	nop

	/* The system millisecond timer will overflow every 49.71 days. The complexity of
	** this conditional is to account for the cases where either the next event time has
	** wrapped around or the current time has wrapped around.
	*/
	if ( ((tmsNextEvent >= tmsLastEvent) &&
9d004dbc:	8f84807c 	lw	a0,-32644(gp)
9d004dc0:	8f838080 	lw	v1,-32640(gp)
9d004dc4:	0083282b 	sltu	a1,a0,v1
9d004dc8:	14a00048 	bnez	a1,9d004eec <_scheduleTask+0x184>
9d004dcc:	0043182b 	sltu	v1,v0,v1
9d004dd0:	14600004 	bnez	v1,9d004de4 <_scheduleTask+0x7c>
9d004dd4:	3c10a000 	lui	s0,0xa000
				((tmsCur >= tmsLastEvent) && (tmsCur < tmsNextEvent))) ||
9d004dd8:	0044202b 	sltu	a0,v0,a0
9d004ddc:	1480ffec 	bnez	a0,9d004d90 <_scheduleTask+0x28>
9d004de0:	3c10a000 	lui	s0,0xa000
9d004de4:	26101480 	addiu	s0,s0,5248
**	xxxN..C..........................................Lxx
**		current time and next time have wrapped: (N < L) && (C >= N)
*/

void
_scheduleTask() {
9d004de8:	2413ffff 	li	s3,-1
9d004dec:	00008821 	move	s1,zero

			/* Call the event function.
			*/
			rgtaskTable[id].fsFlags |= fsBusy;
			(*rgtaskTable[id].pfnTask)(id, rgtaskTable[id].varTask);
			rgtaskTable[id].fsFlags &= ~fsBusy;
9d004df0:	2415fffe 	li	s5,-2

			/* Decrement the repeat count.
			*/
			if ((rgtaskTable[id].stTask > 0) &&
9d004df4:	3414fffe 	li	s4,0xfffe
	** the table for all events that have elapsed and call their
	** associated functions, update their next event timers, and then
	** figure out when the next event time is.
	*/
	dtmsNext = 0xFFFFFFFF;
	for (id = 0; id < NUM_TASKS; id++) {
9d004df8:	24120008 	li	s2,8
		/* If this isn't an active task, go to the next one.
		*/
		if ((rgtaskTable[id].pfnTask == 0) || 
9d004dfc:	8e03fff0 	lw	v1,-16(s0)
9d004e00:	5060002c 	beqzl	v1,9d004eb4 <_scheduleTask+0x14c>
9d004e04:	26310001 	addiu	s1,s1,1
9d004e08:	96040000 	lhu	a0,0(s0)
9d004e0c:	50800029 	beqzl	a0,9d004eb4 <_scheduleTask+0x14c>
9d004e10:	26310001 	addiu	s1,s1,1
		** occur if a user task function calls delay() or any other
		** function that causes _scheduleTask to be called recursively.
		** This prevents the task function from being called recursively
		** until the system crashes.
		*/
		if ((rgtaskTable[id].fsFlags & fsBusy) != 0) {
9d004e14:	96040002 	lhu	a0,2(s0)
9d004e18:	30840001 	andi	a0,a0,0x1
9d004e1c:	54800025 	bnezl	a0,9d004eb4 <_scheduleTask+0x14c>
9d004e20:	26310001 	addiu	s1,s1,1
			continue;
		}

		/* Check if this task's period has timed out.
		*/
		tmsNxt = rgtaskTable[id].tmsNext;
9d004e24:	8e04fff8 	lw	a0,-8(s0)
		if ( ((tmsNxt >= tmsLastEvent) && 
9d004e28:	8f858080 	lw	a1,-32640(gp)
9d004e2c:	0085302b 	sltu	a2,a0,a1
9d004e30:	10c00032 	beqz	a2,9d004efc <_scheduleTask+0x194>
9d004e34:	0044302b 	sltu	a2,v0,a0
						((tmsCur >= tmsNxt) || (tmsCur < tmsLastEvent))) ||
			 ((tmsNxt <  tmsLastEvent) && 
9d004e38:	54c0001b 	bnezl	a2,9d004ea8 <_scheduleTask+0x140>
9d004e3c:	00822023 	subu	a0,a0,v0
						((tmsCur >= tmsNxt) && (tmsCur < tmsLastEvent))) ) {
9d004e40:	0045282b 	sltu	a1,v0,a1
9d004e44:	50a00018 	beqzl	a1,9d004ea8 <_scheduleTask+0x140>
9d004e48:	00822023 	subu	a0,a0,v0
			*/
			rgtaskTable[id].tmsNext += rgtaskTable[id].tmsPeriod;

			/* Call the event function.
			*/
			rgtaskTable[id].fsFlags |= fsBusy;
9d004e4c:	96060002 	lhu	a2,2(s0)
						((tmsCur >= tmsNxt) && (tmsCur < tmsLastEvent))) ) {

			/* This task event has timed out. Update the event time for the
			** next event on this task.
			*/
			rgtaskTable[id].tmsNext += rgtaskTable[id].tmsPeriod;
9d004e50:	8e07fff4 	lw	a3,-12(s0)

			/* Call the event function.
			*/
			rgtaskTable[id].fsFlags |= fsBusy;
			(*rgtaskTable[id].pfnTask)(id, rgtaskTable[id].varTask);
9d004e54:	8e05fffc 	lw	a1,-4(s0)
			*/
			rgtaskTable[id].tmsNext += rgtaskTable[id].tmsPeriod;

			/* Call the event function.
			*/
			rgtaskTable[id].fsFlags |= fsBusy;
9d004e58:	34c60001 	ori	a2,a2,0x1
						((tmsCur >= tmsNxt) && (tmsCur < tmsLastEvent))) ) {

			/* This task event has timed out. Update the event time for the
			** next event on this task.
			*/
			rgtaskTable[id].tmsNext += rgtaskTable[id].tmsPeriod;
9d004e5c:	00e42021 	addu	a0,a3,a0
9d004e60:	ae04fff8 	sw	a0,-8(s0)

			/* Call the event function.
			*/
			rgtaskTable[id].fsFlags |= fsBusy;
			(*rgtaskTable[id].pfnTask)(id, rgtaskTable[id].varTask);
9d004e64:	afa20010 	sw	v0,16(sp)
9d004e68:	02202021 	move	a0,s1
9d004e6c:	0060f809 	jalr	v1
9d004e70:	a6060002 	sh	a2,2(s0)
			rgtaskTable[id].fsFlags &= ~fsBusy;

			/* Decrement the repeat count.
			*/
			if ((rgtaskTable[id].stTask > 0) &&
9d004e74:	96030000 	lhu	v1,0(s0)

			/* Call the event function.
			*/
			rgtaskTable[id].fsFlags |= fsBusy;
			(*rgtaskTable[id].pfnTask)(id, rgtaskTable[id].varTask);
			rgtaskTable[id].fsFlags &= ~fsBusy;
9d004e78:	96050002 	lhu	a1,2(s0)

			/* Decrement the repeat count.
			*/
			if ((rgtaskTable[id].stTask > 0) &&
9d004e7c:	8fa20010 	lw	v0,16(sp)
9d004e80:	2463ffff 	addiu	v1,v1,-1
9d004e84:	3063ffff 	andi	v1,v1,0xffff

			/* Call the event function.
			*/
			rgtaskTable[id].fsFlags |= fsBusy;
			(*rgtaskTable[id].pfnTask)(id, rgtaskTable[id].varTask);
			rgtaskTable[id].fsFlags &= ~fsBusy;
9d004e88:	00b52824 	and	a1,a1,s5

			/* Decrement the repeat count.
			*/
			if ((rgtaskTable[id].stTask > 0) &&
9d004e8c:	0074202b 	sltu	a0,v1,s4
9d004e90:	10800003 	beqz	a0,9d004ea0 <_scheduleTask+0x138>
9d004e94:	a6050002 	sh	a1,2(s0)
				rgtaskTable[id].stTask -= 1;

				/* The task state counter has gone to 0. This task is now
				** disabled.
				*/
				if (rgtaskTable[id].stTask == 0) {
9d004e98:	1060001c 	beqz	v1,9d004f0c <_scheduleTask+0x1a4>
9d004e9c:	a6030000 	sh	v1,0(s0)
9d004ea0:	8e04fff8 	lw	a0,-8(s0)
		}

		/* Compute delta of this event time from the current time and
		** remember it if it is less than the current delta.
		*/
		dtms = rgtaskTable[id].tmsNext - tmsCur;
9d004ea4:	00822023 	subu	a0,a0,v0
		if (dtms < dtmsNext) {
9d004ea8:	0093182b 	sltu	v1,a0,s3
9d004eac:	0083980b 	movn	s3,a0,v1
	** the table for all events that have elapsed and call their
	** associated functions, update their next event timers, and then
	** figure out when the next event time is.
	*/
	dtmsNext = 0xFFFFFFFF;
	for (id = 0; id < NUM_TASKS; id++) {
9d004eb0:	26310001 	addiu	s1,s1,1
9d004eb4:	1632ffd1 	bne	s1,s2,9d004dfc <_scheduleTask+0x94>
9d004eb8:	26100014 	addiu	s0,s0,20

	/* Compute when the next event time will be by adding the event
	** time delta to the current time.
	*/
	tmsNextEvent = tmsCur + dtmsNext;
}
9d004ebc:	8fbf0034 	lw	ra,52(sp)
	tmsLastEvent = tmsCur;

	/* Compute when the next event time will be by adding the event
	** time delta to the current time.
	*/
	tmsNextEvent = tmsCur + dtmsNext;
9d004ec0:	02629821 	addu	s3,s3,v0
9d004ec4:	af93807c 	sw	s3,-32644(gp)
}
9d004ec8:	8fb50030 	lw	s5,48(sp)
9d004ecc:	8fb4002c 	lw	s4,44(sp)
9d004ed0:	8fb30028 	lw	s3,40(sp)
9d004ed4:	8fb20024 	lw	s2,36(sp)
9d004ed8:	8fb10020 	lw	s1,32(sp)
9d004edc:	8fb0001c 	lw	s0,28(sp)
	}

	/* All done with event tasks. Update the last event time with
	** the current time.
	*/
	tmsLastEvent = tmsCur;
9d004ee0:	af828080 	sw	v0,-32640(gp)

	/* Compute when the next event time will be by adding the event
	** time delta to the current time.
	*/
	tmsNextEvent = tmsCur + dtmsNext;
}
9d004ee4:	03e00008 	jr	ra
9d004ee8:	27bd0038 	addiu	sp,sp,56
	** this conditional is to account for the cases where either the next event time has
	** wrapped around or the current time has wrapped around.
	*/
	if ( ((tmsNextEvent >= tmsLastEvent) &&
				((tmsCur >= tmsLastEvent) && (tmsCur < tmsNextEvent))) ||
		 ((tmsNextEvent < tmsLastEvent) &&
9d004eec:	5460ffbb 	bnezl	v1,9d004ddc <_scheduleTask+0x74>
9d004ef0:	0044202b 	sltu	a0,v0,a0

	/* Compute when the next event time will be by adding the event
	** time delta to the current time.
	*/
	tmsNextEvent = tmsCur + dtmsNext;
}
9d004ef4:	0b401365 	j	9d004d94 <_scheduleTask+0x2c>
9d004ef8:	8fbf0034 	lw	ra,52(sp)
		}

		/* Check if this task's period has timed out.
		*/
		tmsNxt = rgtaskTable[id].tmsNext;
		if ( ((tmsNxt >= tmsLastEvent) && 
9d004efc:	50c0ffd4 	beqzl	a2,9d004e50 <_scheduleTask+0xe8>
9d004f00:	96060002 	lhu	a2,2(s0)
						((tmsCur >= tmsNxt) || (tmsCur < tmsLastEvent))) ||
			 ((tmsNxt <  tmsLastEvent) && 
						((tmsCur >= tmsNxt) && (tmsCur < tmsLastEvent))) ) {
9d004f04:	0b401391 	j	9d004e44 <_scheduleTask+0xdc>
9d004f08:	0045282b 	sltu	a1,v0,a1
				/* The task state counter has gone to 0. This task is now
				** disabled.
				*/
				if (rgtaskTable[id].stTask == 0) {
					rgtaskTable[id].tmsNext = 0;
					cntActiveTask -= 1;
9d004f0c:	8f838078 	lw	v1,-32648(gp)

				/* The task state counter has gone to 0. This task is now
				** disabled.
				*/
				if (rgtaskTable[id].stTask == 0) {
					rgtaskTable[id].tmsNext = 0;
9d004f10:	ae00fff8 	sw	zero,-8(s0)
					cntActiveTask -= 1;
9d004f14:	2463ffff 	addiu	v1,v1,-1
					continue;
9d004f18:	0b4013ac 	j	9d004eb0 <_scheduleTask+0x148>
9d004f1c:	af838078 	sw	v1,-32648(gp)

9d004f20 <__adddf3>:
9d004f20:	7cad07c0 	ext	t5,a1,0x1f,0x1
9d004f24:	7cab9800 	ext	t3,a1,0x0,0x14
9d004f28:	7cea9800 	ext	t2,a3,0x0,0x14
9d004f2c:	00067742 	srl	t6,a2,0x1d
9d004f30:	000b58c0 	sll	t3,t3,0x3
9d004f34:	00047f42 	srl	t7,a0,0x1d
9d004f38:	000a50c0 	sll	t2,t2,0x3
9d004f3c:	000767c2 	srl	t4,a3,0x1f
9d004f40:	31a900ff 	andi	t1,t5,0xff
9d004f44:	7ca55500 	ext	a1,a1,0x14,0xb
9d004f48:	016f5825 	or	t3,t3,t7
9d004f4c:	000440c0 	sll	t0,a0,0x3
9d004f50:	7ce75500 	ext	a3,a3,0x14,0xb
9d004f54:	014e5025 	or	t2,t2,t6
9d004f58:	112c006e 	beq	t1,t4,9d005114 <__adddf3+0x1f4>
9d004f5c:	000630c0 	sll	a2,a2,0x3
9d004f60:	00a71823 	subu	v1,a1,a3
9d004f64:	186000bc 	blez	v1,9d005258 <__adddf3+0x338>
9d004f68:	00000000 	nop
9d004f6c:	14e0000d 	bnez	a3,9d004fa4 <__adddf3+0x84>
9d004f70:	240207ff 	li	v0,2047
9d004f74:	01461025 	or	v0,t2,a2
9d004f78:	50400096 	beqzl	v0,9d0051d4 <__adddf3+0x2b4>
9d004f7c:	24a30001 	addiu	v1,a1,1
9d004f80:	2463ffff 	addiu	v1,v1,-1
9d004f84:	546000a6 	bnezl	v1,9d005220 <__adddf3+0x300>
9d004f88:	240207ff 	li	v0,2047
9d004f8c:	01062023 	subu	a0,t0,a2
9d004f90:	016a1023 	subu	v0,t3,t2
9d004f94:	0104402b 	sltu	t0,t0,a0
9d004f98:	00481023 	subu	v0,v0,t0
9d004f9c:	0b401401 	j	9d005004 <__adddf3+0xe4>
9d004fa0:	00a03821 	move	a3,a1
9d004fa4:	10a200a1 	beq	a1,v0,9d00522c <__adddf3+0x30c>
9d004fa8:	310e000f 	andi	t6,t0,0xf
9d004fac:	3c020080 	lui	v0,0x80
9d004fb0:	01425025 	or	t2,t2,v0
9d004fb4:	28620039 	slti	v0,v1,57
9d004fb8:	104000c6 	beqz	v0,9d0052d4 <__adddf3+0x3b4>
9d004fbc:	01462025 	or	a0,t2,a2
9d004fc0:	28620020 	slti	v0,v1,32
9d004fc4:	104000e6 	beqz	v0,9d005360 <__adddf3+0x440>
9d004fc8:	24040020 	li	a0,32
9d004fcc:	24020020 	li	v0,32
9d004fd0:	00431023 	subu	v0,v0,v1
9d004fd4:	004a3804 	sllv	a3,t2,v0
9d004fd8:	00662006 	srlv	a0,a2,v1
9d004fdc:	00463004 	sllv	a2,a2,v0
9d004fe0:	00e42025 	or	a0,a3,a0
9d004fe4:	0006302b 	sltu	a2,zero,a2
9d004fe8:	00862025 	or	a0,a0,a2
9d004fec:	006a1006 	srlv	v0,t2,v1
9d004ff0:	01042023 	subu	a0,t0,a0
9d004ff4:	01621023 	subu	v0,t3,v0
9d004ff8:	0104402b 	sltu	t0,t0,a0
9d004ffc:	00481023 	subu	v0,v0,t0
9d005000:	00a03821 	move	a3,a1
9d005004:	7c4305c0 	ext	v1,v0,0x17,0x1
9d005008:	10600090 	beqz	v1,9d00524c <__adddf3+0x32c>
9d00500c:	7c4db000 	ext	t5,v0,0x0,0x17
9d005010:	15a00003 	bnez	t5,9d005020 <__adddf3+0x100>
9d005014:	71a21020 	clz	v0,t5
9d005018:	70821020 	clz	v0,a0
9d00501c:	24420020 	addiu	v0,v0,32
9d005020:	2443fff8 	addiu	v1,v0,-8
9d005024:	28650020 	slti	a1,v1,32
9d005028:	10a000a7 	beqz	a1,9d0052c8 <__adddf3+0x3a8>
9d00502c:	2442ffd8 	addiu	v0,v0,-40
9d005030:	00031023 	negu	v0,v1
9d005034:	00441006 	srlv	v0,a0,v0
9d005038:	006d6804 	sllv	t5,t5,v1
9d00503c:	004d6825 	or	t5,v0,t5
9d005040:	00642004 	sllv	a0,a0,v1
9d005044:	0067102a 	slt	v0,v1,a3
9d005048:	1440007d 	bnez	v0,9d005240 <__adddf3+0x320>
9d00504c:	3c02ff7f 	lui	v0,0xff7f
9d005050:	00673823 	subu	a3,v1,a3
9d005054:	24e70001 	addiu	a3,a3,1
9d005058:	28e20020 	slti	v0,a3,32
9d00505c:	104000b3 	beqz	v0,9d00532c <__adddf3+0x40c>
9d005060:	24030020 	li	v1,32
9d005064:	24020020 	li	v0,32
9d005068:	00471023 	subu	v0,v0,a3
9d00506c:	00e41806 	srlv	v1,a0,a3
9d005070:	00442004 	sllv	a0,a0,v0
9d005074:	004d1004 	sllv	v0,t5,v0
9d005078:	00621025 	or	v0,v1,v0
9d00507c:	0004202b 	sltu	a0,zero,a0
9d005080:	00442025 	or	a0,v0,a0
9d005084:	00ed1006 	srlv	v0,t5,a3
9d005088:	308e000f 	andi	t6,a0,0xf
9d00508c:	24030001 	li	v1,1
9d005090:	00003821 	move	a3,zero
9d005094:	24050004 	li	a1,4
9d005098:	11c50005 	beq	t6,a1,9d0050b0 <__adddf3+0x190>
9d00509c:	00802821 	move	a1,a0
9d0050a0:	24850004 	addiu	a1,a0,4
9d0050a4:	00a4202b 	sltu	a0,a1,a0
9d0050a8:	00441021 	addu	v0,v0,a0
9d0050ac:	24e30001 	addiu	v1,a3,1
9d0050b0:	7c4405c0 	ext	a0,v0,0x17,0x1
9d0050b4:	50800009 	beqzl	a0,9d0050dc <__adddf3+0x1bc>
9d0050b8:	306307ff 	andi	v1,v1,0x7ff
9d0050bc:	240407ff 	li	a0,2047
9d0050c0:	10640078 	beq	v1,a0,9d0052a4 <__adddf3+0x384>
9d0050c4:	3c04ff7f 	lui	a0,0xff7f
9d0050c8:	3484ffff 	ori	a0,a0,0xffff
9d0050cc:	00603821 	move	a3,v1
9d0050d0:	00441024 	and	v0,v0,a0
9d0050d4:	24630001 	addiu	v1,v1,1
9d0050d8:	306307ff 	andi	v1,v1,0x7ff
9d0050dc:	00023740 	sll	a2,v0,0x1d
9d0050e0:	000528c2 	srl	a1,a1,0x3
9d0050e4:	28630002 	slti	v1,v1,2
9d0050e8:	00c53025 	or	a2,a2,a1
9d0050ec:	14600031 	bnez	v1,9d0051b4 <__adddf3+0x294>
9d0050f0:	000210c2 	srl	v0,v0,0x3
9d0050f4:	7c429800 	ext	v0,v0,0x0,0x14
9d0050f8:	30e707ff 	andi	a3,a3,0x7ff
9d0050fc:	00001821 	move	v1,zero
9d005100:	7c439804 	ins	v1,v0,0x0,0x14
9d005104:	7ce3f504 	ins	v1,a3,0x14,0xb
9d005108:	7d23ffc4 	ins	v1,t1,0x1f,0x1
9d00510c:	03e00008 	jr	ra
9d005110:	00c01021 	move	v0,a2
9d005114:	00a71023 	subu	v0,a1,a3
9d005118:	18400071 	blez	v0,9d0052e0 <__adddf3+0x3c0>
9d00511c:	00000000 	nop
9d005120:	10e00034 	beqz	a3,9d0051f4 <__adddf3+0x2d4>
9d005124:	01461825 	or	v1,t2,a2
9d005128:	240307ff 	li	v1,2047
9d00512c:	10a3003f 	beq	a1,v1,9d00522c <__adddf3+0x30c>
9d005130:	310e000f 	andi	t6,t0,0xf
9d005134:	3c030080 	lui	v1,0x80
9d005138:	01435025 	or	t2,t2,v1
9d00513c:	28430039 	slti	v1,v0,57
9d005140:	146000b5 	bnez	v1,9d005418 <__adddf3+0x4f8>
9d005144:	28430020 	slti	v1,v0,32
9d005148:	01462025 	or	a0,t2,a2
9d00514c:	00001021 	move	v0,zero
9d005150:	0004202b 	sltu	a0,zero,a0
9d005154:	00882021 	addu	a0,a0,t0
9d005158:	004b1021 	addu	v0,v0,t3
9d00515c:	0088402b 	sltu	t0,a0,t0
9d005160:	00481021 	addu	v0,v0,t0
9d005164:	00a03821 	move	a3,a1
9d005168:	7c4305c0 	ext	v1,v0,0x17,0x1
9d00516c:	10600038 	beqz	v1,9d005250 <__adddf3+0x330>
9d005170:	24e30001 	addiu	v1,a3,1
9d005174:	24e70001 	addiu	a3,a3,1
9d005178:	240307ff 	li	v1,2047
9d00517c:	50e300d7 	beql	a3,v1,9d0054dc <__adddf3+0x5bc>
9d005180:	31a90001 	andi	t1,t5,0x1
9d005184:	3c03ff7f 	lui	v1,0xff7f
9d005188:	3463ffff 	ori	v1,v1,0xffff
9d00518c:	00431024 	and	v0,v0,v1
9d005190:	30830001 	andi	v1,a0,0x1
9d005194:	00042042 	srl	a0,a0,0x1
9d005198:	00642025 	or	a0,v1,a0
9d00519c:	00021fc0 	sll	v1,v0,0x1f
9d0051a0:	00832025 	or	a0,a0,v1
9d0051a4:	00021042 	srl	v0,v0,0x1
9d0051a8:	24e30001 	addiu	v1,a3,1
9d0051ac:	0b401425 	j	9d005094 <__adddf3+0x174>
9d0051b0:	308e000f 	andi	t6,a0,0xf
9d0051b4:	00c21825 	or	v1,a2,v0
9d0051b8:	50600175 	beqzl	v1,9d005790 <__adddf3+0x870>
9d0051bc:	30e707ff 	andi	a3,a3,0x7ff
9d0051c0:	50e0ffce 	beqzl	a3,9d0050fc <__adddf3+0x1dc>
9d0051c4:	7c429800 	ext	v0,v0,0x0,0x14
9d0051c8:	3c030008 	lui	v1,0x8
9d0051cc:	0b40143d 	j	9d0050f4 <__adddf3+0x1d4>
9d0051d0:	00431025 	or	v0,v0,v1
9d0051d4:	00a03821 	move	a3,a1
9d0051d8:	310e000f 	andi	t6,t0,0xf
9d0051dc:	24050004 	li	a1,4
9d0051e0:	01601021 	move	v0,t3
9d0051e4:	15c5ffae 	bne	t6,a1,9d0050a0 <__adddf3+0x180>
9d0051e8:	01002021 	move	a0,t0
9d0051ec:	0b40142c 	j	9d0050b0 <__adddf3+0x190>
9d0051f0:	00802821 	move	a1,a0
9d0051f4:	1060fff7 	beqz	v1,9d0051d4 <__adddf3+0x2b4>
9d0051f8:	24a30001 	addiu	v1,a1,1
9d0051fc:	2442ffff 	addiu	v0,v0,-1
9d005200:	1440009a 	bnez	v0,9d00546c <__adddf3+0x54c>
9d005204:	240307ff 	li	v1,2047
9d005208:	00c82021 	addu	a0,a2,t0
9d00520c:	014b1021 	addu	v0,t2,t3
9d005210:	0088402b 	sltu	t0,a0,t0
9d005214:	00481021 	addu	v0,v0,t0
9d005218:	0b40145a 	j	9d005168 <__adddf3+0x248>
9d00521c:	00a03821 	move	a3,a1
9d005220:	54a2ff65 	bnel	a1,v0,9d004fb8 <__adddf3+0x98>
9d005224:	28620039 	slti	v0,v1,57
9d005228:	310e000f 	andi	t6,t0,0xf
9d00522c:	01601021 	move	v0,t3
9d005230:	01002021 	move	a0,t0
9d005234:	24030800 	li	v1,2048
9d005238:	0b401425 	j	9d005094 <__adddf3+0x174>
9d00523c:	240707ff 	li	a3,2047
9d005240:	3442ffff 	ori	v0,v0,0xffff
9d005244:	00e33823 	subu	a3,a3,v1
9d005248:	01a21024 	and	v0,t5,v0
9d00524c:	24e30001 	addiu	v1,a3,1
9d005250:	0b401425 	j	9d005094 <__adddf3+0x174>
9d005254:	308e000f 	andi	t6,a0,0xf
9d005258:	1460004b 	bnez	v1,9d005388 <__adddf3+0x468>
9d00525c:	24a20001 	addiu	v0,a1,1
9d005260:	304207ff 	andi	v0,v0,0x7ff
9d005264:	28420002 	slti	v0,v0,2
9d005268:	1440008e 	bnez	v0,9d0054a4 <__adddf3+0x584>
9d00526c:	01062023 	subu	a0,t0,a2
9d005270:	0104102b 	sltu	v0,t0,a0
9d005274:	016a6823 	subu	t5,t3,t2
9d005278:	01a26823 	subu	t5,t5,v0
9d00527c:	7da205c0 	ext	v0,t5,0x17,0x1
9d005280:	1040005d 	beqz	v0,9d0053f8 <__adddf3+0x4d8>
9d005284:	01a41025 	or	v0,t5,a0
9d005288:	00c82023 	subu	a0,a2,t0
9d00528c:	014b5023 	subu	t2,t2,t3
9d005290:	00c4302b 	sltu	a2,a2,a0
9d005294:	01466823 	subu	t5,t2,a2
9d005298:	00a03821 	move	a3,a1
9d00529c:	0b401404 	j	9d005010 <__adddf3+0xf0>
9d0052a0:	01804821 	move	t1,t4
9d0052a4:	00001021 	move	v0,zero
9d0052a8:	00001821 	move	v1,zero
9d0052ac:	240707ff 	li	a3,2047
9d0052b0:	7c439804 	ins	v1,v0,0x0,0x14
9d0052b4:	00003021 	move	a2,zero
9d0052b8:	7ce3f504 	ins	v1,a3,0x14,0xb
9d0052bc:	7d23ffc4 	ins	v1,t1,0x1f,0x1
9d0052c0:	03e00008 	jr	ra
9d0052c4:	00c01021 	move	v0,a2
9d0052c8:	00446804 	sllv	t5,a0,v0
9d0052cc:	0b401411 	j	9d005044 <__adddf3+0x124>
9d0052d0:	00002021 	move	a0,zero
9d0052d4:	00001021 	move	v0,zero
9d0052d8:	0b4013fc 	j	9d004ff0 <__adddf3+0xd0>
9d0052dc:	0004202b 	sltu	a0,zero,a0
9d0052e0:	1440008c 	bnez	v0,9d005514 <__adddf3+0x5f4>
9d0052e4:	00000000 	nop
9d0052e8:	24a70001 	addiu	a3,a1,1
9d0052ec:	30e207ff 	andi	v0,a3,0x7ff
9d0052f0:	28420002 	slti	v0,v0,2
9d0052f4:	14400061 	bnez	v0,9d00547c <__adddf3+0x55c>
9d0052f8:	240207ff 	li	v0,2047
9d0052fc:	10e20076 	beq	a3,v0,9d0054d8 <__adddf3+0x5b8>
9d005300:	00c83021 	addu	a2,a2,t0
9d005304:	00c8402b 	sltu	t0,a2,t0
9d005308:	014b1021 	addu	v0,t2,t3
9d00530c:	00481021 	addu	v0,v0,t0
9d005310:	00021fc0 	sll	v1,v0,0x1f
9d005314:	00063042 	srl	a2,a2,0x1
9d005318:	00c32025 	or	a0,a2,v1
9d00531c:	00021042 	srl	v0,v0,0x1
9d005320:	24a30002 	addiu	v1,a1,2
9d005324:	0b401425 	j	9d005094 <__adddf3+0x174>
9d005328:	308e000f 	andi	t6,a0,0xf
9d00532c:	00ed2806 	srlv	a1,t5,a3
9d005330:	10e30003 	beq	a3,v1,9d005340 <__adddf3+0x420>
9d005334:	00001021 	move	v0,zero
9d005338:	00071023 	negu	v0,a3
9d00533c:	004d1004 	sllv	v0,t5,v0
9d005340:	00442025 	or	a0,v0,a0
9d005344:	0004202b 	sltu	a0,zero,a0
9d005348:	00852025 	or	a0,a0,a1
9d00534c:	308e000f 	andi	t6,a0,0xf
9d005350:	24030001 	li	v1,1
9d005354:	00001021 	move	v0,zero
9d005358:	0b401425 	j	9d005094 <__adddf3+0x174>
9d00535c:	00003821 	move	a3,zero
9d005360:	006a3806 	srlv	a3,t2,v1
9d005364:	10640003 	beq	v1,a0,9d005374 <__adddf3+0x454>
9d005368:	00001021 	move	v0,zero
9d00536c:	00031823 	negu	v1,v1
9d005370:	006a1004 	sllv	v0,t2,v1
9d005374:	00462025 	or	a0,v0,a2
9d005378:	0004202b 	sltu	a0,zero,a0
9d00537c:	00872025 	or	a0,a0,a3
9d005380:	0b4013fc 	j	9d004ff0 <__adddf3+0xd0>
9d005384:	00001021 	move	v0,zero
9d005388:	10a0002f 	beqz	a1,9d005448 <__adddf3+0x528>
9d00538c:	00031823 	negu	v1,v1
9d005390:	240207ff 	li	v0,2047
9d005394:	10e20078 	beq	a3,v0,9d005578 <__adddf3+0x658>
9d005398:	30ce000f 	andi	t6,a2,0xf
9d00539c:	3c020080 	lui	v0,0x80
9d0053a0:	01625825 	or	t3,t3,v0
9d0053a4:	28620039 	slti	v0,v1,57
9d0053a8:	10400094 	beqz	v0,9d0055fc <__adddf3+0x6dc>
9d0053ac:	01682025 	or	a0,t3,t0
9d0053b0:	28620020 	slti	v0,v1,32
9d0053b4:	504000cc 	beqzl	v0,9d0056e8 <__adddf3+0x7c8>
9d0053b8:	24040020 	li	a0,32
9d0053bc:	24020020 	li	v0,32
9d0053c0:	00431023 	subu	v0,v0,v1
9d0053c4:	004b2804 	sllv	a1,t3,v0
9d0053c8:	00682006 	srlv	a0,t0,v1
9d0053cc:	00481004 	sllv	v0,t0,v0
9d0053d0:	0002102b 	sltu	v0,zero,v0
9d0053d4:	00a42025 	or	a0,a1,a0
9d0053d8:	00822025 	or	a0,a0,v0
9d0053dc:	006b1006 	srlv	v0,t3,v1
9d0053e0:	00c42023 	subu	a0,a2,a0
9d0053e4:	01421023 	subu	v0,t2,v0
9d0053e8:	00c4302b 	sltu	a2,a2,a0
9d0053ec:	00461023 	subu	v0,v0,a2
9d0053f0:	0b401401 	j	9d005004 <__adddf3+0xe4>
9d0053f4:	01804821 	move	t1,t4
9d0053f8:	1440ff05 	bnez	v0,9d005010 <__adddf3+0xf0>
9d0053fc:	00a03821 	move	a3,a1
9d005400:	00004821 	move	t1,zero
9d005404:	24030001 	li	v1,1
9d005408:	00001021 	move	v0,zero
9d00540c:	24050004 	li	a1,4
9d005410:	0b40142c 	j	9d0050b0 <__adddf3+0x190>
9d005414:	00003821 	move	a3,zero
9d005418:	50600034 	beqzl	v1,9d0054ec <__adddf3+0x5cc>
9d00541c:	24040020 	li	a0,32
9d005420:	24030020 	li	v1,32
9d005424:	00621823 	subu	v1,v1,v0
9d005428:	006a3804 	sllv	a3,t2,v1
9d00542c:	00462006 	srlv	a0,a2,v0
9d005430:	00661804 	sllv	v1,a2,v1
9d005434:	00e42025 	or	a0,a3,a0
9d005438:	0003182b 	sltu	v1,zero,v1
9d00543c:	00832025 	or	a0,a0,v1
9d005440:	0b401455 	j	9d005154 <__adddf3+0x234>
9d005444:	004a1006 	srlv	v0,t2,v0
9d005448:	01681025 	or	v0,t3,t0
9d00544c:	54400063 	bnezl	v0,9d0055dc <__adddf3+0x6bc>
9d005450:	2463ffff 	addiu	v1,v1,-1
9d005454:	24e30001 	addiu	v1,a3,1
9d005458:	30ce000f 	andi	t6,a2,0xf
9d00545c:	01401021 	move	v0,t2
9d005460:	00c02021 	move	a0,a2
9d005464:	0b401425 	j	9d005094 <__adddf3+0x174>
9d005468:	01804821 	move	t1,t4
9d00546c:	54a3ff34 	bnel	a1,v1,9d005140 <__adddf3+0x220>
9d005470:	28430039 	slti	v1,v0,57
9d005474:	0b40148b 	j	9d00522c <__adddf3+0x30c>
9d005478:	310e000f 	andi	t6,t0,0xf
9d00547c:	14a0008d 	bnez	a1,9d0056b4 <__adddf3+0x794>
9d005480:	01681025 	or	v0,t3,t0
9d005484:	544000ac 	bnezl	v0,9d005738 <__adddf3+0x818>
9d005488:	01461025 	or	v0,t2,a2
9d00548c:	30ce000f 	andi	t6,a2,0xf
9d005490:	01401021 	move	v0,t2
9d005494:	00c02021 	move	a0,a2
9d005498:	24030001 	li	v1,1
9d00549c:	0b401425 	j	9d005094 <__adddf3+0x174>
9d0054a0:	00003821 	move	a3,zero
9d0054a4:	14a00025 	bnez	a1,9d00553c <__adddf3+0x61c>
9d0054a8:	01681025 	or	v0,t3,t0
9d0054ac:	1440006f 	bnez	v0,9d00566c <__adddf3+0x74c>
9d0054b0:	01461025 	or	v0,t2,a2
9d0054b4:	5040ffd3 	beqzl	v0,9d005404 <__adddf3+0x4e4>
9d0054b8:	00004821 	move	t1,zero
9d0054bc:	30ce000f 	andi	t6,a2,0xf
9d0054c0:	01401021 	move	v0,t2
9d0054c4:	00c02021 	move	a0,a2
9d0054c8:	01804821 	move	t1,t4
9d0054cc:	24030001 	li	v1,1
9d0054d0:	0b401425 	j	9d005094 <__adddf3+0x174>
9d0054d4:	00003821 	move	a3,zero
9d0054d8:	31a90001 	andi	t1,t5,0x1
9d0054dc:	24030800 	li	v1,2048
9d0054e0:	00001021 	move	v0,zero
9d0054e4:	0b40142c 	j	9d0050b0 <__adddf3+0x190>
9d0054e8:	24050004 	li	a1,4
9d0054ec:	004a3806 	srlv	a3,t2,v0
9d0054f0:	10440003 	beq	v0,a0,9d005500 <__adddf3+0x5e0>
9d0054f4:	00001821 	move	v1,zero
9d0054f8:	00021023 	negu	v0,v0
9d0054fc:	004a1804 	sllv	v1,t2,v0
9d005500:	00662025 	or	a0,v1,a2
9d005504:	0004202b 	sltu	a0,zero,a0
9d005508:	00872025 	or	a0,a0,a3
9d00550c:	0b401455 	j	9d005154 <__adddf3+0x234>
9d005510:	00001021 	move	v0,zero
9d005514:	14a0003c 	bnez	a1,9d005608 <__adddf3+0x6e8>
9d005518:	00021023 	negu	v0,v0
9d00551c:	01681825 	or	v1,t3,t0
9d005520:	5460007b 	bnezl	v1,9d005710 <__adddf3+0x7f0>
9d005524:	2442ffff 	addiu	v0,v0,-1
9d005528:	24e30001 	addiu	v1,a3,1
9d00552c:	30ce000f 	andi	t6,a2,0xf
9d005530:	01401021 	move	v0,t2
9d005534:	0b401425 	j	9d005094 <__adddf3+0x174>
9d005538:	00c02021 	move	a0,a2
9d00553c:	54400014 	bnezl	v0,9d005590 <__adddf3+0x670>
9d005540:	01463025 	or	a2,t2,a2
9d005544:	01461025 	or	v0,t2,a2
9d005548:	1440000b 	bnez	v0,9d005578 <__adddf3+0x658>
9d00554c:	30ce000f 	andi	t6,a2,0xf
9d005550:	3c02007f 	lui	v0,0x7f
9d005554:	00004821 	move	t1,zero
9d005558:	24030800 	li	v1,2048
9d00555c:	3442ffff 	ori	v0,v0,0xffff
9d005560:	2405fffc 	li	a1,-4
9d005564:	0b40142c 	j	9d0050b0 <__adddf3+0x190>
9d005568:	240707ff 	li	a3,2047
9d00556c:	54e2ff8e 	bnel	a3,v0,9d0053a8 <__adddf3+0x488>
9d005570:	28620039 	slti	v0,v1,57
9d005574:	30ce000f 	andi	t6,a2,0xf
9d005578:	01401021 	move	v0,t2
9d00557c:	00c02021 	move	a0,a2
9d005580:	01804821 	move	t1,t4
9d005584:	24030800 	li	v1,2048
9d005588:	0b401425 	j	9d005094 <__adddf3+0x174>
9d00558c:	240707ff 	li	a3,2047
9d005590:	10c0ff26 	beqz	a2,9d00522c <__adddf3+0x30c>
9d005594:	310e000f 	andi	t6,t0,0xf
9d005598:	000b18c2 	srl	v1,t3,0x3
9d00559c:	000a10c2 	srl	v0,t2,0x3
9d0055a0:	00431025 	or	v0,v0,v1
9d0055a4:	7c4204c0 	ext	v0,v0,0x13,0x1
9d0055a8:	54400072 	bnezl	v0,9d005774 <__adddf3+0x854>
9d0055ac:	3c02007f 	lui	v0,0x7f
9d0055b0:	000840c2 	srl	t0,t0,0x3
9d0055b4:	000b2740 	sll	a0,t3,0x1d
9d0055b8:	00882025 	or	a0,a0,t0
9d0055bc:	00041742 	srl	v0,a0,0x1d
9d0055c0:	000318c0 	sll	v1,v1,0x3
9d0055c4:	000420c0 	sll	a0,a0,0x3
9d0055c8:	00431025 	or	v0,v0,v1
9d0055cc:	308e000f 	andi	t6,a0,0xf
9d0055d0:	24030800 	li	v1,2048
9d0055d4:	0b401425 	j	9d005094 <__adddf3+0x174>
9d0055d8:	240707ff 	li	a3,2047
9d0055dc:	5460ffe3 	bnezl	v1,9d00556c <__adddf3+0x64c>
9d0055e0:	240207ff 	li	v0,2047
9d0055e4:	00c82023 	subu	a0,a2,t0
9d0055e8:	014b1023 	subu	v0,t2,t3
9d0055ec:	00c4302b 	sltu	a2,a2,a0
9d0055f0:	00461023 	subu	v0,v0,a2
9d0055f4:	0b401401 	j	9d005004 <__adddf3+0xe4>
9d0055f8:	01804821 	move	t1,t4
9d0055fc:	00001021 	move	v0,zero
9d005600:	0b4014f8 	j	9d0053e0 <__adddf3+0x4c0>
9d005604:	0004202b 	sltu	a0,zero,a0
9d005608:	240307ff 	li	v1,2047
9d00560c:	10e3002c 	beq	a3,v1,9d0056c0 <__adddf3+0x7a0>
9d005610:	30ce000f 	andi	t6,a2,0xf
9d005614:	3c030080 	lui	v1,0x80
9d005618:	01635825 	or	t3,t3,v1
9d00561c:	28430039 	slti	v1,v0,57
9d005620:	10600042 	beqz	v1,9d00572c <__adddf3+0x80c>
9d005624:	01682025 	or	a0,t3,t0
9d005628:	28430020 	slti	v1,v0,32
9d00562c:	50600063 	beqzl	v1,9d0057bc <__adddf3+0x89c>
9d005630:	24040020 	li	a0,32
9d005634:	24030020 	li	v1,32
9d005638:	00621823 	subu	v1,v1,v0
9d00563c:	006b2804 	sllv	a1,t3,v1
9d005640:	00482006 	srlv	a0,t0,v0
9d005644:	00681804 	sllv	v1,t0,v1
9d005648:	00a42025 	or	a0,a1,a0
9d00564c:	0003182b 	sltu	v1,zero,v1
9d005650:	00832025 	or	a0,a0,v1
9d005654:	004b1006 	srlv	v0,t3,v0
9d005658:	00862021 	addu	a0,a0,a2
9d00565c:	004a1021 	addu	v0,v0,t2
9d005660:	0086302b 	sltu	a2,a0,a2
9d005664:	0b40145a 	j	9d005168 <__adddf3+0x248>
9d005668:	00461021 	addu	v0,v0,a2
9d00566c:	10400019 	beqz	v0,9d0056d4 <__adddf3+0x7b4>
9d005670:	310e000f 	andi	t6,t0,0xf
9d005674:	01062023 	subu	a0,t0,a2
9d005678:	016a1823 	subu	v1,t3,t2
9d00567c:	0104102b 	sltu	v0,t0,a0
9d005680:	00621023 	subu	v0,v1,v0
9d005684:	7c4305c0 	ext	v1,v0,0x17,0x1
9d005688:	50600048 	beqzl	v1,9d0057ac <__adddf3+0x88c>
9d00568c:	00441825 	or	v1,v0,a0
9d005690:	00c82023 	subu	a0,a2,t0
9d005694:	014b1023 	subu	v0,t2,t3
9d005698:	00c4302b 	sltu	a2,a2,a0
9d00569c:	00461023 	subu	v0,v0,a2
9d0056a0:	308e000f 	andi	t6,a0,0xf
9d0056a4:	01804821 	move	t1,t4
9d0056a8:	24030001 	li	v1,1
9d0056ac:	0b401425 	j	9d005094 <__adddf3+0x174>
9d0056b0:	00003821 	move	a3,zero
9d0056b4:	5440ffb6 	bnezl	v0,9d005590 <__adddf3+0x670>
9d0056b8:	01463025 	or	a2,t2,a2
9d0056bc:	30ce000f 	andi	t6,a2,0xf
9d0056c0:	01401021 	move	v0,t2
9d0056c4:	00c02021 	move	a0,a2
9d0056c8:	24030800 	li	v1,2048
9d0056cc:	0b401425 	j	9d005094 <__adddf3+0x174>
9d0056d0:	240707ff 	li	a3,2047
9d0056d4:	01601021 	move	v0,t3
9d0056d8:	01002021 	move	a0,t0
9d0056dc:	24030001 	li	v1,1
9d0056e0:	0b401425 	j	9d005094 <__adddf3+0x174>
9d0056e4:	00003821 	move	a3,zero
9d0056e8:	006b2806 	srlv	a1,t3,v1
9d0056ec:	10640003 	beq	v1,a0,9d0056fc <__adddf3+0x7dc>
9d0056f0:	00001021 	move	v0,zero
9d0056f4:	00031823 	negu	v1,v1
9d0056f8:	006b1004 	sllv	v0,t3,v1
9d0056fc:	00482025 	or	a0,v0,t0
9d005700:	0004202b 	sltu	a0,zero,a0
9d005704:	00852025 	or	a0,a0,a1
9d005708:	0b4014f8 	j	9d0053e0 <__adddf3+0x4c0>
9d00570c:	00001021 	move	v0,zero
9d005710:	14400022 	bnez	v0,9d00579c <__adddf3+0x87c>
9d005714:	240307ff 	li	v1,2047
9d005718:	00c82021 	addu	a0,a2,t0
9d00571c:	014b1021 	addu	v0,t2,t3
9d005720:	0086302b 	sltu	a2,a0,a2
9d005724:	0b40145a 	j	9d005168 <__adddf3+0x248>
9d005728:	00461021 	addu	v0,v0,a2
9d00572c:	00001021 	move	v0,zero
9d005730:	0b401596 	j	9d005658 <__adddf3+0x738>
9d005734:	0004202b 	sltu	a0,zero,a0
9d005738:	1040ffe6 	beqz	v0,9d0056d4 <__adddf3+0x7b4>
9d00573c:	310e000f 	andi	t6,t0,0xf
9d005740:	00c82021 	addu	a0,a2,t0
9d005744:	014b1021 	addu	v0,t2,t3
9d005748:	0088402b 	sltu	t0,a0,t0
9d00574c:	00481021 	addu	v0,v0,t0
9d005750:	7c4305c0 	ext	v1,v0,0x17,0x1
9d005754:	1060fe4d 	beqz	v1,9d00508c <__adddf3+0x16c>
9d005758:	308e000f 	andi	t6,a0,0xf
9d00575c:	3c03ff7f 	lui	v1,0xff7f
9d005760:	3463ffff 	ori	v1,v1,0xffff
9d005764:	00431024 	and	v0,v0,v1
9d005768:	24030002 	li	v1,2
9d00576c:	0b401425 	j	9d005094 <__adddf3+0x174>
9d005770:	24070001 	li	a3,1
9d005774:	240e0008 	li	t6,8
9d005778:	2404fff8 	li	a0,-8
9d00577c:	3442ffff 	ori	v0,v0,0xffff
9d005780:	00004821 	move	t1,zero
9d005784:	24030800 	li	v1,2048
9d005788:	0b401425 	j	9d005094 <__adddf3+0x174>
9d00578c:	240707ff 	li	a3,2047
9d005790:	00001021 	move	v0,zero
9d005794:	0b40143f 	j	9d0050fc <__adddf3+0x1dc>
9d005798:	00003021 	move	a2,zero
9d00579c:	54e3ffa0 	bnel	a3,v1,9d005620 <__adddf3+0x700>
9d0057a0:	28430039 	slti	v1,v0,57
9d0057a4:	0b4015b0 	j	9d0056c0 <__adddf3+0x7a0>
9d0057a8:	30ce000f 	andi	t6,a2,0xf
9d0057ac:	5060ff15 	beqzl	v1,9d005404 <__adddf3+0x4e4>
9d0057b0:	00004821 	move	t1,zero
9d0057b4:	0b401423 	j	9d00508c <__adddf3+0x16c>
9d0057b8:	308e000f 	andi	t6,a0,0xf
9d0057bc:	004b2806 	srlv	a1,t3,v0
9d0057c0:	10440003 	beq	v0,a0,9d0057d0 <__adddf3+0x8b0>
9d0057c4:	00001821 	move	v1,zero
9d0057c8:	00021023 	negu	v0,v0
9d0057cc:	004b1804 	sllv	v1,t3,v0
9d0057d0:	00682025 	or	a0,v1,t0
9d0057d4:	0004202b 	sltu	a0,zero,a0
9d0057d8:	00852025 	or	a0,a0,a1
9d0057dc:	0b401596 	j	9d005658 <__adddf3+0x738>
9d0057e0:	00001021 	move	v0,zero

9d0057e4 <__divdf3>:
9d0057e4:	7ca807c0 	ext	t0,a1,0x1f,0x1
9d0057e8:	7ca35500 	ext	v1,a1,0x14,0xb
9d0057ec:	310d00ff 	andi	t5,t0,0xff
9d0057f0:	1460002e 	bnez	v1,9d0058ac <__divdf3+0xc8>
9d0057f4:	7ca59800 	ext	a1,a1,0x0,0x14
9d0057f8:	00a44825 	or	t1,a1,a0
9d0057fc:	1120006c 	beqz	t1,9d0059b0 <__divdf3+0x1cc>
9d005800:	240c0004 	li	t4,4
9d005804:	14a00003 	bnez	a1,9d005814 <__divdf3+0x30>
9d005808:	70a94820 	clz	t1,a1
9d00580c:	70894820 	clz	t1,a0
9d005810:	25290020 	addiu	t1,t1,32
9d005814:	2523fff5 	addiu	v1,t1,-11
9d005818:	286a001d 	slti	t2,v1,29
9d00581c:	514000bb 	beqzl	t2,9d005b0c <__divdf3+0x328>
9d005820:	2525ffd8 	addiu	a1,t1,-40
9d005824:	240a001d 	li	t2,29
9d005828:	2529fff8 	addiu	t1,t1,-8
9d00582c:	01435023 	subu	t2,t2,v1
9d005830:	01445006 	srlv	t2,a0,t2
9d005834:	01252804 	sllv	a1,a1,t1
9d005838:	01452825 	or	a1,t2,a1
9d00583c:	01242004 	sllv	a0,a0,t1
9d005840:	2409fc02 	li	t1,-1022
9d005844:	7cea5500 	ext	t2,a3,0x14,0xb
9d005848:	01231823 	subu	v1,t1,v1
9d00584c:	00006021 	move	t4,zero
9d005850:	7ce99800 	ext	t1,a3,0x0,0x14
9d005854:	00007821 	move	t7,zero
9d005858:	11400023 	beqz	t2,9d0058e8 <__divdf3+0x104>
9d00585c:	00073fc2 	srl	a3,a3,0x1f
9d005860:	240b07ff 	li	t3,2047
9d005864:	514b0049 	beql	t2,t3,9d00598c <__divdf3+0x1a8>
9d005868:	01267025 	or	t6,t1,a2
9d00586c:	3c0b0010 	lui	t3,0x10
9d005870:	012b4825 	or	t1,t1,t3
9d005874:	000948c0 	sll	t1,t1,0x3
9d005878:	00065f42 	srl	t3,a2,0x1d
9d00587c:	012b4825 	or	t1,t1,t3
9d005880:	000630c0 	sll	a2,a2,0x3
9d005884:	254afc01 	addiu	t2,t2,-1023
9d005888:	00005821 	move	t3,zero
9d00588c:	016c6025 	or	t4,t3,t4
9d005890:	3c0e9d03 	lui	t6,0x9d03
9d005894:	25cebd98 	addiu	t6,t6,-17000
9d005898:	000c6080 	sll	t4,t4,0x2
9d00589c:	01cc6021 	addu	t4,t6,t4
9d0058a0:	8d8c0000 	lw	t4,0(t4)
9d0058a4:	01800008 	jr	t4
9d0058a8:	00ed7026 	xor	t6,a3,t5
9d0058ac:	240907ff 	li	t1,2047
9d0058b0:	10690023 	beq	v1,t1,9d005940 <__divdf3+0x15c>
9d0058b4:	3c090010 	lui	t1,0x10
9d0058b8:	00a92825 	or	a1,a1,t1
9d0058bc:	000528c0 	sll	a1,a1,0x3
9d0058c0:	00044f42 	srl	t1,a0,0x1d
9d0058c4:	00a92825 	or	a1,a1,t1
9d0058c8:	000420c0 	sll	a0,a0,0x3
9d0058cc:	2463fc01 	addiu	v1,v1,-1023
9d0058d0:	00006021 	move	t4,zero
9d0058d4:	00007821 	move	t7,zero
9d0058d8:	7cea5500 	ext	t2,a3,0x14,0xb
9d0058dc:	7ce99800 	ext	t1,a3,0x0,0x14
9d0058e0:	1540ffdf 	bnez	t2,9d005860 <__divdf3+0x7c>
9d0058e4:	00073fc2 	srl	a3,a3,0x1f
9d0058e8:	01265825 	or	t3,t1,a2
9d0058ec:	5160002d 	beqzl	t3,9d0059a4 <__divdf3+0x1c0>
9d0058f0:	00004821 	move	t1,zero
9d0058f4:	15200003 	bnez	t1,9d005904 <__divdf3+0x120>
9d0058f8:	712b5820 	clz	t3,t1
9d0058fc:	70cb5820 	clz	t3,a2
9d005900:	256b0020 	addiu	t3,t3,32
9d005904:	256afff5 	addiu	t2,t3,-11
9d005908:	294e001d 	slti	t6,t2,29
9d00590c:	51c0007c 	beqzl	t6,9d005b00 <__divdf3+0x31c>
9d005910:	2569ffd8 	addiu	t1,t3,-40
9d005914:	240e001d 	li	t6,29
9d005918:	256bfff8 	addiu	t3,t3,-8
9d00591c:	01ca7023 	subu	t6,t6,t2
9d005920:	01c67006 	srlv	t6,a2,t6
9d005924:	01694804 	sllv	t1,t1,t3
9d005928:	01c94825 	or	t1,t6,t1
9d00592c:	01663004 	sllv	a2,a2,t3
9d005930:	240bfc02 	li	t3,-1022
9d005934:	016a5023 	subu	t2,t3,t2
9d005938:	0b401623 	j	9d00588c <__divdf3+0xa8>
9d00593c:	00005821 	move	t3,zero
9d005940:	00a44825 	or	t1,a1,a0
9d005944:	240a000c 	li	t2,12
9d005948:	240c0008 	li	t4,8
9d00594c:	240f0002 	li	t7,2
9d005950:	0149600b 	movn	t4,t2,t1
9d005954:	240a0003 	li	t2,3
9d005958:	0009280a 	movz	a1,zero,t1
9d00595c:	0009200a 	movz	a0,zero,t1
9d005960:	0b401636 	j	9d0058d8 <__divdf3+0xf4>
9d005964:	0149780b 	movn	t7,t2,t1
9d005968:	240207ff 	li	v0,2047
9d00596c:	00002821 	move	a1,zero
9d005970:	00002021 	move	a0,zero
9d005974:	00001821 	move	v1,zero
9d005978:	7ca39804 	ins	v1,a1,0x0,0x14
9d00597c:	7c43f504 	ins	v1,v0,0x14,0xb
9d005980:	7dc3ffc4 	ins	v1,t6,0x1f,0x1
9d005984:	03e00008 	jr	ra
9d005988:	00801021 	move	v0,a0
9d00598c:	240b0002 	li	t3,2
9d005990:	24180003 	li	t8,3
9d005994:	000e480a 	movz	t1,zero,t6
9d005998:	000e300a 	movz	a2,zero,t6
9d00599c:	0b401623 	j	9d00588c <__divdf3+0xa8>
9d0059a0:	030e580b 	movn	t3,t8,t6
9d0059a4:	00003021 	move	a2,zero
9d0059a8:	0b401623 	j	9d00588c <__divdf3+0xa8>
9d0059ac:	240b0001 	li	t3,1
9d0059b0:	00002821 	move	a1,zero
9d0059b4:	00002021 	move	a0,zero
9d0059b8:	0b401636 	j	9d0058d8 <__divdf3+0xf4>
9d0059bc:	240f0001 	li	t7,1
9d0059c0:	3c05000f 	lui	a1,0xf
9d0059c4:	34a5ffff 	ori	a1,a1,0xffff
9d0059c8:	00007021 	move	t6,zero
9d0059cc:	2404ffff 	li	a0,-1
9d0059d0:	7ca59800 	ext	a1,a1,0x0,0x14
9d0059d4:	240207ff 	li	v0,2047
9d0059d8:	00001821 	move	v1,zero
9d0059dc:	7ca39804 	ins	v1,a1,0x0,0x14
9d0059e0:	7c43f504 	ins	v1,v0,0x14,0xb
9d0059e4:	7dc3ffc4 	ins	v1,t6,0x1f,0x1
9d0059e8:	03e00008 	jr	ra
9d0059ec:	00801021 	move	v0,a0
9d0059f0:	00002821 	move	a1,zero
9d0059f4:	00001821 	move	v1,zero
9d0059f8:	00001021 	move	v0,zero
9d0059fc:	7ca39804 	ins	v1,a1,0x0,0x14
9d005a00:	00002021 	move	a0,zero
9d005a04:	7c43f504 	ins	v1,v0,0x14,0xb
9d005a08:	7dc3ffc4 	ins	v1,t6,0x1f,0x1
9d005a0c:	03e00008 	jr	ra
9d005a10:	00801021 	move	v0,a0
9d005a14:	01a07021 	move	t6,t5
9d005a18:	01e05821 	move	t3,t7
9d005a1c:	24030002 	li	v1,2
9d005a20:	5163ffd2 	beql	t3,v1,9d00596c <__divdf3+0x188>
9d005a24:	240207ff 	li	v0,2047
9d005a28:	24030003 	li	v1,3
9d005a2c:	51630121 	beql	t3,v1,9d005eb4 <__divdf3+0x6d0>
9d005a30:	3c020008 	lui	v0,0x8
9d005a34:	24030001 	li	v1,1
9d005a38:	5163ffee 	beql	t3,v1,9d0059f4 <__divdf3+0x210>
9d005a3c:	00002821 	move	a1,zero
9d005a40:	244203ff 	addiu	v0,v0,1023
9d005a44:	184000ed 	blez	v0,9d005dfc <__divdf3+0x618>
9d005a48:	3086000f 	andi	a2,a0,0xf
9d005a4c:	24030004 	li	v1,4
9d005a50:	10c30004 	beq	a2,v1,9d005a64 <__divdf3+0x280>
9d005a54:	24830004 	addiu	v1,a0,4
9d005a58:	0064202b 	sltu	a0,v1,a0
9d005a5c:	00a42821 	addu	a1,a1,a0
9d005a60:	00602021 	move	a0,v1
9d005a64:	7ca30600 	ext	v1,a1,0x18,0x1
9d005a68:	10600006 	beqz	v1,9d005a84 <__divdf3+0x2a0>
9d005a6c:	284307ff 	slti	v1,v0,2047
9d005a70:	3c03feff 	lui	v1,0xfeff
9d005a74:	3463ffff 	ori	v1,v1,0xffff
9d005a78:	00a32824 	and	a1,a1,v1
9d005a7c:	24420001 	addiu	v0,v0,1
9d005a80:	284307ff 	slti	v1,v0,2047
9d005a84:	5060ffb9 	beqzl	v1,9d00596c <__divdf3+0x188>
9d005a88:	240207ff 	li	v0,2047
9d005a8c:	00053740 	sll	a2,a1,0x1d
9d005a90:	000420c2 	srl	a0,a0,0x3
9d005a94:	00c42025 	or	a0,a2,a0
9d005a98:	7ca598c0 	ext	a1,a1,0x3,0x14
9d005a9c:	0b40165d 	j	9d005974 <__divdf3+0x190>
9d005aa0:	304207ff 	andi	v0,v0,0x7ff
9d005aa4:	01202821 	move	a1,t1
9d005aa8:	00c02021 	move	a0,a2
9d005aac:	0b401687 	j	9d005a1c <__divdf3+0x238>
9d005ab0:	00e07021 	move	t6,a3
9d005ab4:	01254825 	or	t1,t1,a1
9d005ab8:	3c020008 	lui	v0,0x8
9d005abc:	01224824 	and	t1,t1,v0
9d005ac0:	5520ffc0 	bnezl	t1,9d0059c4 <__divdf3+0x1e0>
9d005ac4:	3c05000f 	lui	a1,0xf
9d005ac8:	00a22825 	or	a1,a1,v0
9d005acc:	310e0001 	andi	t6,t0,0x1
9d005ad0:	7ca59800 	ext	a1,a1,0x0,0x14
9d005ad4:	0b401676 	j	9d0059d8 <__divdf3+0x1f4>
9d005ad8:	240207ff 	li	v0,2047
9d005adc:	0125382b 	sltu	a3,t1,a1
9d005ae0:	14e0000f 	bnez	a3,9d005b20 <__divdf3+0x33c>
9d005ae4:	006a1023 	subu	v0,v1,t2
9d005ae8:	10a9000b 	beq	a1,t1,9d005b18 <__divdf3+0x334>
9d005aec:	00c4182b 	sltu	v1,a2,a0
9d005af0:	00806821 	move	t5,a0
9d005af4:	2442ffff 	addiu	v0,v0,-1
9d005af8:	0b4016cd 	j	9d005b34 <__divdf3+0x350>
9d005afc:	00002021 	move	a0,zero
9d005b00:	01264804 	sllv	t1,a2,t1
9d005b04:	0b40164c 	j	9d005930 <__divdf3+0x14c>
9d005b08:	00003021 	move	a2,zero
9d005b0c:	00a42804 	sllv	a1,a0,a1
9d005b10:	0b401610 	j	9d005840 <__divdf3+0x5c>
9d005b14:	00002021 	move	a0,zero
9d005b18:	1060fff6 	beqz	v1,9d005af4 <__divdf3+0x310>
9d005b1c:	00806821 	move	t5,a0
9d005b20:	00046842 	srl	t5,a0,0x1
9d005b24:	00051fc0 	sll	v1,a1,0x1f
9d005b28:	01a36825 	or	t5,t5,v1
9d005b2c:	00052842 	srl	a1,a1,0x1
9d005b30:	000427c0 	sll	a0,a0,0x1f
9d005b34:	00094a00 	sll	t1,t1,0x8
9d005b38:	00061e02 	srl	v1,a2,0x18
9d005b3c:	00691825 	or	v1,v1,t1
9d005b40:	00033c02 	srl	a3,v1,0x10
9d005b44:	00a7001b 	divu	zero,a1,a3
9d005b48:	00e001f4 	teq	a3,zero,0x7
9d005b4c:	306bffff 	andi	t3,v1,0xffff
9d005b50:	000d4402 	srl	t0,t5,0x10
9d005b54:	00006012 	mflo	t4
9d005b58:	00002810 	mfhi	a1
9d005b5c:	00055400 	sll	t2,a1,0x10
9d005b60:	01485025 	or	t2,t2,t0
9d005b64:	718b4802 	mul	t1,t4,t3
9d005b68:	0149282b 	sltu	a1,t2,t1
9d005b6c:	10a0000a 	beqz	a1,9d005b98 <__divdf3+0x3b4>
9d005b70:	00063200 	sll	a2,a2,0x8
9d005b74:	01435021 	addu	t2,t2,v1
9d005b78:	0143282b 	sltu	a1,t2,v1
9d005b7c:	14a00006 	bnez	a1,9d005b98 <__divdf3+0x3b4>
9d005b80:	258cffff 	addiu	t4,t4,-1
9d005b84:	0149282b 	sltu	a1,t2,t1
9d005b88:	50a00004 	beqzl	a1,9d005b9c <__divdf3+0x3b8>
9d005b8c:	01494823 	subu	t1,t2,t1
9d005b90:	258cffff 	addiu	t4,t4,-1
9d005b94:	01435021 	addu	t2,t2,v1
9d005b98:	01494823 	subu	t1,t2,t1
9d005b9c:	0127001b 	divu	zero,t1,a3
9d005ba0:	00e001f4 	teq	a3,zero,0x7
9d005ba4:	31afffff 	andi	t7,t5,0xffff
9d005ba8:	00002812 	mflo	a1
9d005bac:	00004010 	mfhi	t0
9d005bb0:	00084400 	sll	t0,t0,0x10
9d005bb4:	010f4025 	or	t0,t0,t7
9d005bb8:	70ab6802 	mul	t5,a1,t3
9d005bbc:	010d782b 	sltu	t7,t0,t5
9d005bc0:	51e0000b 	beqzl	t7,9d005bf0 <__divdf3+0x40c>
9d005bc4:	000c6400 	sll	t4,t4,0x10
9d005bc8:	01034021 	addu	t0,t0,v1
9d005bcc:	0103782b 	sltu	t7,t0,v1
9d005bd0:	15e00006 	bnez	t7,9d005bec <__divdf3+0x408>
9d005bd4:	24a5ffff 	addiu	a1,a1,-1
9d005bd8:	010d782b 	sltu	t7,t0,t5
9d005bdc:	51e00004 	beqzl	t7,9d005bf0 <__divdf3+0x40c>
9d005be0:	000c6400 	sll	t4,t4,0x10
9d005be4:	24a5ffff 	addiu	a1,a1,-1
9d005be8:	01034021 	addu	t0,t0,v1
9d005bec:	000c6400 	sll	t4,t4,0x10
9d005bf0:	00ac2825 	or	a1,a1,t4
9d005bf4:	00a60019 	multu	a1,a2
9d005bf8:	010d4023 	subu	t0,t0,t5
9d005bfc:	0000c810 	mfhi	t9
9d005c00:	0119682b 	sltu	t5,t0,t9
9d005c04:	03206021 	move	t4,t9
9d005c08:	15a00041 	bnez	t5,9d005d10 <__divdf3+0x52c>
9d005c0c:	00005012 	mflo	t2
9d005c10:	1119003d 	beq	t0,t9,9d005d08 <__divdf3+0x524>
9d005c14:	008a482b 	sltu	t1,a0,t2
9d005c18:	01194023 	subu	t0,t0,t9
9d005c1c:	008a5023 	subu	t2,a0,t2
9d005c20:	008a202b 	sltu	a0,a0,t2
9d005c24:	01044023 	subu	t0,t0,a0
9d005c28:	1103ff85 	beq	t0,v1,9d005a40 <__divdf3+0x25c>
9d005c2c:	2404ffff 	li	a0,-1
9d005c30:	0107001b 	divu	zero,t0,a3
9d005c34:	00e001f4 	teq	a3,zero,0x7
9d005c38:	000a6c02 	srl	t5,t2,0x10
9d005c3c:	00006012 	mflo	t4
9d005c40:	00004810 	mfhi	t1
9d005c44:	00094c00 	sll	t1,t1,0x10
9d005c48:	012d4825 	or	t1,t1,t5
9d005c4c:	718b2002 	mul	a0,t4,t3
9d005c50:	0124402b 	sltu	t0,t1,a0
9d005c54:	5100000b 	beqzl	t0,9d005c84 <__divdf3+0x4a0>
9d005c58:	01242023 	subu	a0,t1,a0
9d005c5c:	01234821 	addu	t1,t1,v1
9d005c60:	0123402b 	sltu	t0,t1,v1
9d005c64:	15000006 	bnez	t0,9d005c80 <__divdf3+0x49c>
9d005c68:	258cffff 	addiu	t4,t4,-1
9d005c6c:	0124402b 	sltu	t0,t1,a0
9d005c70:	51000004 	beqzl	t0,9d005c84 <__divdf3+0x4a0>
9d005c74:	01242023 	subu	a0,t1,a0
9d005c78:	258cffff 	addiu	t4,t4,-1
9d005c7c:	01234821 	addu	t1,t1,v1
9d005c80:	01242023 	subu	a0,t1,a0
9d005c84:	0087001b 	divu	zero,a0,a3
9d005c88:	00e001f4 	teq	a3,zero,0x7
9d005c8c:	314affff 	andi	t2,t2,0xffff
9d005c90:	00002012 	mflo	a0
9d005c94:	00004010 	mfhi	t0
9d005c98:	00084400 	sll	t0,t0,0x10
9d005c9c:	010a4025 	or	t0,t0,t2
9d005ca0:	708b5802 	mul	t3,a0,t3
9d005ca4:	010b502b 	sltu	t2,t0,t3
9d005ca8:	5140000b 	beqzl	t2,9d005cd8 <__divdf3+0x4f4>
9d005cac:	000c6400 	sll	t4,t4,0x10
9d005cb0:	01034021 	addu	t0,t0,v1
9d005cb4:	0103502b 	sltu	t2,t0,v1
9d005cb8:	15400006 	bnez	t2,9d005cd4 <__divdf3+0x4f0>
9d005cbc:	2484ffff 	addiu	a0,a0,-1
9d005cc0:	010b502b 	sltu	t2,t0,t3
9d005cc4:	51400004 	beqzl	t2,9d005cd8 <__divdf3+0x4f4>
9d005cc8:	000c6400 	sll	t4,t4,0x10
9d005ccc:	2484ffff 	addiu	a0,a0,-1
9d005cd0:	01034021 	addu	t0,t0,v1
9d005cd4:	000c6400 	sll	t4,t4,0x10
9d005cd8:	008c2025 	or	a0,a0,t4
9d005cdc:	00860019 	multu	a0,a2
9d005ce0:	010b5823 	subu	t3,t0,t3
9d005ce4:	00006810 	mfhi	t5
9d005ce8:	016d402b 	sltu	t0,t3,t5
9d005cec:	01a03821 	move	a3,t5
9d005cf0:	1500001e 	bnez	t0,9d005d6c <__divdf3+0x588>
9d005cf4:	00004812 	mflo	t1
9d005cf8:	116d001a 	beq	t3,t5,9d005d64 <__divdf3+0x580>
9d005cfc:	00000000 	nop
9d005d00:	0b401690 	j	9d005a40 <__divdf3+0x25c>
9d005d04:	34840001 	ori	a0,a0,0x1
9d005d08:	5120ffc4 	beqzl	t1,9d005c1c <__divdf3+0x438>
9d005d0c:	00004021 	move	t0,zero
9d005d10:	00862021 	addu	a0,a0,a2
9d005d14:	0086482b 	sltu	t1,a0,a2
9d005d18:	01234821 	addu	t1,t1,v1
9d005d1c:	01284021 	addu	t0,t1,t0
9d005d20:	0068482b 	sltu	t1,v1,t0
9d005d24:	11200008 	beqz	t1,9d005d48 <__divdf3+0x564>
9d005d28:	24a5ffff 	addiu	a1,a1,-1
9d005d2c:	010c482b 	sltu	t1,t0,t4
9d005d30:	5520002c 	bnezl	t1,9d005de4 <__divdf3+0x600>
9d005d34:	00862021 	addu	a0,a0,a2
9d005d38:	11880027 	beq	t4,t0,9d005dd8 <__divdf3+0x5f4>
9d005d3c:	008a482b 	sltu	t1,a0,t2
9d005d40:	0b401707 	j	9d005c1c <__divdf3+0x438>
9d005d44:	010c4023 	subu	t0,t0,t4
9d005d48:	5503ffb4 	bnel	t0,v1,9d005c1c <__divdf3+0x438>
9d005d4c:	010c4023 	subu	t0,t0,t4
9d005d50:	0086482b 	sltu	t1,a0,a2
9d005d54:	1120fff6 	beqz	t1,9d005d30 <__divdf3+0x54c>
9d005d58:	010c482b 	sltu	t1,t0,t4
9d005d5c:	0b401707 	j	9d005c1c <__divdf3+0x438>
9d005d60:	006c4023 	subu	t0,v1,t4
9d005d64:	11200008 	beqz	t1,9d005d88 <__divdf3+0x5a4>
9d005d68:	00004021 	move	t0,zero
9d005d6c:	01635821 	addu	t3,t3,v1
9d005d70:	0163502b 	sltu	t2,t3,v1
9d005d74:	2484ffff 	addiu	a0,a0,-1
9d005d78:	11400007 	beqz	t2,9d005d98 <__divdf3+0x5b4>
9d005d7c:	00c04021 	move	t0,a2
9d005d80:	5567ff2f 	bnel	t3,a3,9d005a40 <__divdf3+0x25c>
9d005d84:	34840001 	ori	a0,a0,0x1
9d005d88:	5509ff2d 	bnel	t0,t1,9d005a40 <__divdf3+0x25c>
9d005d8c:	34840001 	ori	a0,a0,0x1
9d005d90:	0b401691 	j	9d005a44 <__divdf3+0x260>
9d005d94:	244203ff 	addiu	v0,v0,1023
9d005d98:	0167402b 	sltu	t0,t3,a3
9d005d9c:	55000007 	bnezl	t0,9d005dbc <__divdf3+0x5d8>
9d005da0:	00064040 	sll	t0,a2,0x1
9d005da4:	54ebff26 	bnel	a3,t3,9d005a40 <__divdf3+0x25c>
9d005da8:	34840001 	ori	a0,a0,0x1
9d005dac:	00c9502b 	sltu	t2,a2,t1
9d005db0:	1140fff5 	beqz	t2,9d005d88 <__divdf3+0x5a4>
9d005db4:	00c04021 	move	t0,a2
9d005db8:	00064040 	sll	t0,a2,0x1
9d005dbc:	0106302b 	sltu	a2,t0,a2
9d005dc0:	00c31821 	addu	v1,a2,v1
9d005dc4:	01635821 	addu	t3,t3,v1
9d005dc8:	1567ffcd 	bne	t3,a3,9d005d00 <__divdf3+0x51c>
9d005dcc:	2484ffff 	addiu	a0,a0,-1
9d005dd0:	0b401762 	j	9d005d88 <__divdf3+0x5a4>
9d005dd4:	00000000 	nop
9d005dd8:	5120ff90 	beqzl	t1,9d005c1c <__divdf3+0x438>
9d005ddc:	00004021 	move	t0,zero
9d005de0:	00862021 	addu	a0,a0,a2
9d005de4:	0086482b 	sltu	t1,a0,a2
9d005de8:	01234821 	addu	t1,t1,v1
9d005dec:	01284021 	addu	t0,t1,t0
9d005df0:	24a5ffff 	addiu	a1,a1,-1
9d005df4:	0b401707 	j	9d005c1c <__divdf3+0x438>
9d005df8:	010c4023 	subu	t0,t0,t4
9d005dfc:	24030001 	li	v1,1
9d005e00:	00621023 	subu	v0,v1,v0
9d005e04:	28430039 	slti	v1,v0,57
9d005e08:	5060fefa 	beqzl	v1,9d0059f4 <__divdf3+0x210>
9d005e0c:	00002821 	move	a1,zero
9d005e10:	28430020 	slti	v1,v0,32
9d005e14:	10600018 	beqz	v1,9d005e78 <__divdf3+0x694>
9d005e18:	24060020 	li	a2,32
9d005e1c:	24030020 	li	v1,32
9d005e20:	00621823 	subu	v1,v1,v0
9d005e24:	00653804 	sllv	a3,a1,v1
9d005e28:	00443006 	srlv	a2,a0,v0
9d005e2c:	00641804 	sllv	v1,a0,v1
9d005e30:	00e63825 	or	a3,a3,a2
9d005e34:	0003182b 	sltu	v1,zero,v1
9d005e38:	00e32025 	or	a0,a3,v1
9d005e3c:	00452806 	srlv	a1,a1,v0
9d005e40:	3083000f 	andi	v1,a0,0xf
9d005e44:	24020004 	li	v0,4
9d005e48:	10620004 	beq	v1,v0,9d005e5c <__divdf3+0x678>
9d005e4c:	24820004 	addiu	v0,a0,4
9d005e50:	0044202b 	sltu	a0,v0,a0
9d005e54:	00a42821 	addu	a1,a1,a0
9d005e58:	00402021 	move	a0,v0
9d005e5c:	7ca205c0 	ext	v0,a1,0x17,0x1
9d005e60:	1040000f 	beqz	v0,9d005ea0 <__divdf3+0x6bc>
9d005e64:	00053740 	sll	a2,a1,0x1d
9d005e68:	24020001 	li	v0,1
9d005e6c:	00002821 	move	a1,zero
9d005e70:	0b40165d 	j	9d005974 <__divdf3+0x190>
9d005e74:	00002021 	move	a0,zero
9d005e78:	00453806 	srlv	a3,a1,v0
9d005e7c:	10460003 	beq	v0,a2,9d005e8c <__divdf3+0x6a8>
9d005e80:	00001821 	move	v1,zero
9d005e84:	00021023 	negu	v0,v0
9d005e88:	00451804 	sllv	v1,a1,v0
9d005e8c:	00642025 	or	a0,v1,a0
9d005e90:	0004202b 	sltu	a0,zero,a0
9d005e94:	00872025 	or	a0,a0,a3
9d005e98:	0b401790 	j	9d005e40 <__divdf3+0x65c>
9d005e9c:	00002821 	move	a1,zero
9d005ea0:	000420c2 	srl	a0,a0,0x3
9d005ea4:	00c42025 	or	a0,a2,a0
9d005ea8:	7ca598c0 	ext	a1,a1,0x3,0x14
9d005eac:	0b40165d 	j	9d005974 <__divdf3+0x190>
9d005eb0:	00001021 	move	v0,zero
9d005eb4:	00a22825 	or	a1,a1,v0
9d005eb8:	7ca59800 	ext	a1,a1,0x0,0x14
9d005ebc:	0b401676 	j	9d0059d8 <__divdf3+0x1f4>
9d005ec0:	240207ff 	li	v0,2047

9d005ec4 <__gedf2>:
9d005ec4:	7ca35500 	ext	v1,a1,0x14,0xb
9d005ec8:	240207ff 	li	v0,2047
9d005ecc:	7cab9800 	ext	t3,a1,0x0,0x14
9d005ed0:	7cea9800 	ext	t2,a3,0x0,0x14
9d005ed4:	7ce85500 	ext	t0,a3,0x14,0xb
9d005ed8:	00052fc2 	srl	a1,a1,0x1f
9d005edc:	1062002f 	beq	v1,v0,9d005f9c <__gedf2+0xd8>
9d005ee0:	00073fc2 	srl	a3,a3,0x1f
9d005ee4:	240207ff 	li	v0,2047
9d005ee8:	11020031 	beq	t0,v0,9d005fb0 <__gedf2+0xec>
9d005eec:	01464825 	or	t1,t2,a2
9d005ef0:	14600003 	bnez	v1,9d005f00 <__gedf2+0x3c>
9d005ef4:	00001021 	move	v0,zero
9d005ef8:	01641025 	or	v0,t3,a0
9d005efc:	2c420001 	sltiu	v0,v0,1
9d005f00:	15000003 	bnez	t0,9d005f10 <__gedf2+0x4c>
9d005f04:	00004821 	move	t1,zero
9d005f08:	01464825 	or	t1,t2,a2
9d005f0c:	2d290001 	sltiu	t1,t1,1
9d005f10:	10400007 	beqz	v0,9d005f30 <__gedf2+0x6c>
9d005f14:	00000000 	nop
9d005f18:	15200023 	bnez	t1,9d005fa8 <__gedf2+0xe4>
9d005f1c:	00001021 	move	v0,zero
9d005f20:	24020001 	li	v0,1
9d005f24:	2403ffff 	li	v1,-1
9d005f28:	03e00008 	jr	ra
9d005f2c:	0067100a 	movz	v0,v1,a3
9d005f30:	1520000d 	bnez	t1,9d005f68 <__gedf2+0xa4>
9d005f34:	2402ffff 	li	v0,-1
9d005f38:	54a7000c 	bnel	a1,a3,9d005f6c <__gedf2+0xa8>
9d005f3c:	24030001 	li	v1,1
9d005f40:	0103102a 	slt	v0,t0,v1
9d005f44:	54400008 	bnezl	v0,9d005f68 <__gedf2+0xa4>
9d005f48:	2402ffff 	li	v0,-1
9d005f4c:	0068182a 	slt	v1,v1,t0
9d005f50:	50600008 	beqzl	v1,9d005f74 <__gedf2+0xb0>
9d005f54:	014b102b 	sltu	v0,t2,t3
9d005f58:	24020001 	li	v0,1
9d005f5c:	2403ffff 	li	v1,-1
9d005f60:	03e00008 	jr	ra
9d005f64:	0065100a 	movz	v0,v1,a1
9d005f68:	24030001 	li	v1,1
9d005f6c:	03e00008 	jr	ra
9d005f70:	0065100a 	movz	v0,v1,a1
9d005f74:	5440fffc 	bnezl	v0,9d005f68 <__gedf2+0xa4>
9d005f78:	2402ffff 	li	v0,-1
9d005f7c:	116a0012 	beq	t3,t2,9d005fc8 <__gedf2+0x104>
9d005f80:	016a502b 	sltu	t2,t3,t2
9d005f84:	1140000e 	beqz	t2,9d005fc0 <__gedf2+0xfc>
9d005f88:	00000000 	nop
9d005f8c:	24020001 	li	v0,1
9d005f90:	2403ffff 	li	v1,-1
9d005f94:	03e00008 	jr	ra
9d005f98:	0065100a 	movz	v0,v1,a1
9d005f9c:	01644825 	or	t1,t3,a0
9d005fa0:	1120ffd0 	beqz	t1,9d005ee4 <__gedf2+0x20>
9d005fa4:	2402fffe 	li	v0,-2
9d005fa8:	03e00008 	jr	ra
9d005fac:	00000000 	nop
9d005fb0:	1120ffcf 	beqz	t1,9d005ef0 <__gedf2+0x2c>
9d005fb4:	2402fffe 	li	v0,-2
9d005fb8:	03e00008 	jr	ra
9d005fbc:	00000000 	nop
9d005fc0:	03e00008 	jr	ra
9d005fc4:	00001021 	move	v0,zero
9d005fc8:	00c4102b 	sltu	v0,a2,a0
9d005fcc:	1440ffe6 	bnez	v0,9d005f68 <__gedf2+0xa4>
9d005fd0:	2402ffff 	li	v0,-1
9d005fd4:	0086202b 	sltu	a0,a0,a2
9d005fd8:	1480ffec 	bnez	a0,9d005f8c <__gedf2+0xc8>
9d005fdc:	00001021 	move	v0,zero
9d005fe0:	03e00008 	jr	ra
9d005fe4:	00000000 	nop

9d005fe8 <__ledf2>:
9d005fe8:	7ca35500 	ext	v1,a1,0x14,0xb
9d005fec:	240207ff 	li	v0,2047
9d005ff0:	7ca99800 	ext	t1,a1,0x0,0x14
9d005ff4:	7cea9800 	ext	t2,a3,0x0,0x14
9d005ff8:	7ce85500 	ext	t0,a3,0x14,0xb
9d005ffc:	00052fc2 	srl	a1,a1,0x1f
9d006000:	1062001d 	beq	v1,v0,9d006078 <__ledf2+0x90>
9d006004:	00073fc2 	srl	a3,a3,0x1f
9d006008:	240207ff 	li	v0,2047
9d00600c:	11020011 	beq	t0,v0,9d006054 <__ledf2+0x6c>
9d006010:	01465825 	or	t3,t2,a2
9d006014:	14600003 	bnez	v1,9d006024 <__ledf2+0x3c>
9d006018:	00001021 	move	v0,zero
9d00601c:	01241025 	or	v0,t1,a0
9d006020:	2c420001 	sltiu	v0,v0,1
9d006024:	15000003 	bnez	t0,9d006034 <__ledf2+0x4c>
9d006028:	00005821 	move	t3,zero
9d00602c:	01465825 	or	t3,t2,a2
9d006030:	2d6b0001 	sltiu	t3,t3,1
9d006034:	1040000b 	beqz	v0,9d006064 <__ledf2+0x7c>
9d006038:	00000000 	nop
9d00603c:	15600007 	bnez	t3,9d00605c <__ledf2+0x74>
9d006040:	00001021 	move	v0,zero
9d006044:	24020001 	li	v0,1
9d006048:	2403ffff 	li	v1,-1
9d00604c:	03e00008 	jr	ra
9d006050:	0067100a 	movz	v0,v1,a3
9d006054:	1160ffef 	beqz	t3,9d006014 <__ledf2+0x2c>
9d006058:	24020002 	li	v0,2
9d00605c:	03e00008 	jr	ra
9d006060:	00000000 	nop
9d006064:	11600009 	beqz	t3,9d00608c <__ledf2+0xa4>
9d006068:	2402ffff 	li	v0,-1
9d00606c:	24030001 	li	v1,1
9d006070:	03e00008 	jr	ra
9d006074:	0065100a 	movz	v0,v1,a1
9d006078:	01245825 	or	t3,t1,a0
9d00607c:	1160ffe2 	beqz	t3,9d006008 <__ledf2+0x20>
9d006080:	24020002 	li	v0,2
9d006084:	03e00008 	jr	ra
9d006088:	00000000 	nop
9d00608c:	14a7fff7 	bne	a1,a3,9d00606c <__ledf2+0x84>
9d006090:	00000000 	nop
9d006094:	0103102a 	slt	v0,t0,v1
9d006098:	5440fff4 	bnezl	v0,9d00606c <__ledf2+0x84>
9d00609c:	2402ffff 	li	v0,-1
9d0060a0:	0068182a 	slt	v1,v1,t0
9d0060a4:	50600005 	beqzl	v1,9d0060bc <__ledf2+0xd4>
9d0060a8:	0149102b 	sltu	v0,t2,t1
9d0060ac:	24020001 	li	v0,1
9d0060b0:	2403ffff 	li	v1,-1
9d0060b4:	03e00008 	jr	ra
9d0060b8:	0065100a 	movz	v0,v1,a1
9d0060bc:	5440ffeb 	bnezl	v0,9d00606c <__ledf2+0x84>
9d0060c0:	2402ffff 	li	v0,-1
9d0060c4:	112a0007 	beq	t1,t2,9d0060e4 <__ledf2+0xfc>
9d0060c8:	012a482b 	sltu	t1,t1,t2
9d0060cc:	1120000d 	beqz	t1,9d006104 <__ledf2+0x11c>
9d0060d0:	00000000 	nop
9d0060d4:	2403ffff 	li	v1,-1
9d0060d8:	24020001 	li	v0,1
9d0060dc:	03e00008 	jr	ra
9d0060e0:	0065100a 	movz	v0,v1,a1
9d0060e4:	00c4102b 	sltu	v0,a2,a0
9d0060e8:	5440ffe0 	bnezl	v0,9d00606c <__ledf2+0x84>
9d0060ec:	2402ffff 	li	v0,-1
9d0060f0:	0086202b 	sltu	a0,a0,a2
9d0060f4:	1480fff7 	bnez	a0,9d0060d4 <__ledf2+0xec>
9d0060f8:	00001021 	move	v0,zero
9d0060fc:	03e00008 	jr	ra
9d006100:	00000000 	nop
9d006104:	03e00008 	jr	ra
9d006108:	00001021 	move	v0,zero

9d00610c <__muldf3>:
9d00610c:	27bdfff0 	addiu	sp,sp,-16
9d006110:	7ca807c0 	ext	t0,a1,0x1f,0x1
9d006114:	7ca35500 	ext	v1,a1,0x14,0xb
9d006118:	afb3000c 	sw	s3,12(sp)
9d00611c:	afb20008 	sw	s2,8(sp)
9d006120:	afb10004 	sw	s1,4(sp)
9d006124:	afb00000 	sw	s0,0(sp)
9d006128:	7ca59800 	ext	a1,a1,0x0,0x14
9d00612c:	1460002f 	bnez	v1,9d0061ec <__muldf3+0xe0>
9d006130:	310c00ff 	andi	t4,t0,0xff
9d006134:	00a44825 	or	t1,a1,a0
9d006138:	11200065 	beqz	t1,9d0062d0 <__muldf3+0x1c4>
9d00613c:	240b0004 	li	t3,4
9d006140:	14a00003 	bnez	a1,9d006150 <__muldf3+0x44>
9d006144:	70a94820 	clz	t1,a1
9d006148:	70894820 	clz	t1,a0
9d00614c:	25290020 	addiu	t1,t1,32
9d006150:	2523fff5 	addiu	v1,t1,-11
9d006154:	286a001d 	slti	t2,v1,29
9d006158:	5140010d 	beqzl	t2,9d006590 <__muldf3+0x484>
9d00615c:	2525ffd8 	addiu	a1,t1,-40
9d006160:	240a001d 	li	t2,29
9d006164:	2529fff8 	addiu	t1,t1,-8
9d006168:	01435023 	subu	t2,t2,v1
9d00616c:	01445006 	srlv	t2,a0,t2
9d006170:	01252804 	sllv	a1,a1,t1
9d006174:	01452825 	or	a1,t2,a1
9d006178:	01242004 	sllv	a0,a0,t1
9d00617c:	2409fc02 	li	t1,-1022
9d006180:	7cee07c0 	ext	t6,a3,0x1f,0x1
9d006184:	01231823 	subu	v1,t1,v1
9d006188:	7ce95500 	ext	t1,a3,0x14,0xb
9d00618c:	00005821 	move	t3,zero
9d006190:	0000c021 	move	t8,zero
9d006194:	7ce79800 	ext	a3,a3,0x0,0x14
9d006198:	11200024 	beqz	t1,9d00622c <__muldf3+0x120>
9d00619c:	31cd00ff 	andi	t5,t6,0xff
9d0061a0:	240a07ff 	li	t2,2047
9d0061a4:	112a0041 	beq	t1,t2,9d0062ac <__muldf3+0x1a0>
9d0061a8:	00e67825 	or	t7,a3,a2
9d0061ac:	3c0a0010 	lui	t2,0x10
9d0061b0:	00ea3825 	or	a3,a3,t2
9d0061b4:	000738c0 	sll	a3,a3,0x3
9d0061b8:	00065742 	srl	t2,a2,0x1d
9d0061bc:	00ea3825 	or	a3,a3,t2
9d0061c0:	000630c0 	sll	a2,a2,0x3
9d0061c4:	2529fc01 	addiu	t1,t1,-1023
9d0061c8:	00005021 	move	t2,zero
9d0061cc:	014b5825 	or	t3,t2,t3
9d0061d0:	3c0f9d03 	lui	t7,0x9d03
9d0061d4:	25efbdd8 	addiu	t7,t7,-16936
9d0061d8:	000b5880 	sll	t3,t3,0x2
9d0061dc:	01eb5821 	addu	t3,t7,t3
9d0061e0:	8d6f0000 	lw	t7,0(t3)
9d0061e4:	01e00008 	jr	t7
9d0061e8:	01ac5826 	xor	t3,t5,t4
9d0061ec:	240907ff 	li	t1,2047
9d0061f0:	10690024 	beq	v1,t1,9d006284 <__muldf3+0x178>
9d0061f4:	3c090010 	lui	t1,0x10
9d0061f8:	00a92825 	or	a1,a1,t1
9d0061fc:	000528c0 	sll	a1,a1,0x3
9d006200:	00044f42 	srl	t1,a0,0x1d
9d006204:	00a92825 	or	a1,a1,t1
9d006208:	000420c0 	sll	a0,a0,0x3
9d00620c:	2463fc01 	addiu	v1,v1,-1023
9d006210:	00005821 	move	t3,zero
9d006214:	0000c021 	move	t8,zero
9d006218:	7cee07c0 	ext	t6,a3,0x1f,0x1
9d00621c:	7ce95500 	ext	t1,a3,0x14,0xb
9d006220:	31cd00ff 	andi	t5,t6,0xff
9d006224:	1520ffde 	bnez	t1,9d0061a0 <__muldf3+0x94>
9d006228:	7ce79800 	ext	a3,a3,0x0,0x14
9d00622c:	00e65025 	or	t2,a3,a2
9d006230:	51400024 	beqzl	t2,9d0062c4 <__muldf3+0x1b8>
9d006234:	00003821 	move	a3,zero
9d006238:	14e00003 	bnez	a3,9d006248 <__muldf3+0x13c>
9d00623c:	70ea5020 	clz	t2,a3
9d006240:	70ca5020 	clz	t2,a2
9d006244:	254a0020 	addiu	t2,t2,32
9d006248:	2549fff5 	addiu	t1,t2,-11
9d00624c:	292f001d 	slti	t7,t1,29
9d006250:	51e000cc 	beqzl	t7,9d006584 <__muldf3+0x478>
9d006254:	2547ffd8 	addiu	a3,t2,-40
9d006258:	240f001d 	li	t7,29
9d00625c:	254afff8 	addiu	t2,t2,-8
9d006260:	01e97823 	subu	t7,t7,t1
9d006264:	01e67806 	srlv	t7,a2,t7
9d006268:	01473804 	sllv	a3,a3,t2
9d00626c:	01e73825 	or	a3,t7,a3
9d006270:	01463004 	sllv	a2,a2,t2
9d006274:	240afc02 	li	t2,-1022
9d006278:	01494823 	subu	t1,t2,t1
9d00627c:	0b401873 	j	9d0061cc <__muldf3+0xc0>
9d006280:	00005021 	move	t2,zero
9d006284:	00a44825 	or	t1,a1,a0
9d006288:	240a000c 	li	t2,12
9d00628c:	240b0008 	li	t3,8
9d006290:	24180002 	li	t8,2
9d006294:	0149580b 	movn	t3,t2,t1
9d006298:	240a0003 	li	t2,3
9d00629c:	0009280a 	movz	a1,zero,t1
9d0062a0:	0009200a 	movz	a0,zero,t1
9d0062a4:	0b401886 	j	9d006218 <__muldf3+0x10c>
9d0062a8:	0149c00b 	movn	t8,t2,t1
9d0062ac:	240a0002 	li	t2,2
9d0062b0:	24190003 	li	t9,3
9d0062b4:	000f380a 	movz	a3,zero,t7
9d0062b8:	000f300a 	movz	a2,zero,t7
9d0062bc:	0b401873 	j	9d0061cc <__muldf3+0xc0>
9d0062c0:	032f500b 	movn	t2,t9,t7
9d0062c4:	00003021 	move	a2,zero
9d0062c8:	0b401873 	j	9d0061cc <__muldf3+0xc0>
9d0062cc:	240a0001 	li	t2,1
9d0062d0:	00002821 	move	a1,zero
9d0062d4:	00002021 	move	a0,zero
9d0062d8:	0b401886 	j	9d006218 <__muldf3+0x10c>
9d0062dc:	24180001 	li	t8,1
9d0062e0:	01604021 	move	t0,t3
9d0062e4:	03005021 	move	t2,t8
9d0062e8:	24030002 	li	v1,2
9d0062ec:	5143002e 	beql	t2,v1,9d0063a8 <__muldf3+0x29c>
9d0062f0:	00002821 	move	a1,zero
9d0062f4:	24030003 	li	v1,3
9d0062f8:	114300b2 	beq	t2,v1,9d0065c4 <__muldf3+0x4b8>
9d0062fc:	24030001 	li	v1,1
9d006300:	51430093 	beql	t2,v1,9d006550 <__muldf3+0x444>
9d006304:	00002821 	move	a1,zero
9d006308:	244203ff 	addiu	v0,v0,1023
9d00630c:	18400089 	blez	v0,9d006534 <__muldf3+0x428>
9d006310:	3086000f 	andi	a2,a0,0xf
9d006314:	24030004 	li	v1,4
9d006318:	10c30004 	beq	a2,v1,9d00632c <__muldf3+0x220>
9d00631c:	24830004 	addiu	v1,a0,4
9d006320:	0064202b 	sltu	a0,v1,a0
9d006324:	00a42821 	addu	a1,a1,a0
9d006328:	00602021 	move	a0,v1
9d00632c:	7ca30600 	ext	v1,a1,0x18,0x1
9d006330:	10600006 	beqz	v1,9d00634c <__muldf3+0x240>
9d006334:	284307ff 	slti	v1,v0,2047
9d006338:	3c03feff 	lui	v1,0xfeff
9d00633c:	3463ffff 	ori	v1,v1,0xffff
9d006340:	00a32824 	and	a1,a1,v1
9d006344:	24420001 	addiu	v0,v0,1
9d006348:	284307ff 	slti	v1,v0,2047
9d00634c:	14600093 	bnez	v1,9d00659c <__muldf3+0x490>
9d006350:	00053740 	sll	a2,a1,0x1d
9d006354:	01604021 	move	t0,t3
9d006358:	240207ff 	li	v0,2047
9d00635c:	00002821 	move	a1,zero
9d006360:	00002021 	move	a0,zero
9d006364:	00001821 	move	v1,zero
9d006368:	7ca39804 	ins	v1,a1,0x0,0x14
9d00636c:	7c43f504 	ins	v1,v0,0x14,0xb
9d006370:	7d03ffc4 	ins	v1,t0,0x1f,0x1
9d006374:	00801021 	move	v0,a0
9d006378:	8fb3000c 	lw	s3,12(sp)
9d00637c:	8fb20008 	lw	s2,8(sp)
9d006380:	8fb10004 	lw	s1,4(sp)
9d006384:	8fb00000 	lw	s0,0(sp)
9d006388:	03e00008 	jr	ra
9d00638c:	27bd0010 	addiu	sp,sp,16
9d006390:	03005021 	move	t2,t8
9d006394:	24030002 	li	v1,2
9d006398:	31080001 	andi	t0,t0,0x1
9d00639c:	1543ffd5 	bne	t2,v1,9d0062f4 <__muldf3+0x1e8>
9d0063a0:	01805821 	move	t3,t4
9d0063a4:	00002821 	move	a1,zero
9d0063a8:	00001821 	move	v1,zero
9d0063ac:	240207ff 	li	v0,2047
9d0063b0:	7ca39804 	ins	v1,a1,0x0,0x14
9d0063b4:	7c43f504 	ins	v1,v0,0x14,0xb
9d0063b8:	00002021 	move	a0,zero
9d0063bc:	7d03ffc4 	ins	v1,t0,0x1f,0x1
9d0063c0:	00801021 	move	v0,a0
9d0063c4:	8fb3000c 	lw	s3,12(sp)
9d0063c8:	8fb20008 	lw	s2,8(sp)
9d0063cc:	8fb10004 	lw	s1,4(sp)
9d0063d0:	8fb00000 	lw	s0,0(sp)
9d0063d4:	03e00008 	jr	ra
9d0063d8:	27bd0010 	addiu	sp,sp,16
9d0063dc:	01604021 	move	t0,t3
9d0063e0:	00e02821 	move	a1,a3
9d0063e4:	0b4018ba 	j	9d0062e8 <__muldf3+0x1dc>
9d0063e8:	00c02021 	move	a0,a2
9d0063ec:	00e40019 	multu	a3,a0
9d0063f0:	01231021 	addu	v0,t1,v1
9d0063f4:	00007012 	mflo	t6
9d0063f8:	00007810 	mfhi	t7
9d0063fc:	00c40019 	multu	a2,a0
9d006400:	0000c012 	mflo	t8
9d006404:	0000c810 	mfhi	t9
9d006408:	01d91821 	addu	v1,t6,t9
9d00640c:	006e682b 	sltu	t5,v1,t6
9d006410:	00c50019 	multu	a2,a1
9d006414:	00008012 	mflo	s0
9d006418:	00701821 	addu	v1,v1,s0
9d00641c:	00032240 	sll	a0,v1,0x9
9d006420:	00008810 	mfhi	s1
9d006424:	0098c025 	or	t8,a0,t8
9d006428:	0070402b 	sltu	t0,v1,s0
9d00642c:	0018c02b 	sltu	t8,zero,t8
9d006430:	00e50019 	multu	a3,a1
9d006434:	00031dc2 	srl	v1,v1,0x17
9d006438:	03032025 	or	a0,t8,v1
9d00643c:	00009012 	mflo	s2
9d006440:	01f27021 	addu	t6,t7,s2
9d006444:	01ae6021 	addu	t4,t5,t6
9d006448:	01914821 	addu	t1,t4,s1
9d00644c:	00009810 	mfhi	s3
9d006450:	01281821 	addu	v1,t1,t0
9d006454:	01cf702b 	sltu	t6,t6,t7
9d006458:	018d602b 	sltu	t4,t4,t5
9d00645c:	0068402b 	sltu	t0,v1,t0
9d006460:	0131482b 	sltu	t1,t1,s1
9d006464:	018e6025 	or	t4,t4,t6
9d006468:	01932821 	addu	a1,t4,s3
9d00646c:	01094025 	or	t0,t0,t1
9d006470:	00a82821 	addu	a1,a1,t0
9d006474:	000335c2 	srl	a2,v1,0x17
9d006478:	00052a40 	sll	a1,a1,0x9
9d00647c:	00a62825 	or	a1,a1,a2
9d006480:	00031a40 	sll	v1,v1,0x9
9d006484:	7ca70600 	ext	a3,a1,0x18,0x1
9d006488:	10e0ff9f 	beqz	a3,9d006308 <__muldf3+0x1fc>
9d00648c:	00832025 	or	a0,a0,v1
9d006490:	30860001 	andi	a2,a0,0x1
9d006494:	00042042 	srl	a0,a0,0x1
9d006498:	00051fc0 	sll	v1,a1,0x1f
9d00649c:	00c42025 	or	a0,a2,a0
9d0064a0:	24420001 	addiu	v0,v0,1
9d0064a4:	00832025 	or	a0,a0,v1
9d0064a8:	0b4018c2 	j	9d006308 <__muldf3+0x1fc>
9d0064ac:	00052842 	srl	a1,a1,0x1
9d0064b0:	31c80001 	andi	t0,t6,0x1
9d0064b4:	00e02821 	move	a1,a3
9d0064b8:	00c02021 	move	a0,a2
9d0064bc:	0b4018ba 	j	9d0062e8 <__muldf3+0x1dc>
9d0064c0:	01a05821 	move	t3,t5
9d0064c4:	00e53825 	or	a3,a3,a1
9d0064c8:	3c020008 	lui	v0,0x8
9d0064cc:	00e23824 	and	a3,a3,v0
9d0064d0:	54e00038 	bnezl	a3,9d0065b4 <__muldf3+0x4a8>
9d0064d4:	3c05000f 	lui	a1,0xf
9d0064d8:	00a22825 	or	a1,a1,v0
9d0064dc:	01805821 	move	t3,t4
9d0064e0:	7ca59800 	ext	a1,a1,0x0,0x14
9d0064e4:	00001821 	move	v1,zero
9d0064e8:	240207ff 	li	v0,2047
9d0064ec:	7ca39804 	ins	v1,a1,0x0,0x14
9d0064f0:	7c43f504 	ins	v1,v0,0x14,0xb
9d0064f4:	01604021 	move	t0,t3
9d0064f8:	7d03ffc4 	ins	v1,t0,0x1f,0x1
9d0064fc:	00801021 	move	v0,a0
9d006500:	8fb3000c 	lw	s3,12(sp)
9d006504:	8fb20008 	lw	s2,8(sp)
9d006508:	8fb10004 	lw	s1,4(sp)
9d00650c:	8fb00000 	lw	s0,0(sp)
9d006510:	03e00008 	jr	ra
9d006514:	27bd0010 	addiu	sp,sp,16
9d006518:	3c05000f 	lui	a1,0xf
9d00651c:	00004021 	move	t0,zero
9d006520:	34a5ffff 	ori	a1,a1,0xffff
9d006524:	2404ffff 	li	a0,-1
9d006528:	00005821 	move	t3,zero
9d00652c:	0b4018ba 	j	9d0062e8 <__muldf3+0x1dc>
9d006530:	240a0003 	li	t2,3
9d006534:	24030001 	li	v1,1
9d006538:	00621023 	subu	v0,v1,v0
9d00653c:	28430039 	slti	v1,v0,57
9d006540:	14600023 	bnez	v1,9d0065d0 <__muldf3+0x4c4>
9d006544:	28430020 	slti	v1,v0,32
9d006548:	01604021 	move	t0,t3
9d00654c:	00002821 	move	a1,zero
9d006550:	00001821 	move	v1,zero
9d006554:	00001021 	move	v0,zero
9d006558:	7ca39804 	ins	v1,a1,0x0,0x14
9d00655c:	7c43f504 	ins	v1,v0,0x14,0xb
9d006560:	00002021 	move	a0,zero
9d006564:	7d03ffc4 	ins	v1,t0,0x1f,0x1
9d006568:	00801021 	move	v0,a0
9d00656c:	8fb3000c 	lw	s3,12(sp)
9d006570:	8fb20008 	lw	s2,8(sp)
9d006574:	8fb10004 	lw	s1,4(sp)
9d006578:	8fb00000 	lw	s0,0(sp)
9d00657c:	03e00008 	jr	ra
9d006580:	27bd0010 	addiu	sp,sp,16
9d006584:	00e63804 	sllv	a3,a2,a3
9d006588:	0b40189d 	j	9d006274 <__muldf3+0x168>
9d00658c:	00003021 	move	a2,zero
9d006590:	00a42804 	sllv	a1,a0,a1
9d006594:	0b40185f 	j	9d00617c <__muldf3+0x70>
9d006598:	00002021 	move	a0,zero
9d00659c:	000420c2 	srl	a0,a0,0x3
9d0065a0:	00c42025 	or	a0,a2,a0
9d0065a4:	7ca598c0 	ext	a1,a1,0x3,0x14
9d0065a8:	304207ff 	andi	v0,v0,0x7ff
9d0065ac:	0b4018d9 	j	9d006364 <__muldf3+0x258>
9d0065b0:	01604021 	move	t0,t3
9d0065b4:	34a5ffff 	ori	a1,a1,0xffff
9d0065b8:	2404ffff 	li	a0,-1
9d0065bc:	0b401938 	j	9d0064e0 <__muldf3+0x3d4>
9d0065c0:	00005821 	move	t3,zero
9d0065c4:	3c070008 	lui	a3,0x8
9d0065c8:	0b401938 	j	9d0064e0 <__muldf3+0x3d4>
9d0065cc:	00a72825 	or	a1,a1,a3
9d0065d0:	10600019 	beqz	v1,9d006638 <__muldf3+0x52c>
9d0065d4:	24060020 	li	a2,32
9d0065d8:	24030020 	li	v1,32
9d0065dc:	00621823 	subu	v1,v1,v0
9d0065e0:	00653804 	sllv	a3,a1,v1
9d0065e4:	00443006 	srlv	a2,a0,v0
9d0065e8:	00641804 	sllv	v1,a0,v1
9d0065ec:	00e63825 	or	a3,a3,a2
9d0065f0:	0003182b 	sltu	v1,zero,v1
9d0065f4:	00e32025 	or	a0,a3,v1
9d0065f8:	00452806 	srlv	a1,a1,v0
9d0065fc:	3083000f 	andi	v1,a0,0xf
9d006600:	24020004 	li	v0,4
9d006604:	10620004 	beq	v1,v0,9d006618 <__muldf3+0x50c>
9d006608:	24820004 	addiu	v0,a0,4
9d00660c:	0044202b 	sltu	a0,v0,a0
9d006610:	00a42821 	addu	a1,a1,a0
9d006614:	00402021 	move	a0,v0
9d006618:	7ca205c0 	ext	v0,a1,0x17,0x1
9d00661c:	10400010 	beqz	v0,9d006660 <__muldf3+0x554>
9d006620:	00053740 	sll	a2,a1,0x1d
9d006624:	01604021 	move	t0,t3
9d006628:	24020001 	li	v0,1
9d00662c:	00002821 	move	a1,zero
9d006630:	0b4018d9 	j	9d006364 <__muldf3+0x258>
9d006634:	00002021 	move	a0,zero
9d006638:	00453806 	srlv	a3,a1,v0
9d00663c:	10460003 	beq	v0,a2,9d00664c <__muldf3+0x540>
9d006640:	00001821 	move	v1,zero
9d006644:	00021023 	negu	v0,v0
9d006648:	00451804 	sllv	v1,a1,v0
9d00664c:	00642025 	or	a0,v1,a0
9d006650:	0004202b 	sltu	a0,zero,a0
9d006654:	00872025 	or	a0,a0,a3
9d006658:	0b40197f 	j	9d0065fc <__muldf3+0x4f0>
9d00665c:	00002821 	move	a1,zero
9d006660:	000420c2 	srl	a0,a0,0x3
9d006664:	00c42025 	or	a0,a2,a0
9d006668:	7ca598c0 	ext	a1,a1,0x3,0x14
9d00666c:	01604021 	move	t0,t3
9d006670:	0b4018d9 	j	9d006364 <__muldf3+0x258>
9d006674:	00001021 	move	v0,zero

9d006678 <__subdf3>:
9d006678:	7cac9800 	ext	t4,a1,0x0,0x14
9d00667c:	7ce99800 	ext	t1,a3,0x0,0x14
9d006680:	7cad07c0 	ext	t5,a1,0x1f,0x1
9d006684:	00067742 	srl	t6,a2,0x1d
9d006688:	000c60c0 	sll	t4,t4,0x3
9d00668c:	00044742 	srl	t0,a0,0x1d
9d006690:	000948c0 	sll	t1,t1,0x3
9d006694:	7ce35500 	ext	v1,a3,0x14,0xb
9d006698:	240207ff 	li	v0,2047
9d00669c:	7ca55500 	ext	a1,a1,0x14,0xb
9d0066a0:	31ab00ff 	andi	t3,t5,0xff
9d0066a4:	01886025 	or	t4,t4,t0
9d0066a8:	000450c0 	sll	t2,a0,0x3
9d0066ac:	00073fc2 	srl	a3,a3,0x1f
9d0066b0:	012e4825 	or	t1,t1,t6
9d0066b4:	10620014 	beq	v1,v0,9d006708 <__subdf3+0x90>
9d0066b8:	000630c0 	sll	a2,a2,0x3
9d0066bc:	38e70001 	xori	a3,a3,0x1
9d0066c0:	11670073 	beq	t3,a3,9d006890 <__subdf3+0x218>
9d0066c4:	00a34023 	subu	t0,a1,v1
9d0066c8:	190000c4 	blez	t0,9d0069dc <__subdf3+0x364>
9d0066cc:	00000000 	nop
9d0066d0:	14600012 	bnez	v1,9d00671c <__subdf3+0xa4>
9d0066d4:	240207ff 	li	v0,2047
9d0066d8:	01261025 	or	v0,t1,a2
9d0066dc:	5040009b 	beqzl	v0,9d00694c <__subdf3+0x2d4>
9d0066e0:	24a80001 	addiu	t0,a1,1
9d0066e4:	2508ffff 	addiu	t0,t0,-1
9d0066e8:	550000ae 	bnezl	t0,9d0069a4 <__subdf3+0x32c>
9d0066ec:	240207ff 	li	v0,2047
9d0066f0:	01462023 	subu	a0,t2,a2
9d0066f4:	01891023 	subu	v0,t4,t1
9d0066f8:	0144502b 	sltu	t2,t2,a0
9d0066fc:	004a1023 	subu	v0,v0,t2
9d006700:	0b4019df 	j	9d00677c <__subdf3+0x104>
9d006704:	00a01821 	move	v1,a1
9d006708:	01261025 	or	v0,t1,a2
9d00670c:	5040ffec 	beqzl	v0,9d0066c0 <__subdf3+0x48>
9d006710:	38e70001 	xori	a3,a3,0x1
9d006714:	0b4019b0 	j	9d0066c0 <__subdf3+0x48>
9d006718:	00000000 	nop
9d00671c:	10a200a4 	beq	a1,v0,9d0069b0 <__subdf3+0x338>
9d006720:	314e000f 	andi	t6,t2,0xf
9d006724:	3c020080 	lui	v0,0x80
9d006728:	01224825 	or	t1,t1,v0
9d00672c:	29020039 	slti	v0,t0,57
9d006730:	104000c9 	beqz	v0,9d006a58 <__subdf3+0x3e0>
9d006734:	01262025 	or	a0,t1,a2
9d006738:	29020020 	slti	v0,t0,32
9d00673c:	104000ec 	beqz	v0,9d006af0 <__subdf3+0x478>
9d006740:	24040020 	li	a0,32
9d006744:	24020020 	li	v0,32
9d006748:	00481023 	subu	v0,v0,t0
9d00674c:	00492004 	sllv	a0,t1,v0
9d006750:	01061806 	srlv	v1,a2,t0
9d006754:	00463004 	sllv	a2,a2,v0
9d006758:	00832025 	or	a0,a0,v1
9d00675c:	0006302b 	sltu	a2,zero,a2
9d006760:	00862025 	or	a0,a0,a2
9d006764:	01091006 	srlv	v0,t1,t0
9d006768:	01442023 	subu	a0,t2,a0
9d00676c:	01821023 	subu	v0,t4,v0
9d006770:	0144502b 	sltu	t2,t2,a0
9d006774:	004a1023 	subu	v0,v0,t2
9d006778:	00a01821 	move	v1,a1
9d00677c:	7c4505c0 	ext	a1,v0,0x17,0x1
9d006780:	10a00093 	beqz	a1,9d0069d0 <__subdf3+0x358>
9d006784:	7c48b000 	ext	t0,v0,0x0,0x17
9d006788:	15000003 	bnez	t0,9d006798 <__subdf3+0x120>
9d00678c:	71021020 	clz	v0,t0
9d006790:	70821020 	clz	v0,a0
9d006794:	24420020 	addiu	v0,v0,32
9d006798:	2445fff8 	addiu	a1,v0,-8
9d00679c:	28a60020 	slti	a2,a1,32
9d0067a0:	10c000aa 	beqz	a2,9d006a4c <__subdf3+0x3d4>
9d0067a4:	2442ffd8 	addiu	v0,v0,-40
9d0067a8:	00051023 	negu	v0,a1
9d0067ac:	00441006 	srlv	v0,a0,v0
9d0067b0:	00a84004 	sllv	t0,t0,a1
9d0067b4:	00484025 	or	t0,v0,t0
9d0067b8:	00a42004 	sllv	a0,a0,a1
9d0067bc:	00a3102a 	slt	v0,a1,v1
9d0067c0:	14400080 	bnez	v0,9d0069c4 <__subdf3+0x34c>
9d0067c4:	3c02ff7f 	lui	v0,0xff7f
9d0067c8:	00a31823 	subu	v1,a1,v1
9d0067cc:	24630001 	addiu	v1,v1,1
9d0067d0:	28620020 	slti	v0,v1,32
9d0067d4:	104000b9 	beqz	v0,9d006abc <__subdf3+0x444>
9d0067d8:	24050020 	li	a1,32
9d0067dc:	24020020 	li	v0,32
9d0067e0:	00431023 	subu	v0,v0,v1
9d0067e4:	00642806 	srlv	a1,a0,v1
9d0067e8:	00442004 	sllv	a0,a0,v0
9d0067ec:	00481004 	sllv	v0,t0,v0
9d0067f0:	00a21025 	or	v0,a1,v0
9d0067f4:	0004202b 	sltu	a0,zero,a0
9d0067f8:	00442025 	or	a0,v0,a0
9d0067fc:	00681006 	srlv	v0,t0,v1
9d006800:	308e000f 	andi	t6,a0,0xf
9d006804:	24080001 	li	t0,1
9d006808:	00001821 	move	v1,zero
9d00680c:	24050004 	li	a1,4
9d006810:	51c50055 	beql	t6,a1,9d006968 <__subdf3+0x2f0>
9d006814:	316b0001 	andi	t3,t3,0x1
9d006818:	24850004 	addiu	a1,a0,4
9d00681c:	00a4202b 	sltu	a0,a1,a0
9d006820:	00441021 	addu	v0,v0,a0
9d006824:	24680001 	addiu	t0,v1,1
9d006828:	316b0001 	andi	t3,t3,0x1
9d00682c:	7c4405c0 	ext	a0,v0,0x17,0x1
9d006830:	50800009 	beqzl	a0,9d006858 <__subdf3+0x1e0>
9d006834:	310807ff 	andi	t0,t0,0x7ff
9d006838:	240307ff 	li	v1,2047
9d00683c:	1103007a 	beq	t0,v1,9d006a28 <__subdf3+0x3b0>
9d006840:	3c04ff7f 	lui	a0,0xff7f
9d006844:	3484ffff 	ori	a0,a0,0xffff
9d006848:	01001821 	move	v1,t0
9d00684c:	00441024 	and	v0,v0,a0
9d006850:	25080001 	addiu	t0,t0,1
9d006854:	310807ff 	andi	t0,t0,0x7ff
9d006858:	00023740 	sll	a2,v0,0x1d
9d00685c:	000528c2 	srl	a1,a1,0x3
9d006860:	29080002 	slti	t0,t0,2
9d006864:	00c53025 	or	a2,a2,a1
9d006868:	15000031 	bnez	t0,9d006930 <__subdf3+0x2b8>
9d00686c:	000210c2 	srl	v0,v0,0x3
9d006870:	7c429800 	ext	v0,v0,0x0,0x14
9d006874:	306807ff 	andi	t0,v1,0x7ff
9d006878:	00001821 	move	v1,zero
9d00687c:	7c439804 	ins	v1,v0,0x0,0x14
9d006880:	7d03f504 	ins	v1,t0,0x14,0xb
9d006884:	7d63ffc4 	ins	v1,t3,0x1f,0x1
9d006888:	03e00008 	jr	ra
9d00688c:	00c01021 	move	v0,a2
9d006890:	00a31023 	subu	v0,a1,v1
9d006894:	18400076 	blez	v0,9d006a70 <__subdf3+0x3f8>
9d006898:	00000000 	nop
9d00689c:	10600034 	beqz	v1,9d006970 <__subdf3+0x2f8>
9d0068a0:	01261825 	or	v1,t1,a2
9d0068a4:	240307ff 	li	v1,2047
9d0068a8:	10a3003a 	beq	a1,v1,9d006994 <__subdf3+0x31c>
9d0068ac:	314e000f 	andi	t6,t2,0xf
9d0068b0:	3c030080 	lui	v1,0x80
9d0068b4:	01234825 	or	t1,t1,v1
9d0068b8:	28430039 	slti	v1,v0,57
9d0068bc:	146000ba 	bnez	v1,9d006ba8 <__subdf3+0x530>
9d0068c0:	28430020 	slti	v1,v0,32
9d0068c4:	01262025 	or	a0,t1,a2
9d0068c8:	00001021 	move	v0,zero
9d0068cc:	0004202b 	sltu	a0,zero,a0
9d0068d0:	008a2021 	addu	a0,a0,t2
9d0068d4:	004c1021 	addu	v0,v0,t4
9d0068d8:	008a502b 	sltu	t2,a0,t2
9d0068dc:	004a1021 	addu	v0,v0,t2
9d0068e0:	00a01821 	move	v1,a1
9d0068e4:	7c4505c0 	ext	a1,v0,0x17,0x1
9d0068e8:	10a0003a 	beqz	a1,9d0069d4 <__subdf3+0x35c>
9d0068ec:	24680001 	addiu	t0,v1,1
9d0068f0:	24630001 	addiu	v1,v1,1
9d0068f4:	240507ff 	li	a1,2047
9d0068f8:	506500dd 	beql	v1,a1,9d006c70 <__subdf3+0x5f8>
9d0068fc:	31ab0001 	andi	t3,t5,0x1
9d006900:	3c05ff7f 	lui	a1,0xff7f
9d006904:	34a5ffff 	ori	a1,a1,0xffff
9d006908:	00451024 	and	v0,v0,a1
9d00690c:	30850001 	andi	a1,a0,0x1
9d006910:	00042042 	srl	a0,a0,0x1
9d006914:	00a42025 	or	a0,a1,a0
9d006918:	00022fc0 	sll	a1,v0,0x1f
9d00691c:	00852025 	or	a0,a0,a1
9d006920:	00021042 	srl	v0,v0,0x1
9d006924:	24680001 	addiu	t0,v1,1
9d006928:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d00692c:	308e000f 	andi	t6,a0,0xf
9d006930:	00c22025 	or	a0,a2,v0
9d006934:	1080017b 	beqz	a0,9d006f24 <__subdf3+0x8ac>
9d006938:	306807ff 	andi	t0,v1,0x7ff
9d00693c:	10600049 	beqz	v1,9d006a64 <__subdf3+0x3ec>
9d006940:	3c040008 	lui	a0,0x8
9d006944:	0b401a1c 	j	9d006870 <__subdf3+0x1f8>
9d006948:	00441025 	or	v0,v0,a0
9d00694c:	00a01821 	move	v1,a1
9d006950:	314e000f 	andi	t6,t2,0xf
9d006954:	24050004 	li	a1,4
9d006958:	01801021 	move	v0,t4
9d00695c:	15c5ffae 	bne	t6,a1,9d006818 <__subdf3+0x1a0>
9d006960:	01402021 	move	a0,t2
9d006964:	316b0001 	andi	t3,t3,0x1
9d006968:	0b401a0b 	j	9d00682c <__subdf3+0x1b4>
9d00696c:	00802821 	move	a1,a0
9d006970:	1060fff6 	beqz	v1,9d00694c <__subdf3+0x2d4>
9d006974:	24a80001 	addiu	t0,a1,1
9d006978:	2442ffff 	addiu	v0,v0,-1
9d00697c:	1040009f 	beqz	v0,9d006bfc <__subdf3+0x584>
9d006980:	00ca2021 	addu	a0,a2,t2
9d006984:	240307ff 	li	v1,2047
9d006988:	54a3ffcc 	bnel	a1,v1,9d0068bc <__subdf3+0x244>
9d00698c:	28430039 	slti	v1,v0,57
9d006990:	314e000f 	andi	t6,t2,0xf
9d006994:	01801021 	move	v0,t4
9d006998:	01402021 	move	a0,t2
9d00699c:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d0069a0:	24080800 	li	t0,2048
9d0069a4:	54a2ff62 	bnel	a1,v0,9d006730 <__subdf3+0xb8>
9d0069a8:	29020039 	slti	v0,t0,57
9d0069ac:	314e000f 	andi	t6,t2,0xf
9d0069b0:	01801021 	move	v0,t4
9d0069b4:	01402021 	move	a0,t2
9d0069b8:	24080800 	li	t0,2048
9d0069bc:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d0069c0:	240307ff 	li	v1,2047
9d0069c4:	3442ffff 	ori	v0,v0,0xffff
9d0069c8:	00651823 	subu	v1,v1,a1
9d0069cc:	01021024 	and	v0,t0,v0
9d0069d0:	24680001 	addiu	t0,v1,1
9d0069d4:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d0069d8:	308e000f 	andi	t6,a0,0xf
9d0069dc:	1500004e 	bnez	t0,9d006b18 <__subdf3+0x4a0>
9d0069e0:	24a20001 	addiu	v0,a1,1
9d0069e4:	304207ff 	andi	v0,v0,0x7ff
9d0069e8:	28420002 	slti	v0,v0,2
9d0069ec:	14400092 	bnez	v0,9d006c38 <__subdf3+0x5c0>
9d0069f0:	01462023 	subu	a0,t2,a2
9d0069f4:	0144102b 	sltu	v0,t2,a0
9d0069f8:	01894023 	subu	t0,t4,t1
9d0069fc:	01024023 	subu	t0,t0,v0
9d006a00:	7d0205c0 	ext	v0,t0,0x17,0x1
9d006a04:	10400060 	beqz	v0,9d006b88 <__subdf3+0x510>
9d006a08:	01041025 	or	v0,t0,a0
9d006a0c:	00ca2023 	subu	a0,a2,t2
9d006a10:	012c4823 	subu	t1,t1,t4
9d006a14:	00c4302b 	sltu	a2,a2,a0
9d006a18:	01264023 	subu	t0,t1,a2
9d006a1c:	00a01821 	move	v1,a1
9d006a20:	0b4019e2 	j	9d006788 <__subdf3+0x110>
9d006a24:	00e05821 	move	t3,a3
9d006a28:	00001021 	move	v0,zero
9d006a2c:	00001821 	move	v1,zero
9d006a30:	240807ff 	li	t0,2047
9d006a34:	7c439804 	ins	v1,v0,0x0,0x14
9d006a38:	00003021 	move	a2,zero
9d006a3c:	7d03f504 	ins	v1,t0,0x14,0xb
9d006a40:	7d63ffc4 	ins	v1,t3,0x1f,0x1
9d006a44:	03e00008 	jr	ra
9d006a48:	00c01021 	move	v0,a2
9d006a4c:	00444004 	sllv	t0,a0,v0
9d006a50:	0b4019ef 	j	9d0067bc <__subdf3+0x144>
9d006a54:	00002021 	move	a0,zero
9d006a58:	00001021 	move	v0,zero
9d006a5c:	0b4019da 	j	9d006768 <__subdf3+0xf0>
9d006a60:	0004202b 	sltu	a0,zero,a0
9d006a64:	7c429800 	ext	v0,v0,0x0,0x14
9d006a68:	0b401a1e 	j	9d006878 <__subdf3+0x200>
9d006a6c:	00004021 	move	t0,zero
9d006a70:	1440008d 	bnez	v0,9d006ca8 <__subdf3+0x630>
9d006a74:	00000000 	nop
9d006a78:	24a30001 	addiu	v1,a1,1
9d006a7c:	306207ff 	andi	v0,v1,0x7ff
9d006a80:	28420002 	slti	v0,v0,2
9d006a84:	14400062 	bnez	v0,9d006c10 <__subdf3+0x598>
9d006a88:	240207ff 	li	v0,2047
9d006a8c:	10620077 	beq	v1,v0,9d006c6c <__subdf3+0x5f4>
9d006a90:	00ca3021 	addu	a2,a2,t2
9d006a94:	00ca502b 	sltu	t2,a2,t2
9d006a98:	012c1021 	addu	v0,t1,t4
9d006a9c:	004a1021 	addu	v0,v0,t2
9d006aa0:	00023fc0 	sll	a3,v0,0x1f
9d006aa4:	00063042 	srl	a2,a2,0x1
9d006aa8:	00c72025 	or	a0,a2,a3
9d006aac:	00021042 	srl	v0,v0,0x1
9d006ab0:	24a80002 	addiu	t0,a1,2
9d006ab4:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d006ab8:	308e000f 	andi	t6,a0,0xf
9d006abc:	00683006 	srlv	a2,t0,v1
9d006ac0:	10650003 	beq	v1,a1,9d006ad0 <__subdf3+0x458>
9d006ac4:	00001021 	move	v0,zero
9d006ac8:	00031023 	negu	v0,v1
9d006acc:	00481004 	sllv	v0,t0,v0
9d006ad0:	00442025 	or	a0,v0,a0
9d006ad4:	0004202b 	sltu	a0,zero,a0
9d006ad8:	00862025 	or	a0,a0,a2
9d006adc:	308e000f 	andi	t6,a0,0xf
9d006ae0:	24080001 	li	t0,1
9d006ae4:	00001021 	move	v0,zero
9d006ae8:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d006aec:	00001821 	move	v1,zero
9d006af0:	01091806 	srlv	v1,t1,t0
9d006af4:	11040003 	beq	t0,a0,9d006b04 <__subdf3+0x48c>
9d006af8:	00001021 	move	v0,zero
9d006afc:	00084023 	negu	t0,t0
9d006b00:	01091004 	sllv	v0,t1,t0
9d006b04:	00462025 	or	a0,v0,a2
9d006b08:	0004202b 	sltu	a0,zero,a0
9d006b0c:	00832025 	or	a0,a0,v1
9d006b10:	0b4019da 	j	9d006768 <__subdf3+0xf0>
9d006b14:	00001021 	move	v0,zero
9d006b18:	10a0002f 	beqz	a1,9d006bd8 <__subdf3+0x560>
9d006b1c:	00084023 	negu	t0,t0
9d006b20:	240207ff 	li	v0,2047
9d006b24:	10620079 	beq	v1,v0,9d006d0c <__subdf3+0x694>
9d006b28:	30ce000f 	andi	t6,a2,0xf
9d006b2c:	3c020080 	lui	v0,0x80
9d006b30:	01826025 	or	t4,t4,v0
9d006b34:	29020039 	slti	v0,t0,57
9d006b38:	10400095 	beqz	v0,9d006d90 <__subdf3+0x718>
9d006b3c:	018a2025 	or	a0,t4,t2
9d006b40:	29020020 	slti	v0,t0,32
9d006b44:	504000cd 	beqzl	v0,9d006e7c <__subdf3+0x804>
9d006b48:	24040020 	li	a0,32
9d006b4c:	24020020 	li	v0,32
9d006b50:	00481023 	subu	v0,v0,t0
9d006b54:	004c2804 	sllv	a1,t4,v0
9d006b58:	010a2006 	srlv	a0,t2,t0
9d006b5c:	004a1004 	sllv	v0,t2,v0
9d006b60:	0002102b 	sltu	v0,zero,v0
9d006b64:	00a42025 	or	a0,a1,a0
9d006b68:	00822025 	or	a0,a0,v0
9d006b6c:	010c1006 	srlv	v0,t4,t0
9d006b70:	00c42023 	subu	a0,a2,a0
9d006b74:	01221023 	subu	v0,t1,v0
9d006b78:	00c4302b 	sltu	a2,a2,a0
9d006b7c:	00461023 	subu	v0,v0,a2
9d006b80:	0b4019df 	j	9d00677c <__subdf3+0x104>
9d006b84:	00e05821 	move	t3,a3
9d006b88:	1440feff 	bnez	v0,9d006788 <__subdf3+0x110>
9d006b8c:	00a01821 	move	v1,a1
9d006b90:	00005821 	move	t3,zero
9d006b94:	24080001 	li	t0,1
9d006b98:	00001021 	move	v0,zero
9d006b9c:	24050004 	li	a1,4
9d006ba0:	0b401a0b 	j	9d00682c <__subdf3+0x1b4>
9d006ba4:	00001821 	move	v1,zero
9d006ba8:	50600035 	beqzl	v1,9d006c80 <__subdf3+0x608>
9d006bac:	24040020 	li	a0,32
9d006bb0:	24030020 	li	v1,32
9d006bb4:	00621823 	subu	v1,v1,v0
9d006bb8:	00693804 	sllv	a3,t1,v1
9d006bbc:	00462006 	srlv	a0,a2,v0
9d006bc0:	00661804 	sllv	v1,a2,v1
9d006bc4:	00e42025 	or	a0,a3,a0
9d006bc8:	0003182b 	sltu	v1,zero,v1
9d006bcc:	00832025 	or	a0,a0,v1
9d006bd0:	0b401a34 	j	9d0068d0 <__subdf3+0x258>
9d006bd4:	00491006 	srlv	v0,t1,v0
9d006bd8:	018a1025 	or	v0,t4,t2
9d006bdc:	54400064 	bnezl	v0,9d006d70 <__subdf3+0x6f8>
9d006be0:	2508ffff 	addiu	t0,t0,-1
9d006be4:	24680001 	addiu	t0,v1,1
9d006be8:	30ce000f 	andi	t6,a2,0xf
9d006bec:	01201021 	move	v0,t1
9d006bf0:	00c02021 	move	a0,a2
9d006bf4:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d006bf8:	00e05821 	move	t3,a3
9d006bfc:	012c1021 	addu	v0,t1,t4
9d006c00:	008a502b 	sltu	t2,a0,t2
9d006c04:	004a1021 	addu	v0,v0,t2
9d006c08:	0b401a39 	j	9d0068e4 <__subdf3+0x26c>
9d006c0c:	00a01821 	move	v1,a1
9d006c10:	14a0008d 	bnez	a1,9d006e48 <__subdf3+0x7d0>
9d006c14:	018a1025 	or	v0,t4,t2
9d006c18:	544000ac 	bnezl	v0,9d006ecc <__subdf3+0x854>
9d006c1c:	01261025 	or	v0,t1,a2
9d006c20:	30ce000f 	andi	t6,a2,0xf
9d006c24:	01201021 	move	v0,t1
9d006c28:	00c02021 	move	a0,a2
9d006c2c:	24080001 	li	t0,1
9d006c30:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d006c34:	00001821 	move	v1,zero
9d006c38:	14a00025 	bnez	a1,9d006cd0 <__subdf3+0x658>
9d006c3c:	018a1025 	or	v0,t4,t2
9d006c40:	1440006f 	bnez	v0,9d006e00 <__subdf3+0x788>
9d006c44:	01261025 	or	v0,t1,a2
9d006c48:	5040ffd2 	beqzl	v0,9d006b94 <__subdf3+0x51c>
9d006c4c:	00005821 	move	t3,zero
9d006c50:	30ce000f 	andi	t6,a2,0xf
9d006c54:	01201021 	move	v0,t1
9d006c58:	00c02021 	move	a0,a2
9d006c5c:	00e05821 	move	t3,a3
9d006c60:	24080001 	li	t0,1
9d006c64:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d006c68:	00001821 	move	v1,zero
9d006c6c:	31ab0001 	andi	t3,t5,0x1
9d006c70:	24080800 	li	t0,2048
9d006c74:	00001021 	move	v0,zero
9d006c78:	0b401a0b 	j	9d00682c <__subdf3+0x1b4>
9d006c7c:	24050004 	li	a1,4
9d006c80:	00493806 	srlv	a3,t1,v0
9d006c84:	10440003 	beq	v0,a0,9d006c94 <__subdf3+0x61c>
9d006c88:	00001821 	move	v1,zero
9d006c8c:	00021023 	negu	v0,v0
9d006c90:	00491804 	sllv	v1,t1,v0
9d006c94:	00662025 	or	a0,v1,a2
9d006c98:	0004202b 	sltu	a0,zero,a0
9d006c9c:	00872025 	or	a0,a0,a3
9d006ca0:	0b401a34 	j	9d0068d0 <__subdf3+0x258>
9d006ca4:	00001021 	move	v0,zero
9d006ca8:	14a0003c 	bnez	a1,9d006d9c <__subdf3+0x724>
9d006cac:	00021023 	negu	v0,v0
9d006cb0:	018a2025 	or	a0,t4,t2
9d006cb4:	5480007b 	bnezl	a0,9d006ea4 <__subdf3+0x82c>
9d006cb8:	2442ffff 	addiu	v0,v0,-1
9d006cbc:	24680001 	addiu	t0,v1,1
9d006cc0:	30ce000f 	andi	t6,a2,0xf
9d006cc4:	01201021 	move	v0,t1
9d006cc8:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d006ccc:	00c02021 	move	a0,a2
9d006cd0:	54400014 	bnezl	v0,9d006d24 <__subdf3+0x6ac>
9d006cd4:	01263025 	or	a2,t1,a2
9d006cd8:	01261025 	or	v0,t1,a2
9d006cdc:	1440000b 	bnez	v0,9d006d0c <__subdf3+0x694>
9d006ce0:	30ce000f 	andi	t6,a2,0xf
9d006ce4:	3c02007f 	lui	v0,0x7f
9d006ce8:	00005821 	move	t3,zero
9d006cec:	24080800 	li	t0,2048
9d006cf0:	3442ffff 	ori	v0,v0,0xffff
9d006cf4:	2405fffc 	li	a1,-4
9d006cf8:	0b401a0b 	j	9d00682c <__subdf3+0x1b4>
9d006cfc:	240307ff 	li	v1,2047
9d006d00:	5462ff8d 	bnel	v1,v0,9d006b38 <__subdf3+0x4c0>
9d006d04:	29020039 	slti	v0,t0,57
9d006d08:	30ce000f 	andi	t6,a2,0xf
9d006d0c:	01201021 	move	v0,t1
9d006d10:	00c02021 	move	a0,a2
9d006d14:	00e05821 	move	t3,a3
9d006d18:	24080800 	li	t0,2048
9d006d1c:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d006d20:	240307ff 	li	v1,2047
9d006d24:	10c0ff22 	beqz	a2,9d0069b0 <__subdf3+0x338>
9d006d28:	314e000f 	andi	t6,t2,0xf
9d006d2c:	000c18c2 	srl	v1,t4,0x3
9d006d30:	000910c2 	srl	v0,t1,0x3
9d006d34:	00431025 	or	v0,v0,v1
9d006d38:	7c4204c0 	ext	v0,v0,0x13,0x1
9d006d3c:	54400072 	bnezl	v0,9d006f08 <__subdf3+0x890>
9d006d40:	3c02007f 	lui	v0,0x7f
9d006d44:	000a50c2 	srl	t2,t2,0x3
9d006d48:	000c2740 	sll	a0,t4,0x1d
9d006d4c:	008a2025 	or	a0,a0,t2
9d006d50:	00041742 	srl	v0,a0,0x1d
9d006d54:	000318c0 	sll	v1,v1,0x3
9d006d58:	000420c0 	sll	a0,a0,0x3
9d006d5c:	00431025 	or	v0,v0,v1
9d006d60:	308e000f 	andi	t6,a0,0xf
9d006d64:	24080800 	li	t0,2048
9d006d68:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d006d6c:	240307ff 	li	v1,2047
9d006d70:	5500ffe3 	bnezl	t0,9d006d00 <__subdf3+0x688>
9d006d74:	240207ff 	li	v0,2047
9d006d78:	00ca2023 	subu	a0,a2,t2
9d006d7c:	012c1023 	subu	v0,t1,t4
9d006d80:	00c4302b 	sltu	a2,a2,a0
9d006d84:	00461023 	subu	v0,v0,a2
9d006d88:	0b4019df 	j	9d00677c <__subdf3+0x104>
9d006d8c:	00e05821 	move	t3,a3
9d006d90:	00001021 	move	v0,zero
9d006d94:	0b401adc 	j	9d006b70 <__subdf3+0x4f8>
9d006d98:	0004202b 	sltu	a0,zero,a0
9d006d9c:	240407ff 	li	a0,2047
9d006da0:	1064002c 	beq	v1,a0,9d006e54 <__subdf3+0x7dc>
9d006da4:	30ce000f 	andi	t6,a2,0xf
9d006da8:	3c040080 	lui	a0,0x80
9d006dac:	01846025 	or	t4,t4,a0
9d006db0:	28440039 	slti	a0,v0,57
9d006db4:	10800042 	beqz	a0,9d006ec0 <__subdf3+0x848>
9d006db8:	018a2025 	or	a0,t4,t2
9d006dbc:	28440020 	slti	a0,v0,32
9d006dc0:	50800063 	beqzl	a0,9d006f50 <__subdf3+0x8d8>
9d006dc4:	24040020 	li	a0,32
9d006dc8:	24050020 	li	a1,32
9d006dcc:	00a22823 	subu	a1,a1,v0
9d006dd0:	00ac3804 	sllv	a3,t4,a1
9d006dd4:	004a2006 	srlv	a0,t2,v0
9d006dd8:	00aa2804 	sllv	a1,t2,a1
9d006ddc:	00e42025 	or	a0,a3,a0
9d006de0:	0005282b 	sltu	a1,zero,a1
9d006de4:	00852025 	or	a0,a0,a1
9d006de8:	004c1006 	srlv	v0,t4,v0
9d006dec:	00862021 	addu	a0,a0,a2
9d006df0:	00491021 	addu	v0,v0,t1
9d006df4:	0086302b 	sltu	a2,a0,a2
9d006df8:	0b401a39 	j	9d0068e4 <__subdf3+0x26c>
9d006dfc:	00461021 	addu	v0,v0,a2
9d006e00:	10400019 	beqz	v0,9d006e68 <__subdf3+0x7f0>
9d006e04:	314e000f 	andi	t6,t2,0xf
9d006e08:	01462023 	subu	a0,t2,a2
9d006e0c:	01891823 	subu	v1,t4,t1
9d006e10:	0144102b 	sltu	v0,t2,a0
9d006e14:	00621023 	subu	v0,v1,v0
9d006e18:	7c4305c0 	ext	v1,v0,0x17,0x1
9d006e1c:	50600048 	beqzl	v1,9d006f40 <__subdf3+0x8c8>
9d006e20:	00441825 	or	v1,v0,a0
9d006e24:	00ca2023 	subu	a0,a2,t2
9d006e28:	012c1023 	subu	v0,t1,t4
9d006e2c:	00c4302b 	sltu	a2,a2,a0
9d006e30:	00461023 	subu	v0,v0,a2
9d006e34:	308e000f 	andi	t6,a0,0xf
9d006e38:	00e05821 	move	t3,a3
9d006e3c:	24080001 	li	t0,1
9d006e40:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d006e44:	00001821 	move	v1,zero
9d006e48:	5440ffb6 	bnezl	v0,9d006d24 <__subdf3+0x6ac>
9d006e4c:	01263025 	or	a2,t1,a2
9d006e50:	30ce000f 	andi	t6,a2,0xf
9d006e54:	01201021 	move	v0,t1
9d006e58:	00c02021 	move	a0,a2
9d006e5c:	24080800 	li	t0,2048
9d006e60:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d006e64:	240307ff 	li	v1,2047
9d006e68:	01801021 	move	v0,t4
9d006e6c:	01402021 	move	a0,t2
9d006e70:	24080001 	li	t0,1
9d006e74:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d006e78:	00001821 	move	v1,zero
9d006e7c:	010c2806 	srlv	a1,t4,t0
9d006e80:	11040003 	beq	t0,a0,9d006e90 <__subdf3+0x818>
9d006e84:	00001021 	move	v0,zero
9d006e88:	00084023 	negu	t0,t0
9d006e8c:	010c1004 	sllv	v0,t4,t0
9d006e90:	004a2025 	or	a0,v0,t2
9d006e94:	0004202b 	sltu	a0,zero,a0
9d006e98:	00852025 	or	a0,a0,a1
9d006e9c:	0b401adc 	j	9d006b70 <__subdf3+0x4f8>
9d006ea0:	00001021 	move	v0,zero
9d006ea4:	54400022 	bnezl	v0,9d006f30 <__subdf3+0x8b8>
9d006ea8:	240407ff 	li	a0,2047
9d006eac:	00ca2021 	addu	a0,a2,t2
9d006eb0:	012c1021 	addu	v0,t1,t4
9d006eb4:	0086302b 	sltu	a2,a0,a2
9d006eb8:	0b401a39 	j	9d0068e4 <__subdf3+0x26c>
9d006ebc:	00461021 	addu	v0,v0,a2
9d006ec0:	00001021 	move	v0,zero
9d006ec4:	0b401b7b 	j	9d006dec <__subdf3+0x774>
9d006ec8:	0004202b 	sltu	a0,zero,a0
9d006ecc:	1040ffe6 	beqz	v0,9d006e68 <__subdf3+0x7f0>
9d006ed0:	314e000f 	andi	t6,t2,0xf
9d006ed4:	00ca2021 	addu	a0,a2,t2
9d006ed8:	012c1021 	addu	v0,t1,t4
9d006edc:	008a502b 	sltu	t2,a0,t2
9d006ee0:	004a1021 	addu	v0,v0,t2
9d006ee4:	7c4305c0 	ext	v1,v0,0x17,0x1
9d006ee8:	10600023 	beqz	v1,9d006f78 <__subdf3+0x900>
9d006eec:	308e000f 	andi	t6,a0,0xf
9d006ef0:	3c03ff7f 	lui	v1,0xff7f
9d006ef4:	3463ffff 	ori	v1,v1,0xffff
9d006ef8:	00431024 	and	v0,v0,v1
9d006efc:	24080002 	li	t0,2
9d006f00:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d006f04:	24030001 	li	v1,1
9d006f08:	240e0008 	li	t6,8
9d006f0c:	2404fff8 	li	a0,-8
9d006f10:	3442ffff 	ori	v0,v0,0xffff
9d006f14:	00005821 	move	t3,zero
9d006f18:	24080800 	li	t0,2048
9d006f1c:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d006f20:	240307ff 	li	v1,2047
9d006f24:	00001021 	move	v0,zero
9d006f28:	0b401a1e 	j	9d006878 <__subdf3+0x200>
9d006f2c:	00003021 	move	a2,zero
9d006f30:	5464ffa0 	bnel	v1,a0,9d006db4 <__subdf3+0x73c>
9d006f34:	28440039 	slti	a0,v0,57
9d006f38:	0b401b95 	j	9d006e54 <__subdf3+0x7dc>
9d006f3c:	30ce000f 	andi	t6,a2,0xf
9d006f40:	5060ff14 	beqzl	v1,9d006b94 <__subdf3+0x51c>
9d006f44:	00005821 	move	t3,zero
9d006f48:	0b401a01 	j	9d006804 <__subdf3+0x18c>
9d006f4c:	308e000f 	andi	t6,a0,0xf
9d006f50:	004c3806 	srlv	a3,t4,v0
9d006f54:	10440003 	beq	v0,a0,9d006f64 <__subdf3+0x8ec>
9d006f58:	00002821 	move	a1,zero
9d006f5c:	00021023 	negu	v0,v0
9d006f60:	004c2804 	sllv	a1,t4,v0
9d006f64:	00aa2025 	or	a0,a1,t2
9d006f68:	0004202b 	sltu	a0,zero,a0
9d006f6c:	00872025 	or	a0,a0,a3
9d006f70:	0b401b7b 	j	9d006dec <__subdf3+0x774>
9d006f74:	00001021 	move	v0,zero
9d006f78:	0b401a03 	j	9d00680c <__subdf3+0x194>
9d006f7c:	24080001 	li	t0,1

9d006f80 <__fixdfsi>:
9d006f80:	7ca35500 	ext	v1,a1,0x14,0xb
9d006f84:	286603ff 	slti	a2,v1,1023
9d006f88:	7ca79800 	ext	a3,a1,0x0,0x14
9d006f8c:	00001021 	move	v0,zero
9d006f90:	14c0000f 	bnez	a2,9d006fd0 <__fixdfsi+0x50>
9d006f94:	00052fc2 	srl	a1,a1,0x1f
9d006f98:	2866041e 	slti	a2,v1,1054
9d006f9c:	10c0000e 	beqz	a2,9d006fd8 <__fixdfsi+0x58>
9d006fa0:	24060433 	li	a2,1075
9d006fa4:	00c33023 	subu	a2,a2,v1
9d006fa8:	3c020010 	lui	v0,0x10
9d006fac:	28c80020 	slti	t0,a2,32
9d006fb0:	1100000d 	beqz	t0,9d006fe8 <__fixdfsi+0x68>
9d006fb4:	00e23825 	or	a3,a3,v0
9d006fb8:	2463fbed 	addiu	v1,v1,-1043
9d006fbc:	00c42006 	srlv	a0,a0,a2
9d006fc0:	00673804 	sllv	a3,a3,v1
9d006fc4:	00872025 	or	a0,a0,a3
9d006fc8:	00041023 	negu	v0,a0
9d006fcc:	0085100a 	movz	v0,a0,a1
9d006fd0:	03e00008 	jr	ra
9d006fd4:	00000000 	nop
9d006fd8:	3c027fff 	lui	v0,0x7fff
9d006fdc:	3442ffff 	ori	v0,v0,0xffff
9d006fe0:	03e00008 	jr	ra
9d006fe4:	00a21021 	addu	v0,a1,v0
9d006fe8:	24040413 	li	a0,1043
9d006fec:	00832023 	subu	a0,a0,v1
9d006ff0:	00872006 	srlv	a0,a3,a0
9d006ff4:	00041023 	negu	v0,a0
9d006ff8:	03e00008 	jr	ra
9d006ffc:	0085100a 	movz	v0,a0,a1

9d007000 <__floatsidf>:
9d007000:	10800021 	beqz	a0,9d007088 <__floatsidf+0x88>
9d007004:	00042fc2 	srl	a1,a0,0x1f
9d007008:	00041023 	negu	v0,a0
9d00700c:	0045200b 	movn	a0,v0,a1
9d007010:	70821020 	clz	v0,a0
9d007014:	2403041e 	li	v1,1054
9d007018:	00621823 	subu	v1,v1,v0
9d00701c:	24060433 	li	a2,1075
9d007020:	00c33023 	subu	a2,a2,v1
9d007024:	28c20020 	slti	v0,a2,32
9d007028:	5440000d 	bnezl	v0,9d007060 <__floatsidf+0x60>
9d00702c:	2462fbed 	addiu	v0,v1,-1043
9d007030:	24020413 	li	v0,1043
9d007034:	00431023 	subu	v0,v0,v1
9d007038:	00441004 	sllv	v0,a0,v0
9d00703c:	306807ff 	andi	t0,v1,0x7ff
9d007040:	7c429800 	ext	v0,v0,0x0,0x14
9d007044:	00001821 	move	v1,zero
9d007048:	7c439804 	ins	v1,v0,0x0,0x14
9d00704c:	00002021 	move	a0,zero
9d007050:	7d03f504 	ins	v1,t0,0x14,0xb
9d007054:	7ca3ffc4 	ins	v1,a1,0x1f,0x1
9d007058:	03e00008 	jr	ra
9d00705c:	00801021 	move	v0,a0
9d007060:	00441006 	srlv	v0,a0,v0
9d007064:	306807ff 	andi	t0,v1,0x7ff
9d007068:	7c429800 	ext	v0,v0,0x0,0x14
9d00706c:	00001821 	move	v1,zero
9d007070:	7c439804 	ins	v1,v0,0x0,0x14
9d007074:	00c42004 	sllv	a0,a0,a2
9d007078:	7d03f504 	ins	v1,t0,0x14,0xb
9d00707c:	7ca3ffc4 	ins	v1,a1,0x1f,0x1
9d007080:	03e00008 	jr	ra
9d007084:	00801021 	move	v0,a0
9d007088:	00001021 	move	v0,zero
9d00708c:	00001821 	move	v1,zero
9d007090:	00004021 	move	t0,zero
9d007094:	7c439804 	ins	v1,v0,0x0,0x14
9d007098:	00002821 	move	a1,zero
9d00709c:	00002021 	move	a0,zero
9d0070a0:	7d03f504 	ins	v1,t0,0x14,0xb
9d0070a4:	7ca3ffc4 	ins	v1,a1,0x1f,0x1
9d0070a8:	03e00008 	jr	ra
9d0070ac:	00801021 	move	v0,a0
9d0070b0 <__floatunsidf>:
9d0070b0:	10800021 	beqz	a0,9d007138 <__floatunsidf+0x88>
9d0070b4:	00003021 	move	a2,zero
9d0070b8:	2403041e 	li	v1,1054
9d0070bc:	70821020 	clz	v0,a0
9d0070c0:	00621023 	subu	v0,v1,v0
9d0070c4:	24030433 	li	v1,1075
9d0070c8:	00621823 	subu	v1,v1,v0
9d0070cc:	28650020 	slti	a1,v1,32
9d0070d0:	14a0000e 	bnez	a1,9d00710c <__floatunsidf+0x5c>
9d0070d4:	2446fbed 	addiu	a2,v0,-1043
9d0070d8:	24060413 	li	a2,1043
9d0070dc:	00c23023 	subu	a2,a2,v0
9d0070e0:	00c43004 	sllv	a2,a0,a2
9d0070e4:	7cc69800 	ext	a2,a2,0x0,0x14
9d0070e8:	00002821 	move	a1,zero
9d0070ec:	304707ff 	andi	a3,v0,0x7ff
9d0070f0:	7cc59804 	ins	a1,a2,0x0,0x14
9d0070f4:	7ce5f504 	ins	a1,a3,0x14,0xb
9d0070f8:	00002021 	move	a0,zero
9d0070fc:	7ca5f000 	ext	a1,a1,0x0,0x1f
9d007100:	00801021 	move	v0,a0
9d007104:	03e00008 	jr	ra
9d007108:	00a01821 	move	v1,a1
9d00710c:	00c43006 	srlv	a2,a0,a2
9d007110:	7cc69800 	ext	a2,a2,0x0,0x14
9d007114:	00002821 	move	a1,zero
9d007118:	304707ff 	andi	a3,v0,0x7ff
9d00711c:	7cc59804 	ins	a1,a2,0x0,0x14
9d007120:	7ce5f504 	ins	a1,a3,0x14,0xb
9d007124:	00642004 	sllv	a0,a0,v1
9d007128:	7ca5f000 	ext	a1,a1,0x0,0x1f
9d00712c:	00801021 	move	v0,a0
9d007130:	03e00008 	jr	ra
9d007134:	00a01821 	move	v1,a1
9d007138:	00002821 	move	a1,zero
9d00713c:	00003821 	move	a3,zero
9d007140:	7cc59804 	ins	a1,a2,0x0,0x14
9d007144:	7ce5f504 	ins	a1,a3,0x14,0xb
9d007148:	00002021 	move	a0,zero
9d00714c:	7ca5f000 	ext	a1,a1,0x0,0x1f
9d007150:	00801021 	move	v0,a0
9d007154:	03e00008 	jr	ra
9d007158:	00a01821 	move	v1,a1
9d00715c <malloc>:
9d00715c:	3c02a000 	lui	v0,0xa000
9d007160:	00802821 	move	a1,a0
9d007164:	8c440958 	lw	a0,2392(v0)
9d007168:	27bdffe8 	addiu	sp,sp,-24
9d00716c:	afbf0014 	sw	ra,20(sp)
9d007170:	0f401c61 	jal	9d007184 <_malloc_r>
9d007174:	00000000 	nop
9d007178:	8fbf0014 	lw	ra,20(sp)
9d00717c:	03e00008 	jr	ra
9d007180:	27bd0018 	addiu	sp,sp,24

9d007184 <_malloc_r>:
9d007184:	24a2000b 	addiu	v0,a1,11
9d007188:	27bdffc8 	addiu	sp,sp,-56
9d00718c:	2c430017 	sltiu	v1,v0,23
9d007190:	afb3001c 	sw	s3,28(sp)
9d007194:	afb00010 	sw	s0,16(sp)
9d007198:	afbf0034 	sw	ra,52(sp)
9d00719c:	afbe0030 	sw	s8,48(sp)
9d0071a0:	afb7002c 	sw	s7,44(sp)
9d0071a4:	afb60028 	sw	s6,40(sp)
9d0071a8:	afb50024 	sw	s5,36(sp)
9d0071ac:	afb40020 	sw	s4,32(sp)
9d0071b0:	afb20018 	sw	s2,24(sp)
9d0071b4:	afb10014 	sw	s1,20(sp)
9d0071b8:	00809821 	move	s3,a0
9d0071bc:	14600005 	bnez	v1,9d0071d4 <_malloc_r+0x50>
9d0071c0:	24100010 	li	s0,16
9d0071c4:	2410fff8 	li	s0,-8
9d0071c8:	00508024 	and	s0,v0,s0
9d0071cc:	06000004 	bltz	s0,9d0071e0 <_malloc_r+0x5c>
9d0071d0:	2402000c 	li	v0,12
9d0071d4:	0205282b 	sltu	a1,s0,a1
9d0071d8:	10a00003 	beqz	a1,9d0071e8 <_malloc_r+0x64>
9d0071dc:	2402000c 	li	v0,12
9d0071e0:	0b401dea 	j	9d0077a8 <_malloc_r+0x624>
9d0071e4:	ae620000 	sw	v0,0(s3)
9d0071e8:	0f401e26 	jal	9d007898 <__malloc_lock>
9d0071ec:	02602021 	move	a0,s3
9d0071f0:	2e0201f8 	sltiu	v0,s0,504
9d0071f4:	1040000e 	beqz	v0,9d007230 <_malloc_r+0xac>
9d0071f8:	3c11a000 	lui	s1,0xa000
9d0071fc:	262200f0 	addiu	v0,s1,240
9d007200:	00501021 	addu	v0,v0,s0
9d007204:	8c52000c 	lw	s2,12(v0)
9d007208:	16420005 	bne	s2,v0,9d007220 <_malloc_r+0x9c>
9d00720c:	001020c2 	srl	a0,s0,0x3
9d007210:	26420008 	addiu	v0,s2,8
9d007214:	8e520014 	lw	s2,20(s2)
9d007218:	12420038 	beq	s2,v0,9d0072fc <_malloc_r+0x178>
9d00721c:	24840002 	addiu	a0,a0,2
9d007220:	8e420004 	lw	v0,4(s2)
9d007224:	2403fffc 	li	v1,-4
9d007228:	0b401cb7 	j	9d0072dc <_malloc_r+0x158>
9d00722c:	00621024 	and	v0,v1,v0
9d007230:	00102242 	srl	a0,s0,0x9
9d007234:	14800003 	bnez	a0,9d007244 <_malloc_r+0xc0>
9d007238:	2c820005 	sltiu	v0,a0,5
9d00723c:	0b401ca8 	j	9d0072a0 <_malloc_r+0x11c>
9d007240:	001020c2 	srl	a0,s0,0x3
9d007244:	10400004 	beqz	v0,9d007258 <_malloc_r+0xd4>
9d007248:	2c820015 	sltiu	v0,a0,21
9d00724c:	00102182 	srl	a0,s0,0x6
9d007250:	0b401ca8 	j	9d0072a0 <_malloc_r+0x11c>
9d007254:	24840038 	addiu	a0,a0,56
9d007258:	10400003 	beqz	v0,9d007268 <_malloc_r+0xe4>
9d00725c:	2c820055 	sltiu	v0,a0,85
9d007260:	0b401ca8 	j	9d0072a0 <_malloc_r+0x11c>
9d007264:	2484005b 	addiu	a0,a0,91
9d007268:	10400004 	beqz	v0,9d00727c <_malloc_r+0xf8>
9d00726c:	2c820155 	sltiu	v0,a0,341
9d007270:	00102302 	srl	a0,s0,0xc
9d007274:	0b401ca8 	j	9d0072a0 <_malloc_r+0x11c>
9d007278:	2484006e 	addiu	a0,a0,110
9d00727c:	10400004 	beqz	v0,9d007290 <_malloc_r+0x10c>
9d007280:	2c820555 	sltiu	v0,a0,1365
9d007284:	001023c2 	srl	a0,s0,0xf
9d007288:	0b401ca8 	j	9d0072a0 <_malloc_r+0x11c>
9d00728c:	24840077 	addiu	a0,a0,119
9d007290:	10400003 	beqz	v0,9d0072a0 <_malloc_r+0x11c>
9d007294:	2404007e 	li	a0,126
9d007298:	00102482 	srl	a0,s0,0x12
9d00729c:	2484007c 	addiu	a0,a0,124
9d0072a0:	000410c0 	sll	v0,a0,0x3
9d0072a4:	262300f0 	addiu	v1,s1,240
9d0072a8:	00621821 	addu	v1,v1,v0
9d0072ac:	8c72000c 	lw	s2,12(v1)
9d0072b0:	0b401cbc 	j	9d0072f0 <_malloc_r+0x16c>
9d0072b4:	2406fffc 	li	a2,-4
9d0072b8:	00c21024 	and	v0,a2,v0
9d0072bc:	00502823 	subu	a1,v0,s0
9d0072c0:	28a70010 	slti	a3,a1,16
9d0072c4:	14e00003 	bnez	a3,9d0072d4 <_malloc_r+0x150>
9d0072c8:	00000000 	nop
9d0072cc:	0b401cbe 	j	9d0072f8 <_malloc_r+0x174>
9d0072d0:	2484ffff 	addiu	a0,a0,-1
9d0072d4:	04a20006 	bltzl	a1,9d0072f0 <_malloc_r+0x16c>
9d0072d8:	8e52000c 	lw	s2,12(s2)
9d0072dc:	8e43000c 	lw	v1,12(s2)
9d0072e0:	8e440008 	lw	a0,8(s2)
9d0072e4:	ac83000c 	sw	v1,12(a0)
9d0072e8:	0b401cd0 	j	9d007340 <_malloc_r+0x1bc>
9d0072ec:	ac640008 	sw	a0,8(v1)
9d0072f0:	5643fff1 	bnel	s2,v1,9d0072b8 <_malloc_r+0x134>
9d0072f4:	8e420004 	lw	v0,4(s2)
9d0072f8:	24840001 	addiu	a0,a0,1
9d0072fc:	263100f0 	addiu	s1,s1,240
9d007300:	26230008 	addiu	v1,s1,8
9d007304:	8c720008 	lw	s2,8(v1)
9d007308:	12430051 	beq	s2,v1,9d007450 <_malloc_r+0x2cc>
9d00730c:	2405fffc 	li	a1,-4
9d007310:	8e420004 	lw	v0,4(s2)
9d007314:	00a21024 	and	v0,a1,v0
9d007318:	00502823 	subu	a1,v0,s0
9d00731c:	28a60010 	slti	a2,a1,16
9d007320:	54c00005 	bnezl	a2,9d007338 <_malloc_r+0x1b4>
9d007324:	ac63000c 	sw	v1,12(v1)
9d007328:	02501021 	addu	v0,s2,s0
9d00732c:	36100001 	ori	s0,s0,0x1
9d007330:	0b401d37 	j	9d0074dc <_malloc_r+0x358>
9d007334:	ae500004 	sw	s0,4(s2)
9d007338:	04a00006 	bltz	a1,9d007354 <_malloc_r+0x1d0>
9d00733c:	ac630008 	sw	v1,8(v1)
9d007340:	02421021 	addu	v0,s2,v0
9d007344:	8c430004 	lw	v1,4(v0)
9d007348:	34630001 	ori	v1,v1,0x1
9d00734c:	0b401df2 	j	9d0077c8 <_malloc_r+0x644>
9d007350:	ac430004 	sw	v1,4(v0)
9d007354:	2c450200 	sltiu	a1,v0,512
9d007358:	10a0000c 	beqz	a1,9d00738c <_malloc_r+0x208>
9d00735c:	00023242 	srl	a2,v0,0x9
9d007360:	000210c2 	srl	v0,v0,0x3
9d007364:	00022883 	sra	a1,v0,0x2
9d007368:	24060001 	li	a2,1
9d00736c:	00a62804 	sllv	a1,a2,a1
9d007370:	8e260004 	lw	a2,4(s1)
9d007374:	000210c0 	sll	v0,v0,0x3
9d007378:	02221021 	addu	v0,s1,v0
9d00737c:	00c52825 	or	a1,a2,a1
9d007380:	ae250004 	sw	a1,4(s1)
9d007384:	0b401d10 	j	9d007440 <_malloc_r+0x2bc>
9d007388:	8c450008 	lw	a1,8(v0)
9d00738c:	2cc50005 	sltiu	a1,a2,5
9d007390:	10a00004 	beqz	a1,9d0073a4 <_malloc_r+0x220>
9d007394:	2cc50015 	sltiu	a1,a2,21
9d007398:	00023182 	srl	a2,v0,0x6
9d00739c:	0b401cfb 	j	9d0073ec <_malloc_r+0x268>
9d0073a0:	24c60038 	addiu	a2,a2,56
9d0073a4:	10a00003 	beqz	a1,9d0073b4 <_malloc_r+0x230>
9d0073a8:	2cc50055 	sltiu	a1,a2,85
9d0073ac:	0b401cfb 	j	9d0073ec <_malloc_r+0x268>
9d0073b0:	24c6005b 	addiu	a2,a2,91
9d0073b4:	10a00004 	beqz	a1,9d0073c8 <_malloc_r+0x244>
9d0073b8:	2cc50155 	sltiu	a1,a2,341
9d0073bc:	00023302 	srl	a2,v0,0xc
9d0073c0:	0b401cfb 	j	9d0073ec <_malloc_r+0x268>
9d0073c4:	24c6006e 	addiu	a2,a2,110
9d0073c8:	10a00004 	beqz	a1,9d0073dc <_malloc_r+0x258>
9d0073cc:	2cc50555 	sltiu	a1,a2,1365
9d0073d0:	000233c2 	srl	a2,v0,0xf
9d0073d4:	0b401cfb 	j	9d0073ec <_malloc_r+0x268>
9d0073d8:	24c60077 	addiu	a2,a2,119
9d0073dc:	10a00003 	beqz	a1,9d0073ec <_malloc_r+0x268>
9d0073e0:	2406007e 	li	a2,126
9d0073e4:	00023482 	srl	a2,v0,0x12
9d0073e8:	24c6007c 	addiu	a2,a2,124
9d0073ec:	000638c0 	sll	a3,a2,0x3
9d0073f0:	02273821 	addu	a3,s1,a3
9d0073f4:	8ce50008 	lw	a1,8(a3)
9d0073f8:	14a7000b 	bne	a1,a3,9d007428 <_malloc_r+0x2a4>
9d0073fc:	2408fffc 	li	t0,-4
9d007400:	24020001 	li	v0,1
9d007404:	00063083 	sra	a2,a2,0x2
9d007408:	00c23004 	sllv	a2,v0,a2
9d00740c:	8e220004 	lw	v0,4(s1)
9d007410:	00463025 	or	a2,v0,a2
9d007414:	ae260004 	sw	a2,4(s1)
9d007418:	0b401d10 	j	9d007440 <_malloc_r+0x2bc>
9d00741c:	00a01021 	move	v0,a1
9d007420:	50a70007 	beql	a1,a3,9d007440 <_malloc_r+0x2bc>
9d007424:	8ca2000c 	lw	v0,12(a1)
9d007428:	8ca60004 	lw	a2,4(a1)
9d00742c:	01063024 	and	a2,t0,a2
9d007430:	0046302b 	sltu	a2,v0,a2
9d007434:	54c0fffa 	bnezl	a2,9d007420 <_malloc_r+0x29c>
9d007438:	8ca50008 	lw	a1,8(a1)
9d00743c:	8ca2000c 	lw	v0,12(a1)
9d007440:	ae42000c 	sw	v0,12(s2)
9d007444:	ae450008 	sw	a1,8(s2)
9d007448:	ac520008 	sw	s2,8(v0)
9d00744c:	acb2000c 	sw	s2,12(a1)
9d007450:	24050001 	li	a1,1
9d007454:	00041083 	sra	v0,a0,0x2
9d007458:	00451004 	sllv	v0,a1,v0
9d00745c:	8e250004 	lw	a1,4(s1)
9d007460:	00a2302b 	sltu	a2,a1,v0
9d007464:	54c00053 	bnezl	a2,9d0075b4 <_malloc_r+0x430>
9d007468:	8e340008 	lw	s4,8(s1)
9d00746c:	00453024 	and	a2,v0,a1
9d007470:	14c00008 	bnez	a2,9d007494 <_malloc_r+0x310>
9d007474:	240afffc 	li	t2,-4
9d007478:	2406fffc 	li	a2,-4
9d00747c:	00862024 	and	a0,a0,a2
9d007480:	00021040 	sll	v0,v0,0x1
9d007484:	00453024 	and	a2,v0,a1
9d007488:	10c0fffd 	beqz	a2,9d007480 <_malloc_r+0x2fc>
9d00748c:	24840004 	addiu	a0,a0,4
9d007490:	240afffc 	li	t2,-4
9d007494:	000448c0 	sll	t1,a0,0x3
9d007498:	02294821 	addu	t1,s1,t1
9d00749c:	01203821 	move	a3,t1
9d0074a0:	00803021 	move	a2,a0
9d0074a4:	0b401d4b 	j	9d00752c <_malloc_r+0x3a8>
9d0074a8:	8cf2000c 	lw	s2,12(a3)
9d0074ac:	01484024 	and	t0,t2,t0
9d0074b0:	01102823 	subu	a1,t0,s0
9d0074b4:	28ab0010 	slti	t3,a1,16
9d0074b8:	15600011 	bnez	t3,9d007500 <_malloc_r+0x37c>
9d0074bc:	00000000 	nop
9d0074c0:	8e44000c 	lw	a0,12(s2)
9d0074c4:	8e460008 	lw	a2,8(s2)
9d0074c8:	02501021 	addu	v0,s2,s0
9d0074cc:	36100001 	ori	s0,s0,0x1
9d0074d0:	ae500004 	sw	s0,4(s2)
9d0074d4:	acc4000c 	sw	a0,12(a2)
9d0074d8:	ac860008 	sw	a2,8(a0)
9d0074dc:	ac62000c 	sw	v0,12(v1)
9d0074e0:	ac620008 	sw	v0,8(v1)
9d0074e4:	ac43000c 	sw	v1,12(v0)
9d0074e8:	ac430008 	sw	v1,8(v0)
9d0074ec:	34a30001 	ori	v1,a1,0x1
9d0074f0:	ac430004 	sw	v1,4(v0)
9d0074f4:	00451021 	addu	v0,v0,a1
9d0074f8:	0b401df2 	j	9d0077c8 <_malloc_r+0x644>
9d0074fc:	ac450000 	sw	a1,0(v0)
9d007500:	04a2000a 	bltzl	a1,9d00752c <_malloc_r+0x3a8>
9d007504:	8e52000c 	lw	s2,12(s2)
9d007508:	02481021 	addu	v0,s2,t0
9d00750c:	8c430004 	lw	v1,4(v0)
9d007510:	34630001 	ori	v1,v1,0x1
9d007514:	ac430004 	sw	v1,4(v0)
9d007518:	8e42000c 	lw	v0,12(s2)
9d00751c:	8e430008 	lw	v1,8(s2)
9d007520:	ac62000c 	sw	v0,12(v1)
9d007524:	0b401df2 	j	9d0077c8 <_malloc_r+0x644>
9d007528:	ac430008 	sw	v1,8(v0)
9d00752c:	5647ffdf 	bnel	s2,a3,9d0074ac <_malloc_r+0x328>
9d007530:	8e480004 	lw	t0,4(s2)
9d007534:	24c60001 	addiu	a2,a2,1
9d007538:	30c50003 	andi	a1,a2,0x3
9d00753c:	14a0ffd9 	bnez	a1,9d0074a4 <_malloc_r+0x320>
9d007540:	24e70008 	addiu	a3,a3,8
9d007544:	01202821 	move	a1,t1
9d007548:	30870003 	andi	a3,a0,0x3
9d00754c:	14e00006 	bnez	a3,9d007568 <_malloc_r+0x3e4>
9d007550:	24a7fff8 	addiu	a3,a1,-8
9d007554:	8e250004 	lw	a1,4(s1)
9d007558:	00022027 	nor	a0,zero,v0
9d00755c:	00a42024 	and	a0,a1,a0
9d007560:	0b401d5d 	j	9d007574 <_malloc_r+0x3f0>
9d007564:	ae240004 	sw	a0,4(s1)
9d007568:	8ca50000 	lw	a1,0(a1)
9d00756c:	10a7fff6 	beq	a1,a3,9d007548 <_malloc_r+0x3c4>
9d007570:	2484ffff 	addiu	a0,a0,-1
9d007574:	8e250004 	lw	a1,4(s1)
9d007578:	00021040 	sll	v0,v0,0x1
9d00757c:	00a2202b 	sltu	a0,a1,v0
9d007580:	5480000c 	bnezl	a0,9d0075b4 <_malloc_r+0x430>
9d007584:	8e340008 	lw	s4,8(s1)
9d007588:	10400009 	beqz	v0,9d0075b0 <_malloc_r+0x42c>
9d00758c:	00c02021 	move	a0,a2
9d007590:	0b401d68 	j	9d0075a0 <_malloc_r+0x41c>
9d007594:	00453024 	and	a2,v0,a1
9d007598:	00021040 	sll	v0,v0,0x1
9d00759c:	00453024 	and	a2,v0,a1
9d0075a0:	14c0ffbd 	bnez	a2,9d007498 <_malloc_r+0x314>
9d0075a4:	000448c0 	sll	t1,a0,0x3
9d0075a8:	0b401d66 	j	9d007598 <_malloc_r+0x414>
9d0075ac:	24840004 	addiu	a0,a0,4
9d0075b0:	8e340008 	lw	s4,8(s1)
9d0075b4:	2415fffc 	li	s5,-4
9d0075b8:	8e820004 	lw	v0,4(s4)
9d0075bc:	02a2a824 	and	s5,s5,v0
9d0075c0:	02b0102b 	sltu	v0,s5,s0
9d0075c4:	14400004 	bnez	v0,9d0075d8 <_malloc_r+0x454>
9d0075c8:	02b01023 	subu	v0,s5,s0
9d0075cc:	28430010 	slti	v1,v0,16
9d0075d0:	50600077 	beqzl	v1,9d0077b0 <_malloc_r+0x62c>
9d0075d4:	8e320008 	lw	s2,8(s1)
9d0075d8:	3c02a000 	lui	v0,0xa000
9d0075dc:	8c5609c4 	lw	s6,2500(v0)
9d0075e0:	3c1ea000 	lui	s8,0xa000
9d0075e4:	8fc30954 	lw	v1,2388(s8)
9d0075e8:	26d60010 	addiu	s6,s6,16
9d0075ec:	2402ffff 	li	v0,-1
9d0075f0:	10620004 	beq	v1,v0,9d007604 <_malloc_r+0x480>
9d0075f4:	02d0b021 	addu	s6,s6,s0
9d0075f8:	26d6007f 	addiu	s6,s6,127
9d0075fc:	2402ff80 	li	v0,-128
9d007600:	02c2b024 	and	s6,s6,v0
9d007604:	02602021 	move	a0,s3
9d007608:	0f401f7e 	jal	9d007df8 <_sbrk_r>
9d00760c:	02c02821 	move	a1,s6
9d007610:	00409021 	move	s2,v0
9d007614:	2402ffff 	li	v0,-1
9d007618:	12420056 	beq	s2,v0,9d007774 <_malloc_r+0x5f0>
9d00761c:	02951021 	addu	v0,s4,s5
9d007620:	0242182b 	sltu	v1,s2,v0
9d007624:	10600004 	beqz	v1,9d007638 <_malloc_r+0x4b4>
9d007628:	3c17a000 	lui	s7,0xa000
9d00762c:	56910052 	bnel	s4,s1,9d007778 <_malloc_r+0x5f4>
9d007630:	8e220008 	lw	v0,8(s1)
9d007634:	3c17a000 	lui	s7,0xa000
9d007638:	8ee31510 	lw	v1,5392(s7)
9d00763c:	02c31821 	addu	v1,s6,v1
9d007640:	16420009 	bne	s2,v0,9d007668 <_malloc_r+0x4e4>
9d007644:	aee31510 	sw	v1,5392(s7)
9d007648:	3244007f 	andi	a0,s2,0x7f
9d00764c:	54800007 	bnezl	a0,9d00766c <_malloc_r+0x4e8>
9d007650:	8fc50954 	lw	a1,2388(s8)
9d007654:	8e220008 	lw	v0,8(s1)
9d007658:	02d5a821 	addu	s5,s6,s5
9d00765c:	36b50001 	ori	s5,s5,0x1
9d007660:	0b401dd2 	j	9d007748 <_malloc_r+0x5c4>
9d007664:	ac550004 	sw	s5,4(v0)
9d007668:	8fc50954 	lw	a1,2388(s8)
9d00766c:	2404ffff 	li	a0,-1
9d007670:	14a40004 	bne	a1,a0,9d007684 <_malloc_r+0x500>
9d007674:	02431821 	addu	v1,s2,v1
9d007678:	3c02a000 	lui	v0,0xa000
9d00767c:	0b401da3 	j	9d00768c <_malloc_r+0x508>
9d007680:	ac520954 	sw	s2,2388(v0)
9d007684:	00621023 	subu	v0,v1,v0
9d007688:	aee21510 	sw	v0,5392(s7)
9d00768c:	32430007 	andi	v1,s2,0x7
9d007690:	10600004 	beqz	v1,9d0076a4 <_malloc_r+0x520>
9d007694:	00001021 	move	v0,zero
9d007698:	24020008 	li	v0,8
9d00769c:	00431023 	subu	v0,v0,v1
9d0076a0:	02429021 	addu	s2,s2,v0
9d0076a4:	0256b021 	addu	s6,s2,s6
9d0076a8:	24420080 	addiu	v0,v0,128
9d0076ac:	32d6007f 	andi	s6,s6,0x7f
9d0076b0:	0056b023 	subu	s6,v0,s6
9d0076b4:	02602021 	move	a0,s3
9d0076b8:	0f401f7e 	jal	9d007df8 <_sbrk_r>
9d0076bc:	02c02821 	move	a1,s6
9d0076c0:	2403ffff 	li	v1,-1
9d0076c4:	14430003 	bne	v0,v1,9d0076d4 <_malloc_r+0x550>
9d0076c8:	8ee31510 	lw	v1,5392(s7)
9d0076cc:	02401021 	move	v0,s2
9d0076d0:	0000b021 	move	s6,zero
9d0076d4:	00521023 	subu	v0,v0,s2
9d0076d8:	ae320008 	sw	s2,8(s1)
9d0076dc:	02c31821 	addu	v1,s6,v1
9d0076e0:	0056b021 	addu	s6,v0,s6
9d0076e4:	36d60001 	ori	s6,s6,0x1
9d0076e8:	aee31510 	sw	v1,5392(s7)
9d0076ec:	12910016 	beq	s4,s1,9d007748 <_malloc_r+0x5c4>
9d0076f0:	ae560004 	sw	s6,4(s2)
9d0076f4:	2ea20010 	sltiu	v0,s5,16
9d0076f8:	10400004 	beqz	v0,9d00770c <_malloc_r+0x588>
9d0076fc:	2402fff8 	li	v0,-8
9d007700:	24020001 	li	v0,1
9d007704:	0b401ddd 	j	9d007774 <_malloc_r+0x5f0>
9d007708:	ae420004 	sw	v0,4(s2)
9d00770c:	26b5fff4 	addiu	s5,s5,-12
9d007710:	02a2a824 	and	s5,s5,v0
9d007714:	8e820004 	lw	v0,4(s4)
9d007718:	24030005 	li	v1,5
9d00771c:	30420001 	andi	v0,v0,0x1
9d007720:	02a21025 	or	v0,s5,v0
9d007724:	ae820004 	sw	v0,4(s4)
9d007728:	02951021 	addu	v0,s4,s5
9d00772c:	2eb50010 	sltiu	s5,s5,16
9d007730:	ac430004 	sw	v1,4(v0)
9d007734:	16a00004 	bnez	s5,9d007748 <_malloc_r+0x5c4>
9d007738:	ac430008 	sw	v1,8(v0)
9d00773c:	02602021 	move	a0,s3
9d007740:	0f402b81 	jal	9d00ae04 <_free_r>
9d007744:	26850008 	addiu	a1,s4,8
9d007748:	3c03a000 	lui	v1,0xa000
9d00774c:	8ee21510 	lw	v0,5392(s7)
9d007750:	8c6409c8 	lw	a0,2504(v1)
9d007754:	0082202b 	sltu	a0,a0,v0
9d007758:	54800001 	bnezl	a0,9d007760 <_malloc_r+0x5dc>
9d00775c:	ac6209c8 	sw	v0,2504(v1)
9d007760:	3c03a000 	lui	v1,0xa000
9d007764:	8c6409cc 	lw	a0,2508(v1)
9d007768:	0082202b 	sltu	a0,a0,v0
9d00776c:	54800001 	bnezl	a0,9d007774 <_malloc_r+0x5f0>
9d007770:	ac6209cc 	sw	v0,2508(v1)
9d007774:	8e220008 	lw	v0,8(s1)
9d007778:	2403fffc 	li	v1,-4
9d00777c:	8c420004 	lw	v0,4(v0)
9d007780:	00621024 	and	v0,v1,v0
9d007784:	0050182b 	sltu	v1,v0,s0
9d007788:	14600005 	bnez	v1,9d0077a0 <_malloc_r+0x61c>
9d00778c:	00000000 	nop
9d007790:	00501023 	subu	v0,v0,s0
9d007794:	28430010 	slti	v1,v0,16
9d007798:	50600005 	beqzl	v1,9d0077b0 <_malloc_r+0x62c>
9d00779c:	8e320008 	lw	s2,8(s1)
9d0077a0:	0f401e28 	jal	9d0078a0 <__malloc_unlock>
9d0077a4:	02602021 	move	a0,s3
9d0077a8:	0b401df5 	j	9d0077d4 <_malloc_r+0x650>
9d0077ac:	00001021 	move	v0,zero
9d0077b0:	36030001 	ori	v1,s0,0x1
9d0077b4:	34420001 	ori	v0,v0,0x1
9d0077b8:	02508021 	addu	s0,s2,s0
9d0077bc:	ae430004 	sw	v1,4(s2)
9d0077c0:	ae300008 	sw	s0,8(s1)
9d0077c4:	ae020004 	sw	v0,4(s0)
9d0077c8:	0f401e28 	jal	9d0078a0 <__malloc_unlock>
9d0077cc:	02602021 	move	a0,s3
9d0077d0:	26420008 	addiu	v0,s2,8
9d0077d4:	8fbf0034 	lw	ra,52(sp)
9d0077d8:	8fbe0030 	lw	s8,48(sp)
9d0077dc:	8fb7002c 	lw	s7,44(sp)
9d0077e0:	8fb60028 	lw	s6,40(sp)
9d0077e4:	8fb50024 	lw	s5,36(sp)
9d0077e8:	8fb40020 	lw	s4,32(sp)
9d0077ec:	8fb3001c 	lw	s3,28(sp)
9d0077f0:	8fb20018 	lw	s2,24(sp)
9d0077f4:	8fb10014 	lw	s1,20(sp)
9d0077f8:	8fb00010 	lw	s0,16(sp)
9d0077fc:	03e00008 	jr	ra
9d007800:	27bd0038 	addiu	sp,sp,56

9d007804 <memcpy>:
9d007804:	00801021 	move	v0,a0
9d007808:	0b401e08 	j	9d007820 <memcpy+0x1c>
9d00780c:	00801821 	move	v1,a0
9d007810:	24c6ffff 	addiu	a2,a2,-1
9d007814:	24a50001 	addiu	a1,a1,1
9d007818:	a0640000 	sb	a0,0(v1)
9d00781c:	24630001 	addiu	v1,v1,1
9d007820:	54c0fffb 	bnezl	a2,9d007810 <memcpy+0xc>
9d007824:	90a40000 	lbu	a0,0(a1)
9d007828:	03e00008 	jr	ra
9d00782c:	00000000 	nop

9d007830 <memmove>:
9d007830:	00801021 	move	v0,a0
9d007834:	00801821 	move	v1,a0
9d007838:	00a4202b 	sltu	a0,a1,a0
9d00783c:	10800012 	beqz	a0,9d007888 <memmove+0x58>
9d007840:	00a62021 	addu	a0,a1,a2
9d007844:	0044402b 	sltu	t0,v0,a0
9d007848:	15000007 	bnez	t0,9d007868 <memmove+0x38>
9d00784c:	00463821 	addu	a3,v0,a2
9d007850:	0b401e22 	j	9d007888 <memmove+0x58>
9d007854:	00000000 	nop
9d007858:	90830000 	lbu	v1,0(a0)
9d00785c:	24e7ffff 	addiu	a3,a3,-1
9d007860:	24c6ffff 	addiu	a2,a2,-1
9d007864:	a0e30000 	sb	v1,0(a3)
9d007868:	14c0fffb 	bnez	a2,9d007858 <memmove+0x28>
9d00786c:	2484ffff 	addiu	a0,a0,-1
9d007870:	03e00008 	jr	ra
9d007874:	00000000 	nop
9d007878:	24c6ffff 	addiu	a2,a2,-1
9d00787c:	24a50001 	addiu	a1,a1,1
9d007880:	a0640000 	sb	a0,0(v1)
9d007884:	24630001 	addiu	v1,v1,1
9d007888:	54c0fffb 	bnezl	a2,9d007878 <memmove+0x48>
9d00788c:	90a40000 	lbu	a0,0(a1)
9d007890:	03e00008 	jr	ra
9d007894:	00000000 	nop

9d007898 <__malloc_lock>:
9d007898:	03e00008 	jr	ra
9d00789c:	00000000 	nop

9d0078a0 <__malloc_unlock>:
9d0078a0:	03e00008 	jr	ra
9d0078a4:	00000000 	nop

9d0078a8 <rand>:
9d0078a8:	3c02a000 	lui	v0,0xa000
9d0078ac:	8c430958 	lw	v1,2392(v0)
9d0078b0:	3c025851 	lui	v0,0x5851
9d0078b4:	3442f42d 	ori	v0,v0,0xf42d
9d0078b8:	8c6500a8 	lw	a1,168(v1)
9d0078bc:	8c6600ac 	lw	a2,172(v1)
9d0078c0:	3c044c95 	lui	a0,0x4c95
9d0078c4:	00a20018 	mult	a1,v0
9d0078c8:	24847f2d 	addiu	a0,a0,32557
9d0078cc:	70c40000 	madd	a2,a0
9d0078d0:	00001012 	mflo	v0
9d0078d4:	00a40019 	multu	a1,a0
9d0078d8:	00003012 	mflo	a2
9d0078dc:	24c40001 	addiu	a0,a2,1
9d0078e0:	0086282b 	sltu	a1,a0,a2
9d0078e4:	00003810 	mfhi	a3
9d0078e8:	ac6400a8 	sw	a0,168(v1)
9d0078ec:	00471021 	addu	v0,v0,a3
9d0078f0:	00a21021 	addu	v0,a1,v0
9d0078f4:	ac6200ac 	sw	v0,172(v1)
9d0078f8:	03e00008 	jr	ra
9d0078fc:	7c42f000 	ext	v0,v0,0x0,0x1f

9d007900 <_realloc_r>:
9d007900:	27bdffc0 	addiu	sp,sp,-64
9d007904:	afb20020 	sw	s2,32(sp)
9d007908:	00a09021 	move	s2,a1
9d00790c:	afb00018 	sw	s0,24(sp)
9d007910:	afbf003c 	sw	ra,60(sp)
9d007914:	afbe0038 	sw	s8,56(sp)
9d007918:	afb70034 	sw	s7,52(sp)
9d00791c:	afb60030 	sw	s6,48(sp)
9d007920:	afb5002c 	sw	s5,44(sp)
9d007924:	afb40028 	sw	s4,40(sp)
9d007928:	afb30024 	sw	s3,36(sp)
9d00792c:	afb1001c 	sw	s1,28(sp)
9d007930:	00808021 	move	s0,a0
9d007934:	16400005 	bnez	s2,9d00794c <_realloc_r+0x4c>
9d007938:	00c02821 	move	a1,a2
9d00793c:	0f401c61 	jal	9d007184 <_malloc_r>
9d007940:	00000000 	nop
9d007944:	0b401f71 	j	9d007dc4 <_realloc_r+0x4c4>
9d007948:	00409821 	move	s3,v0
9d00794c:	0f401e26 	jal	9d007898 <__malloc_lock>
9d007950:	afa60010 	sw	a2,16(sp)
9d007954:	8fa50010 	lw	a1,16(sp)
9d007958:	2657fff8 	addiu	s7,s2,-8
9d00795c:	8ee20004 	lw	v0,4(s7)
9d007960:	24a3000b 	addiu	v1,a1,11
9d007964:	2c640017 	sltiu	a0,v1,23
9d007968:	14800005 	bnez	a0,9d007980 <_realloc_r+0x80>
9d00796c:	24140010 	li	s4,16
9d007970:	2414fff8 	li	s4,-8
9d007974:	0074a024 	and	s4,v1,s4
9d007978:	06820005 	bltzl	s4,9d007990 <_realloc_r+0x90>
9d00797c:	2402000c 	li	v0,12
9d007980:	0285182b 	sltu	v1,s4,a1
9d007984:	10600005 	beqz	v1,9d00799c <_realloc_r+0x9c>
9d007988:	241efffc 	li	s8,-4
9d00798c:	2402000c 	li	v0,12
9d007990:	ae020000 	sw	v0,0(s0)
9d007994:	0b401f71 	j	9d007dc4 <_realloc_r+0x4c4>
9d007998:	00009821 	move	s3,zero
9d00799c:	005ef024 	and	s8,v0,s8
9d0079a0:	03d4182a 	slt	v1,s8,s4
9d0079a4:	106000e9 	beqz	v1,9d007d4c <_realloc_r+0x44c>
9d0079a8:	03c0a821 	move	s5,s8
9d0079ac:	3c16a000 	lui	s6,0xa000
9d0079b0:	26d600f0 	addiu	s6,s6,240
9d0079b4:	8ec60008 	lw	a2,8(s6)
9d0079b8:	02fe1821 	addu	v1,s7,s8
9d0079bc:	10660008 	beq	v1,a2,9d0079e0 <_realloc_r+0xe0>
9d0079c0:	2407fffe 	li	a3,-2
9d0079c4:	8c640004 	lw	a0,4(v1)
9d0079c8:	00e42024 	and	a0,a3,a0
9d0079cc:	00642021 	addu	a0,v1,a0
9d0079d0:	8c840004 	lw	a0,4(a0)
9d0079d4:	30840001 	andi	a0,a0,0x1
9d0079d8:	14800020 	bnez	a0,9d007a5c <_realloc_r+0x15c>
9d0079dc:	00002021 	move	a0,zero
9d0079e0:	8c640004 	lw	a0,4(v1)
9d0079e4:	2415fffc 	li	s5,-4
9d0079e8:	02a42024 	and	a0,s5,a0
9d0079ec:	14660013 	bne	v1,a2,9d007a3c <_realloc_r+0x13c>
9d0079f0:	009ea821 	addu	s5,a0,s8
9d0079f4:	26870010 	addiu	a3,s4,16
9d0079f8:	02a7382a 	slt	a3,s5,a3
9d0079fc:	14e00019 	bnez	a3,9d007a64 <_realloc_r+0x164>
9d007a00:	30420001 	andi	v0,v0,0x1
9d007a04:	02b4a823 	subu	s5,s5,s4
9d007a08:	02f41021 	addu	v0,s7,s4
9d007a0c:	36b50001 	ori	s5,s5,0x1
9d007a10:	ac550004 	sw	s5,4(v0)
9d007a14:	aec20008 	sw	v0,8(s6)
9d007a18:	8ee20004 	lw	v0,4(s7)
9d007a1c:	02002021 	move	a0,s0
9d007a20:	02409821 	move	s3,s2
9d007a24:	30420001 	andi	v0,v0,0x1
9d007a28:	0282a025 	or	s4,s4,v0
9d007a2c:	0f401e28 	jal	9d0078a0 <__malloc_unlock>
9d007a30:	aef40004 	sw	s4,4(s7)
9d007a34:	0b401f72 	j	9d007dc8 <_realloc_r+0x4c8>
9d007a38:	8fbf003c 	lw	ra,60(sp)
9d007a3c:	02b4382a 	slt	a3,s5,s4
9d007a40:	14e00008 	bnez	a3,9d007a64 <_realloc_r+0x164>
9d007a44:	30420001 	andi	v0,v0,0x1
9d007a48:	8c62000c 	lw	v0,12(v1)
9d007a4c:	8c630008 	lw	v1,8(v1)
9d007a50:	ac62000c 	sw	v0,12(v1)
9d007a54:	0b401f53 	j	9d007d4c <_realloc_r+0x44c>
9d007a58:	ac430008 	sw	v1,8(v0)
9d007a5c:	00001821 	move	v1,zero
9d007a60:	30420001 	andi	v0,v0,0x1
9d007a64:	1440007c 	bnez	v0,9d007c58 <_realloc_r+0x358>
9d007a68:	2407fffc 	li	a3,-4
9d007a6c:	8e51fff8 	lw	s1,-8(s2)
9d007a70:	02f18823 	subu	s1,s7,s1
9d007a74:	8e220004 	lw	v0,4(s1)
9d007a78:	10600047 	beqz	v1,9d007b98 <_realloc_r+0x298>
9d007a7c:	00e21024 	and	v0,a3,v0
9d007a80:	1466003c 	bne	v1,a2,9d007b74 <_realloc_r+0x274>
9d007a84:	005ea821 	addu	s5,v0,s8
9d007a88:	02a4a821 	addu	s5,s5,a0
9d007a8c:	26830010 	addiu	v1,s4,16
9d007a90:	02a3182a 	slt	v1,s5,v1
9d007a94:	54600041 	bnezl	v1,9d007b9c <_realloc_r+0x29c>
9d007a98:	005ea821 	addu	s5,v0,s8
9d007a9c:	8e22000c 	lw	v0,12(s1)
9d007aa0:	8e230008 	lw	v1,8(s1)
9d007aa4:	27c6fffc 	addiu	a2,s8,-4
9d007aa8:	ac62000c 	sw	v0,12(v1)
9d007aac:	ac430008 	sw	v1,8(v0)
9d007ab0:	2cc20025 	sltiu	v0,a2,37
9d007ab4:	10400022 	beqz	v0,9d007b40 <_realloc_r+0x240>
9d007ab8:	26330008 	addiu	s3,s1,8
9d007abc:	2cc40014 	sltiu	a0,a2,20
9d007ac0:	02401021 	move	v0,s2
9d007ac4:	14800017 	bnez	a0,9d007b24 <_realloc_r+0x224>
9d007ac8:	02601821 	move	v1,s3
9d007acc:	8e430000 	lw	v1,0(s2)
9d007ad0:	2cc4001c 	sltiu	a0,a2,28
9d007ad4:	26420008 	addiu	v0,s2,8
9d007ad8:	ae230008 	sw	v1,8(s1)
9d007adc:	8e430004 	lw	v1,4(s2)
9d007ae0:	ae23000c 	sw	v1,12(s1)
9d007ae4:	1480000f 	bnez	a0,9d007b24 <_realloc_r+0x224>
9d007ae8:	26230010 	addiu	v1,s1,16
9d007aec:	8e430008 	lw	v1,8(s2)
9d007af0:	24040024 	li	a0,36
9d007af4:	ae230010 	sw	v1,16(s1)
9d007af8:	8c430004 	lw	v1,4(v0)
9d007afc:	24420008 	addiu	v0,v0,8
9d007b00:	ae230014 	sw	v1,20(s1)
9d007b04:	14c40007 	bne	a2,a0,9d007b24 <_realloc_r+0x224>
9d007b08:	26230018 	addiu	v1,s1,24
9d007b0c:	8c430000 	lw	v1,0(v0)
9d007b10:	ae230018 	sw	v1,24(s1)
9d007b14:	8c430004 	lw	v1,4(v0)
9d007b18:	24420008 	addiu	v0,v0,8
9d007b1c:	ae23001c 	sw	v1,28(s1)
9d007b20:	26230020 	addiu	v1,s1,32
9d007b24:	8c440000 	lw	a0,0(v0)
9d007b28:	ac640000 	sw	a0,0(v1)
9d007b2c:	8c440004 	lw	a0,4(v0)
9d007b30:	ac640004 	sw	a0,4(v1)
9d007b34:	8c420008 	lw	v0,8(v0)
9d007b38:	0b401ed3 	j	9d007b4c <_realloc_r+0x24c>
9d007b3c:	ac620008 	sw	v0,8(v1)
9d007b40:	02602021 	move	a0,s3
9d007b44:	0f401e0c 	jal	9d007830 <memmove>
9d007b48:	02402821 	move	a1,s2
9d007b4c:	02b4a823 	subu	s5,s5,s4
9d007b50:	02341021 	addu	v0,s1,s4
9d007b54:	36b50001 	ori	s5,s5,0x1
9d007b58:	ac550004 	sw	s5,4(v0)
9d007b5c:	aec20008 	sw	v0,8(s6)
9d007b60:	8e220004 	lw	v0,4(s1)
9d007b64:	30420001 	andi	v0,v0,0x1
9d007b68:	0282a025 	or	s4,s4,v0
9d007b6c:	0b401f4f 	j	9d007d3c <_realloc_r+0x43c>
9d007b70:	ae340004 	sw	s4,4(s1)
9d007b74:	02a4a821 	addu	s5,s5,a0
9d007b78:	02b4202a 	slt	a0,s5,s4
9d007b7c:	54800007 	bnezl	a0,9d007b9c <_realloc_r+0x29c>
9d007b80:	005ea821 	addu	s5,v0,s8
9d007b84:	8c62000c 	lw	v0,12(v1)
9d007b88:	8c630008 	lw	v1,8(v1)
9d007b8c:	ac62000c 	sw	v0,12(v1)
9d007b90:	0b401eea 	j	9d007ba8 <_realloc_r+0x2a8>
9d007b94:	ac430008 	sw	v1,8(v0)
9d007b98:	005ea821 	addu	s5,v0,s8
9d007b9c:	02b4102a 	slt	v0,s5,s4
9d007ba0:	1440002d 	bnez	v0,9d007c58 <_realloc_r+0x358>
9d007ba4:	00000000 	nop
9d007ba8:	8e22000c 	lw	v0,12(s1)
9d007bac:	8e230008 	lw	v1,8(s1)
9d007bb0:	27c6fffc 	addiu	a2,s8,-4
9d007bb4:	ac62000c 	sw	v0,12(v1)
9d007bb8:	ac430008 	sw	v1,8(v0)
9d007bbc:	2cc20025 	sltiu	v0,a2,37
9d007bc0:	10400021 	beqz	v0,9d007c48 <_realloc_r+0x348>
9d007bc4:	26240008 	addiu	a0,s1,8
9d007bc8:	2cc30014 	sltiu	v1,a2,20
9d007bcc:	14600017 	bnez	v1,9d007c2c <_realloc_r+0x32c>
9d007bd0:	02401021 	move	v0,s2
9d007bd4:	8e430000 	lw	v1,0(s2)
9d007bd8:	26240010 	addiu	a0,s1,16
9d007bdc:	ae230008 	sw	v1,8(s1)
9d007be0:	8e430004 	lw	v1,4(s2)
9d007be4:	ae23000c 	sw	v1,12(s1)
9d007be8:	2cc3001c 	sltiu	v1,a2,28
9d007bec:	1460000f 	bnez	v1,9d007c2c <_realloc_r+0x32c>
9d007bf0:	26420008 	addiu	v0,s2,8
9d007bf4:	8e430008 	lw	v1,8(s2)
9d007bf8:	26240018 	addiu	a0,s1,24
9d007bfc:	ae230010 	sw	v1,16(s1)
9d007c00:	8c430004 	lw	v1,4(v0)
9d007c04:	ae230014 	sw	v1,20(s1)
9d007c08:	24030024 	li	v1,36
9d007c0c:	14c30007 	bne	a2,v1,9d007c2c <_realloc_r+0x32c>
9d007c10:	24420008 	addiu	v0,v0,8
9d007c14:	8c430000 	lw	v1,0(v0)
9d007c18:	26240020 	addiu	a0,s1,32
9d007c1c:	ae230018 	sw	v1,24(s1)
9d007c20:	8c430004 	lw	v1,4(v0)
9d007c24:	24420008 	addiu	v0,v0,8
9d007c28:	ae23001c 	sw	v1,28(s1)
9d007c2c:	8c430000 	lw	v1,0(v0)
9d007c30:	ac830000 	sw	v1,0(a0)
9d007c34:	8c430004 	lw	v1,4(v0)
9d007c38:	ac830004 	sw	v1,4(a0)
9d007c3c:	8c420008 	lw	v0,8(v0)
9d007c40:	0b401f54 	j	9d007d50 <_realloc_r+0x450>
9d007c44:	ac820008 	sw	v0,8(a0)
9d007c48:	0f401e0c 	jal	9d007830 <memmove>
9d007c4c:	02402821 	move	a1,s2
9d007c50:	0b401f55 	j	9d007d54 <_realloc_r+0x454>
9d007c54:	02b41023 	subu	v0,s5,s4
9d007c58:	0f401c61 	jal	9d007184 <_malloc_r>
9d007c5c:	02002021 	move	a0,s0
9d007c60:	10400036 	beqz	v0,9d007d3c <_realloc_r+0x43c>
9d007c64:	00409821 	move	s3,v0
9d007c68:	8ee30004 	lw	v1,4(s7)
9d007c6c:	2404fffe 	li	a0,-2
9d007c70:	2442fff8 	addiu	v0,v0,-8
9d007c74:	00831824 	and	v1,a0,v1
9d007c78:	02e31821 	addu	v1,s7,v1
9d007c7c:	14430006 	bne	v0,v1,9d007c98 <_realloc_r+0x398>
9d007c80:	27c6fffc 	addiu	a2,s8,-4
9d007c84:	8e62fffc 	lw	v0,-4(s3)
9d007c88:	2415fffc 	li	s5,-4
9d007c8c:	02a2a824 	and	s5,s5,v0
9d007c90:	0b401f53 	j	9d007d4c <_realloc_r+0x44c>
9d007c94:	02bea821 	addu	s5,s5,s8
9d007c98:	2cc20025 	sltiu	v0,a2,37
9d007c9c:	10400021 	beqz	v0,9d007d24 <_realloc_r+0x424>
9d007ca0:	02401821 	move	v1,s2
9d007ca4:	2cc40014 	sltiu	a0,a2,20
9d007ca8:	14800017 	bnez	a0,9d007d08 <_realloc_r+0x408>
9d007cac:	02601021 	move	v0,s3
9d007cb0:	8e420000 	lw	v0,0(s2)
9d007cb4:	2cc4001c 	sltiu	a0,a2,28
9d007cb8:	26430008 	addiu	v1,s2,8
9d007cbc:	ae620000 	sw	v0,0(s3)
9d007cc0:	8e420004 	lw	v0,4(s2)
9d007cc4:	ae620004 	sw	v0,4(s3)
9d007cc8:	1480000f 	bnez	a0,9d007d08 <_realloc_r+0x408>
9d007ccc:	26620008 	addiu	v0,s3,8
9d007cd0:	8e420008 	lw	v0,8(s2)
9d007cd4:	24040024 	li	a0,36
9d007cd8:	26430010 	addiu	v1,s2,16
9d007cdc:	ae620008 	sw	v0,8(s3)
9d007ce0:	8e42000c 	lw	v0,12(s2)
9d007ce4:	ae62000c 	sw	v0,12(s3)
9d007ce8:	14c40007 	bne	a2,a0,9d007d08 <_realloc_r+0x408>
9d007cec:	26620010 	addiu	v0,s3,16
9d007cf0:	8e420010 	lw	v0,16(s2)
9d007cf4:	26430018 	addiu	v1,s2,24
9d007cf8:	ae620010 	sw	v0,16(s3)
9d007cfc:	8e420014 	lw	v0,20(s2)
9d007d00:	ae620014 	sw	v0,20(s3)
9d007d04:	26620018 	addiu	v0,s3,24
9d007d08:	8c640000 	lw	a0,0(v1)
9d007d0c:	ac440000 	sw	a0,0(v0)
9d007d10:	8c640004 	lw	a0,4(v1)
9d007d14:	ac440004 	sw	a0,4(v0)
9d007d18:	8c630008 	lw	v1,8(v1)
9d007d1c:	0b401f4c 	j	9d007d30 <_realloc_r+0x430>
9d007d20:	ac430008 	sw	v1,8(v0)
9d007d24:	02602021 	move	a0,s3
9d007d28:	0f401e0c 	jal	9d007830 <memmove>
9d007d2c:	02402821 	move	a1,s2
9d007d30:	02002021 	move	a0,s0
9d007d34:	0f402b81 	jal	9d00ae04 <_free_r>
9d007d38:	02402821 	move	a1,s2
9d007d3c:	0f401e28 	jal	9d0078a0 <__malloc_unlock>
9d007d40:	02002021 	move	a0,s0
9d007d44:	0b401f72 	j	9d007dc8 <_realloc_r+0x4c8>
9d007d48:	8fbf003c 	lw	ra,60(sp)
9d007d4c:	02e08821 	move	s1,s7
9d007d50:	02b41023 	subu	v0,s5,s4
9d007d54:	2c440010 	sltiu	a0,v0,16
9d007d58:	14800010 	bnez	a0,9d007d9c <_realloc_r+0x49c>
9d007d5c:	8e230004 	lw	v1,4(s1)
9d007d60:	30630001 	andi	v1,v1,0x1
9d007d64:	02342821 	addu	a1,s1,s4
9d007d68:	0283a025 	or	s4,s4,v1
9d007d6c:	34430001 	ori	v1,v0,0x1
9d007d70:	ae340004 	sw	s4,4(s1)
9d007d74:	00a21021 	addu	v0,a1,v0
9d007d78:	aca30004 	sw	v1,4(a1)
9d007d7c:	8c430004 	lw	v1,4(v0)
9d007d80:	02002021 	move	a0,s0
9d007d84:	24a50008 	addiu	a1,a1,8
9d007d88:	34630001 	ori	v1,v1,0x1
9d007d8c:	0f402b81 	jal	9d00ae04 <_free_r>
9d007d90:	ac430004 	sw	v1,4(v0)
9d007d94:	0b401f6e 	j	9d007db8 <_realloc_r+0x4b8>
9d007d98:	00000000 	nop
9d007d9c:	30630001 	andi	v1,v1,0x1
9d007da0:	02a31825 	or	v1,s5,v1
9d007da4:	ae230004 	sw	v1,4(s1)
9d007da8:	0235a821 	addu	s5,s1,s5
9d007dac:	8ea20004 	lw	v0,4(s5)
9d007db0:	34420001 	ori	v0,v0,0x1
9d007db4:	aea20004 	sw	v0,4(s5)
9d007db8:	0f401e28 	jal	9d0078a0 <__malloc_unlock>
9d007dbc:	02002021 	move	a0,s0
9d007dc0:	26330008 	addiu	s3,s1,8
9d007dc4:	8fbf003c 	lw	ra,60(sp)
9d007dc8:	02601021 	move	v0,s3
9d007dcc:	8fbe0038 	lw	s8,56(sp)
9d007dd0:	8fb70034 	lw	s7,52(sp)
9d007dd4:	8fb60030 	lw	s6,48(sp)
9d007dd8:	8fb5002c 	lw	s5,44(sp)
9d007ddc:	8fb40028 	lw	s4,40(sp)
9d007de0:	8fb30024 	lw	s3,36(sp)
9d007de4:	8fb20020 	lw	s2,32(sp)
9d007de8:	8fb1001c 	lw	s1,28(sp)
9d007dec:	8fb00018 	lw	s0,24(sp)
9d007df0:	03e00008 	jr	ra
9d007df4:	27bd0040 	addiu	sp,sp,64

9d007df8 <_sbrk_r>:
9d007df8:	27bdffe0 	addiu	sp,sp,-32
9d007dfc:	afb10018 	sw	s1,24(sp)
9d007e00:	afb00014 	sw	s0,20(sp)
9d007e04:	00808821 	move	s1,a0
9d007e08:	3c10a000 	lui	s0,0xa000
9d007e0c:	00a02021 	move	a0,a1
9d007e10:	afbf001c 	sw	ra,28(sp)
9d007e14:	0f40308d 	jal	9d00c234 <sbrk>
9d007e18:	ae0009dc 	sw	zero,2524(s0)
9d007e1c:	2403ffff 	li	v1,-1
9d007e20:	14430005 	bne	v0,v1,9d007e38 <_sbrk_r+0x40>
9d007e24:	8fbf001c 	lw	ra,28(sp)
9d007e28:	8e0309dc 	lw	v1,2524(s0)
9d007e2c:	54600001 	bnezl	v1,9d007e34 <_sbrk_r+0x3c>
9d007e30:	ae230000 	sw	v1,0(s1)
9d007e34:	8fbf001c 	lw	ra,28(sp)
9d007e38:	8fb10018 	lw	s1,24(sp)
9d007e3c:	8fb00014 	lw	s0,20(sp)
9d007e40:	03e00008 	jr	ra
9d007e44:	27bd0020 	addiu	sp,sp,32

9d007e48 <sprintf>:
9d007e48:	27bdff80 	addiu	sp,sp,-128
9d007e4c:	24020208 	li	v0,520
9d007e50:	a7a20020 	sh	v0,32(sp)
9d007e54:	3c027fff 	lui	v0,0x7fff
9d007e58:	3442ffff 	ori	v0,v0,0xffff
9d007e5c:	afa2001c 	sw	v0,28(sp)
9d007e60:	afa20028 	sw	v0,40(sp)
9d007e64:	2402ffff 	li	v0,-1
9d007e68:	a7a20022 	sh	v0,34(sp)
9d007e6c:	3c02a000 	lui	v0,0xa000
9d007e70:	afa40014 	sw	a0,20(sp)
9d007e74:	afa40024 	sw	a0,36(sp)
9d007e78:	8c440958 	lw	a0,2392(v0)
9d007e7c:	afa60088 	sw	a2,136(sp)
9d007e80:	afa7008c 	sw	a3,140(sp)
9d007e84:	00a03021 	move	a2,a1
9d007e88:	27a70088 	addiu	a3,sp,136
9d007e8c:	27a50014 	addiu	a1,sp,20
9d007e90:	afbf007c 	sw	ra,124(sp)
9d007e94:	0f401fb2 	jal	9d007ec8 <_svfprintf_r>
9d007e98:	afa70010 	sw	a3,16(sp)
9d007e9c:	8fa30014 	lw	v1,20(sp)
9d007ea0:	a0600000 	sb	zero,0(v1)
9d007ea4:	8fbf007c 	lw	ra,124(sp)
9d007ea8:	03e00008 	jr	ra
9d007eac:	27bd0080 	addiu	sp,sp,128

9d007eb0 <strlen>:
9d007eb0:	24820001 	addiu	v0,a0,1
9d007eb4:	90830000 	lbu	v1,0(a0)
9d007eb8:	1460fffe 	bnez	v1,9d007eb4 <strlen+0x4>
9d007ebc:	24840001 	addiu	a0,a0,1
9d007ec0:	03e00008 	jr	ra
9d007ec4:	00821023 	subu	v0,a0,v0

9d007ec8 <_svfprintf_r>:
9d007ec8:	27bdfed8 	addiu	sp,sp,-296
9d007ecc:	afbf0124 	sw	ra,292(sp)
9d007ed0:	afb3010c 	sw	s3,268(sp)
9d007ed4:	afb20108 	sw	s2,264(sp)
9d007ed8:	afb10104 	sw	s1,260(sp)
9d007edc:	00a09021 	move	s2,a1
9d007ee0:	afb00100 	sw	s0,256(sp)
9d007ee4:	00809821 	move	s3,a0
9d007ee8:	00c08021 	move	s0,a2
9d007eec:	00e08821 	move	s1,a3
9d007ef0:	afbe0120 	sw	s8,288(sp)
9d007ef4:	afb7011c 	sw	s7,284(sp)
9d007ef8:	afb60118 	sw	s6,280(sp)
9d007efc:	afb50114 	sw	s5,276(sp)
9d007f00:	0f402c1c 	jal	9d00b070 <_localeconv_r>
9d007f04:	afb40110 	sw	s4,272(sp)
9d007f08:	8c420000 	lw	v0,0(v0)
9d007f0c:	00402021 	move	a0,v0
9d007f10:	0f401fac 	jal	9d007eb0 <strlen>
9d007f14:	afa200e0 	sw	v0,224(sp)
9d007f18:	afa200dc 	sw	v0,220(sp)
9d007f1c:	9642000c 	lhu	v0,12(s2)
9d007f20:	30420080 	andi	v0,v0,0x80
9d007f24:	10400012 	beqz	v0,9d007f70 <_svfprintf_r+0xa8>
9d007f28:	27b50080 	addiu	s5,sp,128
9d007f2c:	8e420010 	lw	v0,16(s2)
9d007f30:	54400010 	bnezl	v0,9d007f74 <_svfprintf_r+0xac>
9d007f34:	afb5004c 	sw	s5,76(sp)
9d007f38:	02602021 	move	a0,s3
9d007f3c:	0f401c61 	jal	9d007184 <_malloc_r>
9d007f40:	24050040 	li	a1,64
9d007f44:	ae420000 	sw	v0,0(s2)
9d007f48:	14400006 	bnez	v0,9d007f64 <_svfprintf_r+0x9c>
9d007f4c:	ae420010 	sw	v0,16(s2)
9d007f50:	2402000c 	li	v0,12
9d007f54:	ae620000 	sw	v0,0(s3)
9d007f58:	2402ffff 	li	v0,-1
9d007f5c:	0b4025d2 	j	9d009748 <_svfprintf_r+0x1880>
9d007f60:	afa200cc 	sw	v0,204(sp)
9d007f64:	24020040 	li	v0,64
9d007f68:	ae420014 	sw	v0,20(s2)
9d007f6c:	27b50080 	addiu	s5,sp,128
9d007f70:	afb5004c 	sw	s5,76(sp)
9d007f74:	afa00054 	sw	zero,84(sp)
9d007f78:	afa00050 	sw	zero,80(sp)
9d007f7c:	afb000c0 	sw	s0,192(sp)
9d007f80:	afa000c8 	sw	zero,200(sp)
9d007f84:	afa000d0 	sw	zero,208(sp)
9d007f88:	afa000d4 	sw	zero,212(sp)
9d007f8c:	afa000ec 	sw	zero,236(sp)
9d007f90:	afa000e8 	sw	zero,232(sp)
9d007f94:	afa000cc 	sw	zero,204(sp)
9d007f98:	8fb000c0 	lw	s0,192(sp)
9d007f9c:	24030025 	li	v1,37
9d007fa0:	82020000 	lb	v0,0(s0)
9d007fa4:	50400004 	beqzl	v0,9d007fb8 <_svfprintf_r+0xf0>
9d007fa8:	8fa300c0 	lw	v1,192(sp)
9d007fac:	5443fffc 	bnel	v0,v1,9d007fa0 <_svfprintf_r+0xd8>
9d007fb0:	26100001 	addiu	s0,s0,1
9d007fb4:	8fa300c0 	lw	v1,192(sp)
9d007fb8:	0203a023 	subu	s4,s0,v1
9d007fbc:	52800016 	beqzl	s4,9d008018 <_svfprintf_r+0x150>
9d007fc0:	82020000 	lb	v0,0(s0)
9d007fc4:	8fa20054 	lw	v0,84(sp)
9d007fc8:	aea30000 	sw	v1,0(s5)
9d007fcc:	aeb40004 	sw	s4,4(s5)
9d007fd0:	00541021 	addu	v0,v0,s4
9d007fd4:	afa20054 	sw	v0,84(sp)
9d007fd8:	8fa20050 	lw	v0,80(sp)
9d007fdc:	24420001 	addiu	v0,v0,1
9d007fe0:	afa20050 	sw	v0,80(sp)
9d007fe4:	28420008 	slti	v0,v0,8
9d007fe8:	14400007 	bnez	v0,9d008008 <_svfprintf_r+0x140>
9d007fec:	26b50008 	addiu	s5,s5,8
9d007ff0:	02602021 	move	a0,s3
9d007ff4:	02402821 	move	a1,s2
9d007ff8:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d007ffc:	27a6004c 	addiu	a2,sp,76
9d008000:	144005cb 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d008004:	27b50080 	addiu	s5,sp,128
9d008008:	8fa400cc 	lw	a0,204(sp)
9d00800c:	00942021 	addu	a0,a0,s4
9d008010:	afa400cc 	sw	a0,204(sp)
9d008014:	82020000 	lb	v0,0(s0)
9d008018:	104005be 	beqz	v0,9d009714 <_svfprintf_r+0x184c>
9d00801c:	26100001 	addiu	s0,s0,1
9d008020:	afb000c0 	sw	s0,192(sp)
9d008024:	a3a00028 	sb	zero,40(sp)
9d008028:	241effff 	li	s8,-1
9d00802c:	afa000c4 	sw	zero,196(sp)
9d008030:	00008021 	move	s0,zero
9d008034:	2403000a 	li	v1,10
9d008038:	2408002a 	li	t0,42
9d00803c:	2407ffff 	li	a3,-1
9d008040:	2406006c 	li	a2,108
9d008044:	2405002b 	li	a1,43
9d008048:	24040020 	li	a0,32
9d00804c:	8fa200c0 	lw	v0,192(sp)
9d008050:	00004821 	move	t1,zero
9d008054:	80570000 	lb	s7,0(v0)
9d008058:	24420001 	addiu	v0,v0,1
9d00805c:	26ebffe0 	addiu	t3,s7,-32
9d008060:	2d6c0059 	sltiu	t4,t3,89
9d008064:	51800282 	beqzl	t4,9d008a70 <_svfprintf_r+0xba8>
9d008068:	afa200c0 	sw	v0,192(sp)
9d00806c:	3c0a9d03 	lui	t2,0x9d03
9d008070:	254abe54 	addiu	t2,t2,-16812
9d008074:	000b5880 	sll	t3,t3,0x2
9d008078:	014b5821 	addu	t3,t2,t3
9d00807c:	8d6a0000 	lw	t2,0(t3)
9d008080:	01400008 	jr	t2
9d008084:	00000000 	nop
9d008088:	83aa0028 	lb	t2,40(sp)
9d00808c:	5140fff1 	beqzl	t2,9d008054 <_svfprintf_r+0x18c>
9d008090:	a3a40028 	sb	a0,40(sp)
9d008094:	0b402016 	j	9d008058 <_svfprintf_r+0x190>
9d008098:	80570000 	lb	s7,0(v0)
9d00809c:	0b402015 	j	9d008054 <_svfprintf_r+0x18c>
9d0080a0:	36100001 	ori	s0,s0,0x1
9d0080a4:	8e290000 	lw	t1,0(s1)
9d0080a8:	0521ffea 	bgez	t1,9d008054 <_svfprintf_r+0x18c>
9d0080ac:	26310004 	addiu	s1,s1,4
9d0080b0:	00094823 	negu	t1,t1
9d0080b4:	0b402015 	j	9d008054 <_svfprintf_r+0x18c>
9d0080b8:	36100004 	ori	s0,s0,0x4
9d0080bc:	0b402015 	j	9d008054 <_svfprintf_r+0x18c>
9d0080c0:	a3a50028 	sb	a1,40(sp)
9d0080c4:	80570000 	lb	s7,0(v0)
9d0080c8:	12e80003 	beq	s7,t0,9d0080d8 <_svfprintf_r+0x210>
9d0080cc:	24420001 	addiu	v0,v0,1
9d0080d0:	0b40203f 	j	9d0080fc <_svfprintf_r+0x234>
9d0080d4:	00005021 	move	t2,zero
9d0080d8:	8e3e0000 	lw	s8,0(s1)
9d0080dc:	262a0004 	addiu	t2,s1,4
9d0080e0:	07c1ffdc 	bgez	s8,9d008054 <_svfprintf_r+0x18c>
9d0080e4:	01408821 	move	s1,t2
9d0080e8:	0b402015 	j	9d008054 <_svfprintf_r+0x18c>
9d0080ec:	241effff 	li	s8,-1
9d0080f0:	80570000 	lb	s7,0(v0)
9d0080f4:	24420001 	addiu	v0,v0,1
9d0080f8:	018b5021 	addu	t2,t4,t3
9d0080fc:	26ebffd0 	addiu	t3,s7,-48
9d008100:	2d6c000a 	sltiu	t4,t3,10
9d008104:	1580fffa 	bnez	t4,9d0080f0 <_svfprintf_r+0x228>
9d008108:	71436002 	mul	t4,t2,v1
9d00810c:	295e0000 	slti	s8,t2,0
9d008110:	00fe500b 	movn	t2,a3,s8
9d008114:	0b402017 	j	9d00805c <_svfprintf_r+0x194>
9d008118:	0140f021 	move	s8,t2
9d00811c:	0b402015 	j	9d008054 <_svfprintf_r+0x18c>
9d008120:	36100080 	ori	s0,s0,0x80
9d008124:	00004821 	move	t1,zero
9d008128:	71235002 	mul	t2,t1,v1
9d00812c:	26f7ffd0 	addiu	s7,s7,-48
9d008130:	01574821 	addu	t1,t2,s7
9d008134:	80570000 	lb	s7,0(v0)
9d008138:	26eaffd0 	addiu	t2,s7,-48
9d00813c:	2d4a000a 	sltiu	t2,t2,10
9d008140:	1540fff9 	bnez	t2,9d008128 <_svfprintf_r+0x260>
9d008144:	24420001 	addiu	v0,v0,1
9d008148:	0b402018 	j	9d008060 <_svfprintf_r+0x198>
9d00814c:	26ebffe0 	addiu	t3,s7,-32
9d008150:	0b402015 	j	9d008054 <_svfprintf_r+0x18c>
9d008154:	36100008 	ori	s0,s0,0x8
9d008158:	0b402015 	j	9d008054 <_svfprintf_r+0x18c>
9d00815c:	36100040 	ori	s0,s0,0x40
9d008160:	804a0000 	lb	t2,0(v0)
9d008164:	5546ffbb 	bnel	t2,a2,9d008054 <_svfprintf_r+0x18c>
9d008168:	36100010 	ori	s0,s0,0x10
9d00816c:	24420001 	addiu	v0,v0,1
9d008170:	0b402015 	j	9d008054 <_svfprintf_r+0x18c>
9d008174:	36100020 	ori	s0,s0,0x20
9d008178:	afa200c0 	sw	v0,192(sp)
9d00817c:	8e220000 	lw	v0,0(s1)
9d008180:	afa900c4 	sw	t1,196(sp)
9d008184:	a3a00028 	sb	zero,40(sp)
9d008188:	a3a20058 	sb	v0,88(sp)
9d00818c:	0b4022a0 	j	9d008a80 <_svfprintf_r+0xbb8>
9d008190:	26310004 	addiu	s1,s1,4
9d008194:	afa200c0 	sw	v0,192(sp)
9d008198:	afa900c4 	sw	t1,196(sp)
9d00819c:	0b40206b 	j	9d0081ac <_svfprintf_r+0x2e4>
9d0081a0:	36100010 	ori	s0,s0,0x10
9d0081a4:	afa200c0 	sw	v0,192(sp)
9d0081a8:	afa900c4 	sw	t1,196(sp)
9d0081ac:	32020020 	andi	v0,s0,0x20
9d0081b0:	10400008 	beqz	v0,9d0081d4 <_svfprintf_r+0x30c>
9d0081b4:	32030010 	andi	v1,s0,0x10
9d0081b8:	26310007 	addiu	s1,s1,7
9d0081bc:	2402fff8 	li	v0,-8
9d0081c0:	02221024 	and	v0,s1,v0
9d0081c4:	24510008 	addiu	s1,v0,8
9d0081c8:	8c560000 	lw	s6,0(v0)
9d0081cc:	0b40207f 	j	9d0081fc <_svfprintf_r+0x334>
9d0081d0:	8c480004 	lw	t0,4(v0)
9d0081d4:	10600003 	beqz	v1,9d0081e4 <_svfprintf_r+0x31c>
9d0081d8:	26220004 	addiu	v0,s1,4
9d0081dc:	0b40207d 	j	9d0081f4 <_svfprintf_r+0x32c>
9d0081e0:	8e360000 	lw	s6,0(s1)
9d0081e4:	32030040 	andi	v1,s0,0x40
9d0081e8:	10600002 	beqz	v1,9d0081f4 <_svfprintf_r+0x32c>
9d0081ec:	8e360000 	lw	s6,0(s1)
9d0081f0:	7c16b620 	seh	s6,s6
9d0081f4:	001647c3 	sra	t0,s6,0x1f
9d0081f8:	00408821 	move	s1,v0
9d0081fc:	050301c4 	bgezl	t0,9d008910 <_svfprintf_r+0xa48>
9d008200:	24020001 	li	v0,1
9d008204:	0016b023 	negu	s6,s6
9d008208:	0016102b 	sltu	v0,zero,s6
9d00820c:	00084023 	negu	t0,t0
9d008210:	01024023 	subu	t0,t0,v0
9d008214:	2402002d 	li	v0,45
9d008218:	a3a20028 	sb	v0,40(sp)
9d00821c:	0b402244 	j	9d008910 <_svfprintf_r+0xa48>
9d008220:	24020001 	li	v0,1
9d008224:	afa200c0 	sw	v0,192(sp)
9d008228:	32020008 	andi	v0,s0,0x8
9d00822c:	afa900c4 	sw	t1,196(sp)
9d008230:	afb700d8 	sw	s7,216(sp)
9d008234:	10400007 	beqz	v0,9d008254 <_svfprintf_r+0x38c>
9d008238:	26310007 	addiu	s1,s1,7
9d00823c:	2402fff8 	li	v0,-8
9d008240:	02221024 	and	v0,s1,v0
9d008244:	8c4c0000 	lw	t4,0(v0)
9d008248:	24510008 	addiu	s1,v0,8
9d00824c:	0b40209a 	j	9d008268 <_svfprintf_r+0x3a0>
9d008250:	afac00d0 	sw	t4,208(sp)
9d008254:	2402fff8 	li	v0,-8
9d008258:	02221024 	and	v0,s1,v0
9d00825c:	8c430000 	lw	v1,0(v0)
9d008260:	24510008 	addiu	s1,v0,8
9d008264:	afa300d0 	sw	v1,208(sp)
9d008268:	8c420004 	lw	v0,4(v0)
9d00826c:	8fa300d0 	lw	v1,208(sp)
9d008270:	afa200d4 	sw	v0,212(sp)
9d008274:	8fa200d4 	lw	v0,212(sp)
9d008278:	00602021 	move	a0,v1
9d00827c:	0f402eca 	jal	9d00bb28 <__fpclassifyd>
9d008280:	00402821 	move	a1,v0
9d008284:	24030001 	li	v1,1
9d008288:	14430013 	bne	v0,v1,9d0082d8 <_svfprintf_r+0x410>
9d00828c:	8fa300d0 	lw	v1,208(sp)
9d008290:	8fa200d4 	lw	v0,212(sp)
9d008294:	00003021 	move	a2,zero
9d008298:	00602021 	move	a0,v1
9d00829c:	00402821 	move	a1,v0
9d0082a0:	0f4017fa 	jal	9d005fe8 <__ledf2>
9d0082a4:	00003821 	move	a3,zero
9d0082a8:	04410004 	bgez	v0,9d0082bc <_svfprintf_r+0x3f4>
9d0082ac:	2ae20048 	slti	v0,s7,72
9d0082b0:	2402002d 	li	v0,45
9d0082b4:	a3a20028 	sb	v0,40(sp)
9d0082b8:	2ae20048 	slti	v0,s7,72
9d0082bc:	50400004 	beqzl	v0,9d0082d0 <_svfprintf_r+0x408>
9d0082c0:	3c149d03 	lui	s4,0x9d03
9d0082c4:	3c149d03 	lui	s4,0x9d03
9d0082c8:	0b4020c3 	j	9d00830c <_svfprintf_r+0x444>
9d0082cc:	2694be18 	addiu	s4,s4,-16872
9d0082d0:	0b4020c3 	j	9d00830c <_svfprintf_r+0x444>
9d0082d4:	2694be1c 	addiu	s4,s4,-16868
9d0082d8:	8fa200d4 	lw	v0,212(sp)
9d0082dc:	00602021 	move	a0,v1
9d0082e0:	0f402eca 	jal	9d00bb28 <__fpclassifyd>
9d0082e4:	00402821 	move	a1,v0
9d0082e8:	1440000c 	bnez	v0,9d00831c <_svfprintf_r+0x454>
9d0082ec:	2402ffff 	li	v0,-1
9d0082f0:	2ae20048 	slti	v0,s7,72
9d0082f4:	50400004 	beqzl	v0,9d008308 <_svfprintf_r+0x440>
9d0082f8:	3c149d03 	lui	s4,0x9d03
9d0082fc:	3c149d03 	lui	s4,0x9d03
9d008300:	0b4020c3 	j	9d00830c <_svfprintf_r+0x444>
9d008304:	2694be20 	addiu	s4,s4,-16864
9d008308:	2694be24 	addiu	s4,s4,-16860
9d00830c:	2402ff7f 	li	v0,-129
9d008310:	02028024 	and	s0,s0,v0
9d008314:	0b4022a6 	j	9d008a98 <_svfprintf_r+0xbd0>
9d008318:	24030003 	li	v1,3
9d00831c:	13c20008 	beq	s8,v0,9d008340 <_svfprintf_r+0x478>
9d008320:	24020067 	li	v0,103
9d008324:	12e20003 	beq	s7,v0,9d008334 <_svfprintf_r+0x46c>
9d008328:	24020047 	li	v0,71
9d00832c:	16e20006 	bne	s7,v0,9d008348 <_svfprintf_r+0x480>
9d008330:	8fa400d4 	lw	a0,212(sp)
9d008334:	24020001 	li	v0,1
9d008338:	0b4020d1 	j	9d008344 <_svfprintf_r+0x47c>
9d00833c:	005ef00a 	movz	s8,v0,s8
9d008340:	241e0006 	li	s8,6
9d008344:	8fa400d4 	lw	a0,212(sp)
9d008348:	04810006 	bgez	a0,9d008364 <_svfprintf_r+0x49c>
9d00834c:	36100100 	ori	s0,s0,0x100
9d008350:	3c038000 	lui	v1,0x8000
9d008354:	2405002d 	li	a1,45
9d008358:	00641826 	xor	v1,v1,a0
9d00835c:	0b4020db 	j	9d00836c <_svfprintf_r+0x4a4>
9d008360:	afa500e4 	sw	a1,228(sp)
9d008364:	8fa300d4 	lw	v1,212(sp)
9d008368:	afa000e4 	sw	zero,228(sp)
9d00836c:	24020066 	li	v0,102
9d008370:	12e2000b 	beq	s7,v0,9d0083a0 <_svfprintf_r+0x4d8>
9d008374:	03c0b021 	move	s6,s8
9d008378:	24020046 	li	v0,70
9d00837c:	12e2000b 	beq	s7,v0,9d0083ac <_svfprintf_r+0x4e4>
9d008380:	24020003 	li	v0,3
9d008384:	24020065 	li	v0,101
9d008388:	12e20003 	beq	s7,v0,9d008398 <_svfprintf_r+0x4d0>
9d00838c:	24020045 	li	v0,69
9d008390:	16e20006 	bne	s7,v0,9d0083ac <_svfprintf_r+0x4e4>
9d008394:	24020002 	li	v0,2
9d008398:	0b4020ea 	j	9d0083a8 <_svfprintf_r+0x4e0>
9d00839c:	27d60001 	addiu	s6,s8,1
9d0083a0:	0b4020eb 	j	9d0083ac <_svfprintf_r+0x4e4>
9d0083a4:	24020003 	li	v0,3
9d0083a8:	24020002 	li	v0,2
9d0083ac:	8fa500d0 	lw	a1,208(sp)
9d0083b0:	afa20010 	sw	v0,16(sp)
9d0083b4:	27a20030 	addiu	v0,sp,48
9d0083b8:	afa20018 	sw	v0,24(sp)
9d0083bc:	27a20034 	addiu	v0,sp,52
9d0083c0:	afa2001c 	sw	v0,28(sp)
9d0083c4:	00603821 	move	a3,v1
9d0083c8:	27a20038 	addiu	v0,sp,56
9d0083cc:	02602021 	move	a0,s3
9d0083d0:	00a03021 	move	a2,a1
9d0083d4:	afa300fc 	sw	v1,252(sp)
9d0083d8:	afb60014 	sw	s6,20(sp)
9d0083dc:	0f402660 	jal	9d009980 <_dtoa_r>
9d0083e0:	afa20020 	sw	v0,32(sp)
9d0083e4:	0040a021 	move	s4,v0
9d0083e8:	24020067 	li	v0,103
9d0083ec:	12e20004 	beq	s7,v0,9d008400 <_svfprintf_r+0x538>
9d0083f0:	8fa300fc 	lw	v1,252(sp)
9d0083f4:	24020047 	li	v0,71
9d0083f8:	16e20005 	bne	s7,v0,9d008410 <_svfprintf_r+0x548>
9d0083fc:	24020066 	li	v0,102
9d008400:	32020001 	andi	v0,s0,0x1
9d008404:	1040002f 	beqz	v0,9d0084c4 <_svfprintf_r+0x5fc>
9d008408:	8fa20038 	lw	v0,56(sp)
9d00840c:	24020066 	li	v0,102
9d008410:	12e20004 	beq	s7,v0,9d008424 <_svfprintf_r+0x55c>
9d008414:	02964021 	addu	t0,s4,s6
9d008418:	24020046 	li	v0,70
9d00841c:	16e20016 	bne	s7,v0,9d008478 <_svfprintf_r+0x5b0>
9d008420:	8fa600d0 	lw	a2,208(sp)
9d008424:	82840000 	lb	a0,0(s4)
9d008428:	24020030 	li	v0,48
9d00842c:	14820010 	bne	a0,v0,9d008470 <_svfprintf_r+0x5a8>
9d008430:	8fa20030 	lw	v0,48(sp)
9d008434:	8fa600d0 	lw	a2,208(sp)
9d008438:	00602821 	move	a1,v1
9d00843c:	00003821 	move	a3,zero
9d008440:	00c02021 	move	a0,a2
9d008444:	00003021 	move	a2,zero
9d008448:	afa300fc 	sw	v1,252(sp)
9d00844c:	0f4032ce 	jal	9d00cb38 <__eqdf2>
9d008450:	afa800f4 	sw	t0,244(sp)
9d008454:	8fa300fc 	lw	v1,252(sp)
9d008458:	10400004 	beqz	v0,9d00846c <_svfprintf_r+0x5a4>
9d00845c:	8fa800f4 	lw	t0,244(sp)
9d008460:	24020001 	li	v0,1
9d008464:	0056b023 	subu	s6,v0,s6
9d008468:	afb60030 	sw	s6,48(sp)
9d00846c:	8fa20030 	lw	v0,48(sp)
9d008470:	01024021 	addu	t0,t0,v0
9d008474:	8fa600d0 	lw	a2,208(sp)
9d008478:	00602821 	move	a1,v1
9d00847c:	00003821 	move	a3,zero
9d008480:	00c02021 	move	a0,a2
9d008484:	00003021 	move	a2,zero
9d008488:	0f4032ce 	jal	9d00cb38 <__eqdf2>
9d00848c:	afa800f4 	sw	t0,244(sp)
9d008490:	14400006 	bnez	v0,9d0084ac <_svfprintf_r+0x5e4>
9d008494:	8fa800f4 	lw	t0,244(sp)
9d008498:	0b40212b 	j	9d0084ac <_svfprintf_r+0x5e4>
9d00849c:	afa80038 	sw	t0,56(sp)
9d0084a0:	24420001 	addiu	v0,v0,1
9d0084a4:	0b40212c 	j	9d0084b0 <_svfprintf_r+0x5e8>
9d0084a8:	afa20038 	sw	v0,56(sp)
9d0084ac:	24030030 	li	v1,48
9d0084b0:	8fa20038 	lw	v0,56(sp)
9d0084b4:	0048202b 	sltu	a0,v0,t0
9d0084b8:	5480fff9 	bnezl	a0,9d0084a0 <_svfprintf_r+0x5d8>
9d0084bc:	a0430000 	sb	v1,0(v0)
9d0084c0:	8fa20038 	lw	v0,56(sp)
9d0084c4:	24030067 	li	v1,103
9d0084c8:	00541023 	subu	v0,v0,s4
9d0084cc:	afa200c8 	sw	v0,200(sp)
9d0084d0:	12e30004 	beq	s7,v1,9d0084e4 <_svfprintf_r+0x61c>
9d0084d4:	8fa20030 	lw	v0,48(sp)
9d0084d8:	24030047 	li	v1,71
9d0084dc:	16e30009 	bne	s7,v1,9d008504 <_svfprintf_r+0x63c>
9d0084e0:	24030066 	li	v1,102
9d0084e4:	2844fffd 	slti	a0,v0,-3
9d0084e8:	14800004 	bnez	a0,9d0084fc <_svfprintf_r+0x634>
9d0084ec:	00401821 	move	v1,v0
9d0084f0:	03c2f02a 	slt	s8,s8,v0
9d0084f4:	13c0004d 	beqz	s8,9d00862c <_svfprintf_r+0x764>
9d0084f8:	8fa500c8 	lw	a1,200(sp)
9d0084fc:	0b402143 	j	9d00850c <_svfprintf_r+0x644>
9d008500:	26f7fffe 	addiu	s7,s7,-2
9d008504:	12e30038 	beq	s7,v1,9d0085e8 <_svfprintf_r+0x720>
9d008508:	00000000 	nop
9d00850c:	2443ffff 	addiu	v1,v0,-1
9d008510:	afa30030 	sw	v1,48(sp)
9d008514:	a3b7003c 	sb	s7,60(sp)
9d008518:	04610003 	bgez	v1,9d008528 <_svfprintf_r+0x660>
9d00851c:	2402002b 	li	v0,43
9d008520:	00031823 	negu	v1,v1
9d008524:	2402002d 	li	v0,45
9d008528:	a3a2003d 	sb	v0,61(sp)
9d00852c:	2862000a 	slti	v0,v1,10
9d008530:	1440001b 	bnez	v0,9d0085a0 <_svfprintf_r+0x6d8>
9d008534:	24020030 	li	v0,48
9d008538:	27a2004b 	addiu	v0,sp,75
9d00853c:	2404000a 	li	a0,10
9d008540:	0064001a 	div	zero,v1,a0
9d008544:	008001f4 	teq	a0,zero,0x7
9d008548:	2442ffff 	addiu	v0,v0,-1
9d00854c:	00002810 	mfhi	a1
9d008550:	24a50030 	addiu	a1,a1,48
9d008554:	a0450000 	sb	a1,0(v0)
9d008558:	00001812 	mflo	v1
9d00855c:	2865000a 	slti	a1,v1,10
9d008560:	10a0fff7 	beqz	a1,9d008540 <_svfprintf_r+0x678>
9d008564:	00000000 	nop
9d008568:	24630030 	addiu	v1,v1,48
9d00856c:	a043ffff 	sb	v1,-1(v0)
9d008570:	2444ffff 	addiu	a0,v0,-1
9d008574:	27a3004b 	addiu	v1,sp,75
9d008578:	0b402163 	j	9d00858c <_svfprintf_r+0x6c4>
9d00857c:	27a2003e 	addiu	v0,sp,62
9d008580:	24840001 	addiu	a0,a0,1
9d008584:	a0450000 	sb	a1,0(v0)
9d008588:	24420001 	addiu	v0,v0,1
9d00858c:	0083282b 	sltu	a1,a0,v1
9d008590:	54a0fffb 	bnezl	a1,9d008580 <_svfprintf_r+0x6b8>
9d008594:	90850000 	lbu	a1,0(a0)
9d008598:	0b40216d 	j	9d0085b4 <_svfprintf_r+0x6ec>
9d00859c:	27a3003c 	addiu	v1,sp,60
9d0085a0:	24630030 	addiu	v1,v1,48
9d0085a4:	a3a2003e 	sb	v0,62(sp)
9d0085a8:	a3a3003f 	sb	v1,63(sp)
9d0085ac:	27a20040 	addiu	v0,sp,64
9d0085b0:	27a3003c 	addiu	v1,sp,60
9d0085b4:	00431823 	subu	v1,v0,v1
9d0085b8:	8fa200c8 	lw	v0,200(sp)
9d0085bc:	afa300e8 	sw	v1,232(sp)
9d0085c0:	00621821 	addu	v1,v1,v0
9d0085c4:	28420002 	slti	v0,v0,2
9d0085c8:	50400005 	beqzl	v0,9d0085e0 <_svfprintf_r+0x718>
9d0085cc:	24630001 	addiu	v1,v1,1
9d0085d0:	32020001 	andi	v0,s0,0x1
9d0085d4:	10400027 	beqz	v0,9d008674 <_svfprintf_r+0x7ac>
9d0085d8:	0000b021 	move	s6,zero
9d0085dc:	24630001 	addiu	v1,v1,1
9d0085e0:	0b40219d 	j	9d008674 <_svfprintf_r+0x7ac>
9d0085e4:	0000b021 	move	s6,zero
9d0085e8:	18400009 	blez	v0,9d008610 <_svfprintf_r+0x748>
9d0085ec:	00401821 	move	v1,v0
9d0085f0:	57c00005 	bnezl	s8,9d008608 <_svfprintf_r+0x740>
9d0085f4:	24430001 	addiu	v1,v0,1
9d0085f8:	32040001 	andi	a0,s0,0x1
9d0085fc:	1080001c 	beqz	a0,9d008670 <_svfprintf_r+0x7a8>
9d008600:	8fb60030 	lw	s6,48(sp)
9d008604:	24430001 	addiu	v1,v0,1
9d008608:	0b40219b 	j	9d00866c <_svfprintf_r+0x7a4>
9d00860c:	007e1821 	addu	v1,v1,s8
9d008610:	17c00016 	bnez	s8,9d00866c <_svfprintf_r+0x7a4>
9d008614:	27c30002 	addiu	v1,s8,2
9d008618:	32020001 	andi	v0,s0,0x1
9d00861c:	10400013 	beqz	v0,9d00866c <_svfprintf_r+0x7a4>
9d008620:	24030001 	li	v1,1
9d008624:	0b40219b 	j	9d00866c <_svfprintf_r+0x7a4>
9d008628:	27c30002 	addiu	v1,s8,2
9d00862c:	0045202a 	slt	a0,v0,a1
9d008630:	14800006 	bnez	a0,9d00864c <_svfprintf_r+0x784>
9d008634:	240a0067 	li	t2,103
9d008638:	32020001 	andi	v0,s0,0x1
9d00863c:	0002102b 	sltu	v0,zero,v0
9d008640:	afaa00d8 	sw	t2,216(sp)
9d008644:	0b40219b 	j	9d00866c <_svfprintf_r+0x7a4>
9d008648:	00621821 	addu	v1,v1,v0
9d00864c:	1c400003 	bgtz	v0,9d00865c <_svfprintf_r+0x794>
9d008650:	24030001 	li	v1,1
9d008654:	24030002 	li	v1,2
9d008658:	00621823 	subu	v1,v1,v0
9d00865c:	8fac00c8 	lw	t4,200(sp)
9d008660:	24020067 	li	v0,103
9d008664:	afa200d8 	sw	v0,216(sp)
9d008668:	006c1821 	addu	v1,v1,t4
9d00866c:	8fb60030 	lw	s6,48(sp)
9d008670:	8fb700d8 	lw	s7,216(sp)
9d008674:	8fa400e4 	lw	a0,228(sp)
9d008678:	10800109 	beqz	a0,9d008aa0 <_svfprintf_r+0xbd8>
9d00867c:	00003821 	move	a3,zero
9d008680:	2402002d 	li	v0,45
9d008684:	0b4022a8 	j	9d008aa0 <_svfprintf_r+0xbd8>
9d008688:	a3a20028 	sb	v0,40(sp)
9d00868c:	32030020 	andi	v1,s0,0x20
9d008690:	afa200c0 	sw	v0,192(sp)
9d008694:	10600007 	beqz	v1,9d0086b4 <_svfprintf_r+0x7ec>
9d008698:	26220004 	addiu	v0,s1,4
9d00869c:	8fa500cc 	lw	a1,204(sp)
9d0086a0:	8e230000 	lw	v1,0(s1)
9d0086a4:	000527c3 	sra	a0,a1,0x1f
9d0086a8:	ac650000 	sw	a1,0(v1)
9d0086ac:	0b4021bb 	j	9d0086ec <_svfprintf_r+0x824>
9d0086b0:	ac640004 	sw	a0,4(v1)
9d0086b4:	32030010 	andi	v1,s0,0x10
9d0086b8:	50600005 	beqzl	v1,9d0086d0 <_svfprintf_r+0x808>
9d0086bc:	32100040 	andi	s0,s0,0x40
9d0086c0:	8e230000 	lw	v1,0(s1)
9d0086c4:	8faa00cc 	lw	t2,204(sp)
9d0086c8:	0b4021bb 	j	9d0086ec <_svfprintf_r+0x824>
9d0086cc:	ac6a0000 	sw	t2,0(v1)
9d0086d0:	12000004 	beqz	s0,9d0086e4 <_svfprintf_r+0x81c>
9d0086d4:	8e230000 	lw	v1,0(s1)
9d0086d8:	8fac00cc 	lw	t4,204(sp)
9d0086dc:	0b4021bb 	j	9d0086ec <_svfprintf_r+0x824>
9d0086e0:	a46c0000 	sh	t4,0(v1)
9d0086e4:	8fa400cc 	lw	a0,204(sp)
9d0086e8:	ac640000 	sw	a0,0(v1)
9d0086ec:	0b401fe6 	j	9d007f98 <_svfprintf_r+0xd0>
9d0086f0:	00408821 	move	s1,v0
9d0086f4:	afa200c0 	sw	v0,192(sp)
9d0086f8:	afa900c4 	sw	t1,196(sp)
9d0086fc:	0b4021c3 	j	9d00870c <_svfprintf_r+0x844>
9d008700:	36100010 	ori	s0,s0,0x10
9d008704:	afa200c0 	sw	v0,192(sp)
9d008708:	afa900c4 	sw	t1,196(sp)
9d00870c:	32020020 	andi	v0,s0,0x20
9d008710:	10400008 	beqz	v0,9d008734 <_svfprintf_r+0x86c>
9d008714:	32030010 	andi	v1,s0,0x10
9d008718:	26310007 	addiu	s1,s1,7
9d00871c:	2402fff8 	li	v0,-8
9d008720:	02221024 	and	v0,s1,v0
9d008724:	24510008 	addiu	s1,v0,8
9d008728:	8c560000 	lw	s6,0(v0)
9d00872c:	0b4021d7 	j	9d00875c <_svfprintf_r+0x894>
9d008730:	8c480004 	lw	t0,4(v0)
9d008734:	10600003 	beqz	v1,9d008744 <_svfprintf_r+0x87c>
9d008738:	26220004 	addiu	v0,s1,4
9d00873c:	0b4021d5 	j	9d008754 <_svfprintf_r+0x88c>
9d008740:	8e360000 	lw	s6,0(s1)
9d008744:	32030040 	andi	v1,s0,0x40
9d008748:	10600002 	beqz	v1,9d008754 <_svfprintf_r+0x88c>
9d00874c:	8e360000 	lw	s6,0(s1)
9d008750:	32d6ffff 	andi	s6,s6,0xffff
9d008754:	00004021 	move	t0,zero
9d008758:	00408821 	move	s1,v0
9d00875c:	0b402243 	j	9d00890c <_svfprintf_r+0xa44>
9d008760:	00001021 	move	v0,zero
9d008764:	afa200c0 	sw	v0,192(sp)
9d008768:	24020030 	li	v0,48
9d00876c:	8e360000 	lw	s6,0(s1)
9d008770:	a3a2002c 	sb	v0,44(sp)
9d008774:	24020078 	li	v0,120
9d008778:	a3a2002d 	sb	v0,45(sp)
9d00877c:	3c029d03 	lui	v0,0x9d03
9d008780:	2442be3c 	addiu	v0,v0,-16836
9d008784:	afa200ec 	sw	v0,236(sp)
9d008788:	afa900c4 	sw	t1,196(sp)
9d00878c:	00004021 	move	t0,zero
9d008790:	36100002 	ori	s0,s0,0x2
9d008794:	26310004 	addiu	s1,s1,4
9d008798:	24020002 	li	v0,2
9d00879c:	0b402243 	j	9d00890c <_svfprintf_r+0xa44>
9d0087a0:	24170078 	li	s7,120
9d0087a4:	afa200c0 	sw	v0,192(sp)
9d0087a8:	a3a00028 	sb	zero,40(sp)
9d0087ac:	02201021 	move	v0,s1
9d0087b0:	afa900c4 	sw	t1,196(sp)
9d0087b4:	26310004 	addiu	s1,s1,4
9d0087b8:	07c0000c 	bltz	s8,9d0087ec <_svfprintf_r+0x924>
9d0087bc:	8c540000 	lw	s4,0(v0)
9d0087c0:	02802021 	move	a0,s4
9d0087c4:	00002821 	move	a1,zero
9d0087c8:	0f402c1f 	jal	9d00b07c <memchr>
9d0087cc:	03c03021 	move	a2,s8
9d0087d0:	104000b0 	beqz	v0,9d008a94 <_svfprintf_r+0xbcc>
9d0087d4:	00541823 	subu	v1,v0,s4
9d0087d8:	03c3102a 	slt	v0,s8,v1
9d0087dc:	00003821 	move	a3,zero
9d0087e0:	0000b021 	move	s6,zero
9d0087e4:	0b4022a8 	j	9d008aa0 <_svfprintf_r+0xbd8>
9d0087e8:	03c2180b 	movn	v1,s8,v0
9d0087ec:	0f401fac 	jal	9d007eb0 <strlen>
9d0087f0:	02802021 	move	a0,s4
9d0087f4:	0b4022a6 	j	9d008a98 <_svfprintf_r+0xbd0>
9d0087f8:	00401821 	move	v1,v0
9d0087fc:	afa200c0 	sw	v0,192(sp)
9d008800:	afa900c4 	sw	t1,196(sp)
9d008804:	0b402205 	j	9d008814 <_svfprintf_r+0x94c>
9d008808:	36100010 	ori	s0,s0,0x10
9d00880c:	afa200c0 	sw	v0,192(sp)
9d008810:	afa900c4 	sw	t1,196(sp)
9d008814:	32020020 	andi	v0,s0,0x20
9d008818:	10400008 	beqz	v0,9d00883c <_svfprintf_r+0x974>
9d00881c:	32030010 	andi	v1,s0,0x10
9d008820:	26310007 	addiu	s1,s1,7
9d008824:	2402fff8 	li	v0,-8
9d008828:	02221024 	and	v0,s1,v0
9d00882c:	24510008 	addiu	s1,v0,8
9d008830:	8c560000 	lw	s6,0(v0)
9d008834:	0b402219 	j	9d008864 <_svfprintf_r+0x99c>
9d008838:	8c480004 	lw	t0,4(v0)
9d00883c:	10600003 	beqz	v1,9d00884c <_svfprintf_r+0x984>
9d008840:	26220004 	addiu	v0,s1,4
9d008844:	0b402217 	j	9d00885c <_svfprintf_r+0x994>
9d008848:	8e360000 	lw	s6,0(s1)
9d00884c:	32030040 	andi	v1,s0,0x40
9d008850:	10600002 	beqz	v1,9d00885c <_svfprintf_r+0x994>
9d008854:	8e360000 	lw	s6,0(s1)
9d008858:	32d6ffff 	andi	s6,s6,0xffff
9d00885c:	00004021 	move	t0,zero
9d008860:	00408821 	move	s1,v0
9d008864:	0b402243 	j	9d00890c <_svfprintf_r+0xa44>
9d008868:	24020001 	li	v0,1
9d00886c:	afa200c0 	sw	v0,192(sp)
9d008870:	3c029d03 	lui	v0,0x9d03
9d008874:	afa900c4 	sw	t1,196(sp)
9d008878:	0b402224 	j	9d008890 <_svfprintf_r+0x9c8>
9d00887c:	2442be3c 	addiu	v0,v0,-16836
9d008880:	afa200c0 	sw	v0,192(sp)
9d008884:	3c029d03 	lui	v0,0x9d03
9d008888:	afa900c4 	sw	t1,196(sp)
9d00888c:	2442be28 	addiu	v0,v0,-16856
9d008890:	afa200ec 	sw	v0,236(sp)
9d008894:	32020020 	andi	v0,s0,0x20
9d008898:	10400008 	beqz	v0,9d0088bc <_svfprintf_r+0x9f4>
9d00889c:	32030010 	andi	v1,s0,0x10
9d0088a0:	26310007 	addiu	s1,s1,7
9d0088a4:	2402fff8 	li	v0,-8
9d0088a8:	02221024 	and	v0,s1,v0
9d0088ac:	24510008 	addiu	s1,v0,8
9d0088b0:	8c560000 	lw	s6,0(v0)
9d0088b4:	0b402239 	j	9d0088e4 <_svfprintf_r+0xa1c>
9d0088b8:	8c480004 	lw	t0,4(v0)
9d0088bc:	10600003 	beqz	v1,9d0088cc <_svfprintf_r+0xa04>
9d0088c0:	26220004 	addiu	v0,s1,4
9d0088c4:	0b402237 	j	9d0088dc <_svfprintf_r+0xa14>
9d0088c8:	8e360000 	lw	s6,0(s1)
9d0088cc:	32030040 	andi	v1,s0,0x40
9d0088d0:	10600002 	beqz	v1,9d0088dc <_svfprintf_r+0xa14>
9d0088d4:	8e360000 	lw	s6,0(s1)
9d0088d8:	32d6ffff 	andi	s6,s6,0xffff
9d0088dc:	00004021 	move	t0,zero
9d0088e0:	00408821 	move	s1,v0
9d0088e4:	32030001 	andi	v1,s0,0x1
9d0088e8:	10600008 	beqz	v1,9d00890c <_svfprintf_r+0xa44>
9d0088ec:	24020002 	li	v0,2
9d0088f0:	02c81825 	or	v1,s6,t0
9d0088f4:	50600006 	beqzl	v1,9d008910 <_svfprintf_r+0xa48>
9d0088f8:	a3a00028 	sb	zero,40(sp)
9d0088fc:	24030030 	li	v1,48
9d008900:	a3a3002c 	sb	v1,44(sp)
9d008904:	a3b7002d 	sb	s7,45(sp)
9d008908:	36100002 	ori	s0,s0,0x2
9d00890c:	a3a00028 	sb	zero,40(sp)
9d008910:	07c00002 	bltz	s8,9d00891c <_svfprintf_r+0xa54>
9d008914:	2403ff7f 	li	v1,-129
9d008918:	02038024 	and	s0,s0,v1
9d00891c:	02c81825 	or	v1,s6,t0
9d008920:	14600003 	bnez	v1,9d008930 <_svfprintf_r+0xa68>
9d008924:	24030001 	li	v1,1
9d008928:	13c00044 	beqz	s8,9d008a3c <_svfprintf_r+0xb74>
9d00892c:	00000000 	nop
9d008930:	10430016 	beq	v0,v1,9d00898c <_svfprintf_r+0xac4>
9d008934:	24030002 	li	v1,2
9d008938:	10430031 	beq	v0,v1,9d008a00 <_svfprintf_r+0xb38>
9d00893c:	27b40080 	addiu	s4,sp,128
9d008940:	00081740 	sll	v0,t0,0x1d
9d008944:	32c30007 	andi	v1,s6,0x7
9d008948:	0016b0c2 	srl	s6,s6,0x3
9d00894c:	0056b025 	or	s6,v0,s6
9d008950:	000840c2 	srl	t0,t0,0x3
9d008954:	2694ffff 	addiu	s4,s4,-1
9d008958:	24630030 	addiu	v1,v1,48
9d00895c:	02c81025 	or	v0,s6,t0
9d008960:	1440fff7 	bnez	v0,9d008940 <_svfprintf_r+0xa78>
9d008964:	a2830000 	sb	v1,0(s4)
9d008968:	32020001 	andi	v0,s0,0x1
9d00896c:	5040003c 	beqzl	v0,9d008a60 <_svfprintf_r+0xb98>
9d008970:	27a30080 	addiu	v1,sp,128
9d008974:	24020030 	li	v0,48
9d008978:	50620039 	beql	v1,v0,9d008a60 <_svfprintf_r+0xb98>
9d00897c:	27a30080 	addiu	v1,sp,128
9d008980:	2694ffff 	addiu	s4,s4,-1
9d008984:	0b402297 	j	9d008a5c <_svfprintf_r+0xb94>
9d008988:	a2820000 	sb	v0,0(s4)
9d00898c:	15000007 	bnez	t0,9d0089ac <_svfprintf_r+0xae4>
9d008990:	27b40080 	addiu	s4,sp,128
9d008994:	2ec2000a 	sltiu	v0,s6,10
9d008998:	10400005 	beqz	v0,9d0089b0 <_svfprintf_r+0xae8>
9d00899c:	02c02021 	move	a0,s6
9d0089a0:	26d60030 	addiu	s6,s6,48
9d0089a4:	0b402296 	j	9d008a58 <_svfprintf_r+0xb90>
9d0089a8:	a3b6007f 	sb	s6,127(sp)
9d0089ac:	02c02021 	move	a0,s6
9d0089b0:	01002821 	move	a1,t0
9d0089b4:	2406000a 	li	a2,10
9d0089b8:	00003821 	move	a3,zero
9d0089bc:	0f4031b3 	jal	9d00c6cc <__umoddi3>
9d0089c0:	afa800f4 	sw	t0,244(sp)
9d0089c4:	24420030 	addiu	v0,v0,48
9d0089c8:	2694ffff 	addiu	s4,s4,-1
9d0089cc:	a2820000 	sb	v0,0(s4)
9d0089d0:	8fa800f4 	lw	t0,244(sp)
9d0089d4:	02c02021 	move	a0,s6
9d0089d8:	2406000a 	li	a2,10
9d0089dc:	01002821 	move	a1,t0
9d0089e0:	0f4030a1 	jal	9d00c284 <__udivdi3>
9d0089e4:	00003821 	move	a3,zero
9d0089e8:	0040b021 	move	s6,v0
9d0089ec:	00431025 	or	v0,v0,v1
9d0089f0:	1440ffee 	bnez	v0,9d0089ac <_svfprintf_r+0xae4>
9d0089f4:	00604021 	move	t0,v1
9d0089f8:	0b402298 	j	9d008a60 <_svfprintf_r+0xb98>
9d0089fc:	27a30080 	addiu	v1,sp,128
9d008a00:	8fa500ec 	lw	a1,236(sp)
9d008a04:	32c2000f 	andi	v0,s6,0xf
9d008a08:	2694ffff 	addiu	s4,s4,-1
9d008a0c:	00a21021 	addu	v0,a1,v0
9d008a10:	90420000 	lbu	v0,0(v0)
9d008a14:	0016b102 	srl	s6,s6,0x4
9d008a18:	a2820000 	sb	v0,0(s4)
9d008a1c:	00081700 	sll	v0,t0,0x1c
9d008a20:	0056b025 	or	s6,v0,s6
9d008a24:	00084102 	srl	t0,t0,0x4
9d008a28:	02c81025 	or	v0,s6,t0
9d008a2c:	1440fff5 	bnez	v0,9d008a04 <_svfprintf_r+0xb3c>
9d008a30:	8fa500ec 	lw	a1,236(sp)
9d008a34:	0b402298 	j	9d008a60 <_svfprintf_r+0xb98>
9d008a38:	27a30080 	addiu	v1,sp,128
9d008a3c:	14400007 	bnez	v0,9d008a5c <_svfprintf_r+0xb94>
9d008a40:	27b40080 	addiu	s4,sp,128
9d008a44:	32020001 	andi	v0,s0,0x1
9d008a48:	50400005 	beqzl	v0,9d008a60 <_svfprintf_r+0xb98>
9d008a4c:	27a30080 	addiu	v1,sp,128
9d008a50:	24020030 	li	v0,48
9d008a54:	a3a2007f 	sb	v0,127(sp)
9d008a58:	27b4007f 	addiu	s4,sp,127
9d008a5c:	27a30080 	addiu	v1,sp,128
9d008a60:	00741823 	subu	v1,v1,s4
9d008a64:	0b4022a7 	j	9d008a9c <_svfprintf_r+0xbd4>
9d008a68:	03c03821 	move	a3,s8
9d008a6c:	afa200c0 	sw	v0,192(sp)
9d008a70:	12e00328 	beqz	s7,9d009714 <_svfprintf_r+0x184c>
9d008a74:	afa900c4 	sw	t1,196(sp)
9d008a78:	a3b70058 	sb	s7,88(sp)
9d008a7c:	a3a00028 	sb	zero,40(sp)
9d008a80:	24030001 	li	v1,1
9d008a84:	00003821 	move	a3,zero
9d008a88:	0000b021 	move	s6,zero
9d008a8c:	0b4022a8 	j	9d008aa0 <_svfprintf_r+0xbd8>
9d008a90:	27b40058 	addiu	s4,sp,88
9d008a94:	03c01821 	move	v1,s8
9d008a98:	00003821 	move	a3,zero
9d008a9c:	0000b021 	move	s6,zero
9d008aa0:	83a20028 	lb	v0,40(sp)
9d008aa4:	0067f02a 	slt	s8,v1,a3
9d008aa8:	00e05021 	move	t2,a3
9d008aac:	0002102b 	sltu	v0,zero,v0
9d008ab0:	007e500a 	movz	t2,v1,s8
9d008ab4:	0142f021 	addu	s8,t2,v0
9d008ab8:	320c0002 	andi	t4,s0,0x2
9d008abc:	32020084 	andi	v0,s0,0x84
9d008ac0:	afac00d8 	sw	t4,216(sp)
9d008ac4:	03ccf021 	addu	s8,s8,t4
9d008ac8:	1440003b 	bnez	v0,9d008bb8 <_svfprintf_r+0xcf0>
9d008acc:	afa200e4 	sw	v0,228(sp)
9d008ad0:	8fa400c4 	lw	a0,196(sp)
9d008ad4:	009e4023 	subu	t0,a0,s8
9d008ad8:	1d00001e 	bgtz	t0,9d008b54 <_svfprintf_r+0xc8c>
9d008adc:	24090010 	li	t1,16
9d008ae0:	0b4022ef 	j	9d008bbc <_svfprintf_r+0xcf4>
9d008ae4:	83a20028 	lb	v0,40(sp)
9d008ae8:	3c059d03 	lui	a1,0x9d03
9d008aec:	24420010 	addiu	v0,v0,16
9d008af0:	24a5bfc8 	addiu	a1,a1,-16440
9d008af4:	aea50000 	sw	a1,0(s5)
9d008af8:	aea90004 	sw	t1,4(s5)
9d008afc:	afa20054 	sw	v0,84(sp)
9d008b00:	8fa20050 	lw	v0,80(sp)
9d008b04:	24420001 	addiu	v0,v0,1
9d008b08:	afa20050 	sw	v0,80(sp)
9d008b0c:	28420008 	slti	v0,v0,8
9d008b10:	1440000f 	bnez	v0,9d008b50 <_svfprintf_r+0xc88>
9d008b14:	26b50008 	addiu	s5,s5,8
9d008b18:	02602021 	move	a0,s3
9d008b1c:	02402821 	move	a1,s2
9d008b20:	27a6004c 	addiu	a2,sp,76
9d008b24:	afa300fc 	sw	v1,252(sp)
9d008b28:	afa700f8 	sw	a3,248(sp)
9d008b2c:	afa800f4 	sw	t0,244(sp)
9d008b30:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d008b34:	afa900f0 	sw	t1,240(sp)
9d008b38:	8fa300fc 	lw	v1,252(sp)
9d008b3c:	8fa700f8 	lw	a3,248(sp)
9d008b40:	8fa800f4 	lw	t0,244(sp)
9d008b44:	144002fa 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d008b48:	8fa900f0 	lw	t1,240(sp)
9d008b4c:	27b50080 	addiu	s5,sp,128
9d008b50:	2508fff0 	addiu	t0,t0,-16
9d008b54:	29040011 	slti	a0,t0,17
9d008b58:	1080ffe3 	beqz	a0,9d008ae8 <_svfprintf_r+0xc20>
9d008b5c:	8fa20054 	lw	v0,84(sp)
9d008b60:	aea80004 	sw	t0,4(s5)
9d008b64:	00484021 	addu	t0,v0,t0
9d008b68:	8fa20050 	lw	v0,80(sp)
9d008b6c:	3c0a9d03 	lui	t2,0x9d03
9d008b70:	254abfc8 	addiu	t2,t2,-16440
9d008b74:	24420001 	addiu	v0,v0,1
9d008b78:	aeaa0000 	sw	t2,0(s5)
9d008b7c:	afa20050 	sw	v0,80(sp)
9d008b80:	28420008 	slti	v0,v0,8
9d008b84:	afa80054 	sw	t0,84(sp)
9d008b88:	1440000b 	bnez	v0,9d008bb8 <_svfprintf_r+0xcf0>
9d008b8c:	26b50008 	addiu	s5,s5,8
9d008b90:	02602021 	move	a0,s3
9d008b94:	02402821 	move	a1,s2
9d008b98:	27a6004c 	addiu	a2,sp,76
9d008b9c:	afa300fc 	sw	v1,252(sp)
9d008ba0:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d008ba4:	afa700f8 	sw	a3,248(sp)
9d008ba8:	8fa300fc 	lw	v1,252(sp)
9d008bac:	144002e0 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d008bb0:	8fa700f8 	lw	a3,248(sp)
9d008bb4:	27b50080 	addiu	s5,sp,128
9d008bb8:	83a20028 	lb	v0,40(sp)
9d008bbc:	10400019 	beqz	v0,9d008c24 <_svfprintf_r+0xd5c>
9d008bc0:	8fac00d8 	lw	t4,216(sp)
9d008bc4:	27a20028 	addiu	v0,sp,40
9d008bc8:	aea20000 	sw	v0,0(s5)
9d008bcc:	24020001 	li	v0,1
9d008bd0:	aea20004 	sw	v0,4(s5)
9d008bd4:	8fa20054 	lw	v0,84(sp)
9d008bd8:	24420001 	addiu	v0,v0,1
9d008bdc:	afa20054 	sw	v0,84(sp)
9d008be0:	8fa20050 	lw	v0,80(sp)
9d008be4:	24420001 	addiu	v0,v0,1
9d008be8:	afa20050 	sw	v0,80(sp)
9d008bec:	28420008 	slti	v0,v0,8
9d008bf0:	1440000b 	bnez	v0,9d008c20 <_svfprintf_r+0xd58>
9d008bf4:	26b50008 	addiu	s5,s5,8
9d008bf8:	02602021 	move	a0,s3
9d008bfc:	02402821 	move	a1,s2
9d008c00:	27a6004c 	addiu	a2,sp,76
9d008c04:	afa300fc 	sw	v1,252(sp)
9d008c08:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d008c0c:	afa700f8 	sw	a3,248(sp)
9d008c10:	8fa300fc 	lw	v1,252(sp)
9d008c14:	144002c6 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d008c18:	8fa700f8 	lw	a3,248(sp)
9d008c1c:	27b50080 	addiu	s5,sp,128
9d008c20:	8fac00d8 	lw	t4,216(sp)
9d008c24:	11800019 	beqz	t4,9d008c8c <_svfprintf_r+0xdc4>
9d008c28:	8fa400e4 	lw	a0,228(sp)
9d008c2c:	27a2002c 	addiu	v0,sp,44
9d008c30:	aea20000 	sw	v0,0(s5)
9d008c34:	24020002 	li	v0,2
9d008c38:	aea20004 	sw	v0,4(s5)
9d008c3c:	8fa20054 	lw	v0,84(sp)
9d008c40:	24420002 	addiu	v0,v0,2
9d008c44:	afa20054 	sw	v0,84(sp)
9d008c48:	8fa20050 	lw	v0,80(sp)
9d008c4c:	24420001 	addiu	v0,v0,1
9d008c50:	afa20050 	sw	v0,80(sp)
9d008c54:	28420008 	slti	v0,v0,8
9d008c58:	1440000b 	bnez	v0,9d008c88 <_svfprintf_r+0xdc0>
9d008c5c:	26b50008 	addiu	s5,s5,8
9d008c60:	02602021 	move	a0,s3
9d008c64:	02402821 	move	a1,s2
9d008c68:	27a6004c 	addiu	a2,sp,76
9d008c6c:	afa300fc 	sw	v1,252(sp)
9d008c70:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d008c74:	afa700f8 	sw	a3,248(sp)
9d008c78:	8fa300fc 	lw	v1,252(sp)
9d008c7c:	144002ac 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d008c80:	8fa700f8 	lw	a3,248(sp)
9d008c84:	27b50080 	addiu	s5,sp,128
9d008c88:	8fa400e4 	lw	a0,228(sp)
9d008c8c:	24020080 	li	v0,128
9d008c90:	5482003c 	bnel	a0,v0,9d008d84 <_svfprintf_r+0xebc>
9d008c94:	00e33823 	subu	a3,a3,v1
9d008c98:	8fa500c4 	lw	a1,196(sp)
9d008c9c:	00be4023 	subu	t0,a1,s8
9d008ca0:	1d00001e 	bgtz	t0,9d008d1c <_svfprintf_r+0xe54>
9d008ca4:	24090010 	li	t1,16
9d008ca8:	0b402361 	j	9d008d84 <_svfprintf_r+0xebc>
9d008cac:	00e33823 	subu	a3,a3,v1
9d008cb0:	3c0a9d03 	lui	t2,0x9d03
9d008cb4:	24420010 	addiu	v0,v0,16
9d008cb8:	254abfb8 	addiu	t2,t2,-16456
9d008cbc:	aeaa0000 	sw	t2,0(s5)
9d008cc0:	aea90004 	sw	t1,4(s5)
9d008cc4:	afa20054 	sw	v0,84(sp)
9d008cc8:	8fa20050 	lw	v0,80(sp)
9d008ccc:	24420001 	addiu	v0,v0,1
9d008cd0:	afa20050 	sw	v0,80(sp)
9d008cd4:	28420008 	slti	v0,v0,8
9d008cd8:	1440000f 	bnez	v0,9d008d18 <_svfprintf_r+0xe50>
9d008cdc:	26b50008 	addiu	s5,s5,8
9d008ce0:	02602021 	move	a0,s3
9d008ce4:	02402821 	move	a1,s2
9d008ce8:	27a6004c 	addiu	a2,sp,76
9d008cec:	afa300fc 	sw	v1,252(sp)
9d008cf0:	afa700f8 	sw	a3,248(sp)
9d008cf4:	afa800f4 	sw	t0,244(sp)
9d008cf8:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d008cfc:	afa900f0 	sw	t1,240(sp)
9d008d00:	8fa300fc 	lw	v1,252(sp)
9d008d04:	8fa700f8 	lw	a3,248(sp)
9d008d08:	8fa800f4 	lw	t0,244(sp)
9d008d0c:	14400288 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d008d10:	8fa900f0 	lw	t1,240(sp)
9d008d14:	27b50080 	addiu	s5,sp,128
9d008d18:	2508fff0 	addiu	t0,t0,-16
9d008d1c:	29040011 	slti	a0,t0,17
9d008d20:	1080ffe3 	beqz	a0,9d008cb0 <_svfprintf_r+0xde8>
9d008d24:	8fa20054 	lw	v0,84(sp)
9d008d28:	aea80004 	sw	t0,4(s5)
9d008d2c:	00484021 	addu	t0,v0,t0
9d008d30:	8fa20050 	lw	v0,80(sp)
9d008d34:	3c0c9d03 	lui	t4,0x9d03
9d008d38:	258cbfb8 	addiu	t4,t4,-16456
9d008d3c:	24420001 	addiu	v0,v0,1
9d008d40:	aeac0000 	sw	t4,0(s5)
9d008d44:	afa20050 	sw	v0,80(sp)
9d008d48:	28420008 	slti	v0,v0,8
9d008d4c:	afa80054 	sw	t0,84(sp)
9d008d50:	1440000b 	bnez	v0,9d008d80 <_svfprintf_r+0xeb8>
9d008d54:	26b50008 	addiu	s5,s5,8
9d008d58:	02602021 	move	a0,s3
9d008d5c:	02402821 	move	a1,s2
9d008d60:	27a6004c 	addiu	a2,sp,76
9d008d64:	afa300fc 	sw	v1,252(sp)
9d008d68:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d008d6c:	afa700f8 	sw	a3,248(sp)
9d008d70:	8fa300fc 	lw	v1,252(sp)
9d008d74:	1440026e 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d008d78:	8fa700f8 	lw	a3,248(sp)
9d008d7c:	27b50080 	addiu	s5,sp,128
9d008d80:	00e33823 	subu	a3,a3,v1
9d008d84:	1ce0001c 	bgtz	a3,9d008df8 <_svfprintf_r+0xf30>
9d008d88:	24080010 	li	t0,16
9d008d8c:	0b402396 	j	9d008e58 <_svfprintf_r+0xf90>
9d008d90:	32020100 	andi	v0,s0,0x100
9d008d94:	3c049d03 	lui	a0,0x9d03
9d008d98:	24420010 	addiu	v0,v0,16
9d008d9c:	2484bfb8 	addiu	a0,a0,-16456
9d008da0:	aea40000 	sw	a0,0(s5)
9d008da4:	aea80004 	sw	t0,4(s5)
9d008da8:	afa20054 	sw	v0,84(sp)
9d008dac:	8fa20050 	lw	v0,80(sp)
9d008db0:	24420001 	addiu	v0,v0,1
9d008db4:	afa20050 	sw	v0,80(sp)
9d008db8:	28420008 	slti	v0,v0,8
9d008dbc:	1440000d 	bnez	v0,9d008df4 <_svfprintf_r+0xf2c>
9d008dc0:	26b50008 	addiu	s5,s5,8
9d008dc4:	02602021 	move	a0,s3
9d008dc8:	02402821 	move	a1,s2
9d008dcc:	27a6004c 	addiu	a2,sp,76
9d008dd0:	afa300fc 	sw	v1,252(sp)
9d008dd4:	afa700f8 	sw	a3,248(sp)
9d008dd8:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d008ddc:	afa800f4 	sw	t0,244(sp)
9d008de0:	8fa300fc 	lw	v1,252(sp)
9d008de4:	8fa700f8 	lw	a3,248(sp)
9d008de8:	14400251 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d008dec:	8fa800f4 	lw	t0,244(sp)
9d008df0:	27b50080 	addiu	s5,sp,128
9d008df4:	24e7fff0 	addiu	a3,a3,-16
9d008df8:	28e40011 	slti	a0,a3,17
9d008dfc:	1080ffe5 	beqz	a0,9d008d94 <_svfprintf_r+0xecc>
9d008e00:	8fa20054 	lw	v0,84(sp)
9d008e04:	aea70004 	sw	a3,4(s5)
9d008e08:	00473821 	addu	a3,v0,a3
9d008e0c:	8fa20050 	lw	v0,80(sp)
9d008e10:	3c059d03 	lui	a1,0x9d03
9d008e14:	24a5bfb8 	addiu	a1,a1,-16456
9d008e18:	24420001 	addiu	v0,v0,1
9d008e1c:	aea50000 	sw	a1,0(s5)
9d008e20:	afa20050 	sw	v0,80(sp)
9d008e24:	28420008 	slti	v0,v0,8
9d008e28:	afa70054 	sw	a3,84(sp)
9d008e2c:	14400009 	bnez	v0,9d008e54 <_svfprintf_r+0xf8c>
9d008e30:	26b50008 	addiu	s5,s5,8
9d008e34:	02602021 	move	a0,s3
9d008e38:	02402821 	move	a1,s2
9d008e3c:	27a6004c 	addiu	a2,sp,76
9d008e40:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d008e44:	afa300fc 	sw	v1,252(sp)
9d008e48:	14400239 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d008e4c:	8fa300fc 	lw	v1,252(sp)
9d008e50:	27b50080 	addiu	s5,sp,128
9d008e54:	32020100 	andi	v0,s0,0x100
9d008e58:	14400006 	bnez	v0,9d008e74 <_svfprintf_r+0xfac>
9d008e5c:	8fa80054 	lw	t0,84(sp)
9d008e60:	aea30004 	sw	v1,4(s5)
9d008e64:	01031821 	addu	v1,t0,v1
9d008e68:	aeb40000 	sw	s4,0(s5)
9d008e6c:	0b402578 	j	9d0095e0 <_svfprintf_r+0x1718>
9d008e70:	afa30054 	sw	v1,84(sp)
9d008e74:	2af70066 	slti	s7,s7,102
9d008e78:	16e00166 	bnez	s7,9d009414 <_svfprintf_r+0x154c>
9d008e7c:	8fa400c8 	lw	a0,200(sp)
9d008e80:	8fa300d0 	lw	v1,208(sp)
9d008e84:	8fa200d4 	lw	v0,212(sp)
9d008e88:	00003021 	move	a2,zero
9d008e8c:	00602021 	move	a0,v1
9d008e90:	00402821 	move	a1,v0
9d008e94:	00003821 	move	a3,zero
9d008e98:	0f4032ce 	jal	9d00cb38 <__eqdf2>
9d008e9c:	afa800f4 	sw	t0,244(sp)
9d008ea0:	14400050 	bnez	v0,9d008fe4 <_svfprintf_r+0x111c>
9d008ea4:	8fa800f4 	lw	t0,244(sp)
9d008ea8:	3c029d03 	lui	v0,0x9d03
9d008eac:	2442be50 	addiu	v0,v0,-16816
9d008eb0:	aea20000 	sw	v0,0(s5)
9d008eb4:	24020001 	li	v0,1
9d008eb8:	aea20004 	sw	v0,4(s5)
9d008ebc:	8fa20050 	lw	v0,80(sp)
9d008ec0:	25080001 	addiu	t0,t0,1
9d008ec4:	afa80054 	sw	t0,84(sp)
9d008ec8:	24420001 	addiu	v0,v0,1
9d008ecc:	afa20050 	sw	v0,80(sp)
9d008ed0:	28420008 	slti	v0,v0,8
9d008ed4:	14400007 	bnez	v0,9d008ef4 <_svfprintf_r+0x102c>
9d008ed8:	26b50008 	addiu	s5,s5,8
9d008edc:	02602021 	move	a0,s3
9d008ee0:	02402821 	move	a1,s2
9d008ee4:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d008ee8:	27a6004c 	addiu	a2,sp,76
9d008eec:	14400210 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d008ef0:	27b50080 	addiu	s5,sp,128
9d008ef4:	8fa20030 	lw	v0,48(sp)
9d008ef8:	8faa00c8 	lw	t2,200(sp)
9d008efc:	004a102a 	slt	v0,v0,t2
9d008f00:	14400005 	bnez	v0,9d008f18 <_svfprintf_r+0x1050>
9d008f04:	8fa200dc 	lw	v0,220(sp)
9d008f08:	32020001 	andi	v0,s0,0x1
9d008f0c:	504001c1 	beqzl	v0,9d009614 <_svfprintf_r+0x174c>
9d008f10:	32100004 	andi	s0,s0,0x4
9d008f14:	8fa200dc 	lw	v0,220(sp)
9d008f18:	8fa300dc 	lw	v1,220(sp)
9d008f1c:	8fac00e0 	lw	t4,224(sp)
9d008f20:	aea20004 	sw	v0,4(s5)
9d008f24:	8fa20054 	lw	v0,84(sp)
9d008f28:	aeac0000 	sw	t4,0(s5)
9d008f2c:	00431021 	addu	v0,v0,v1
9d008f30:	afa20054 	sw	v0,84(sp)
9d008f34:	8fa20050 	lw	v0,80(sp)
9d008f38:	24420001 	addiu	v0,v0,1
9d008f3c:	afa20050 	sw	v0,80(sp)
9d008f40:	28420008 	slti	v0,v0,8
9d008f44:	14400007 	bnez	v0,9d008f64 <_svfprintf_r+0x109c>
9d008f48:	26b50008 	addiu	s5,s5,8
9d008f4c:	02602021 	move	a0,s3
9d008f50:	02402821 	move	a1,s2
9d008f54:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d008f58:	27a6004c 	addiu	a2,sp,76
9d008f5c:	144001f4 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d008f60:	27b50080 	addiu	s5,sp,128
9d008f64:	8fa400c8 	lw	a0,200(sp)
9d008f68:	2494ffff 	addiu	s4,a0,-1
9d008f6c:	1e800016 	bgtz	s4,9d008fc8 <_svfprintf_r+0x1100>
9d008f70:	24160010 	li	s6,16
9d008f74:	0b402585 	j	9d009614 <_svfprintf_r+0x174c>
9d008f78:	32100004 	andi	s0,s0,0x4
9d008f7c:	3c059d03 	lui	a1,0x9d03
9d008f80:	24420010 	addiu	v0,v0,16
9d008f84:	24a5bfb8 	addiu	a1,a1,-16456
9d008f88:	aea50000 	sw	a1,0(s5)
9d008f8c:	aeb60004 	sw	s6,4(s5)
9d008f90:	afa20054 	sw	v0,84(sp)
9d008f94:	8fa20050 	lw	v0,80(sp)
9d008f98:	24420001 	addiu	v0,v0,1
9d008f9c:	afa20050 	sw	v0,80(sp)
9d008fa0:	28420008 	slti	v0,v0,8
9d008fa4:	14400007 	bnez	v0,9d008fc4 <_svfprintf_r+0x10fc>
9d008fa8:	26b50008 	addiu	s5,s5,8
9d008fac:	02602021 	move	a0,s3
9d008fb0:	02402821 	move	a1,s2
9d008fb4:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d008fb8:	27a6004c 	addiu	a2,sp,76
9d008fbc:	144001dc 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d008fc0:	27b50080 	addiu	s5,sp,128
9d008fc4:	2694fff0 	addiu	s4,s4,-16
9d008fc8:	2a830011 	slti	v1,s4,17
9d008fcc:	1060ffeb 	beqz	v1,9d008f7c <_svfprintf_r+0x10b4>
9d008fd0:	8fa20054 	lw	v0,84(sp)
9d008fd4:	3c0a9d03 	lui	t2,0x9d03
9d008fd8:	254abfb8 	addiu	t2,t2,-16456
9d008fdc:	0b402501 	j	9d009404 <_svfprintf_r+0x153c>
9d008fe0:	aeaa0000 	sw	t2,0(s5)
9d008fe4:	8fa20030 	lw	v0,48(sp)
9d008fe8:	1c400064 	bgtz	v0,9d00917c <_svfprintf_r+0x12b4>
9d008fec:	8fac00c8 	lw	t4,200(sp)
9d008ff0:	3c029d03 	lui	v0,0x9d03
9d008ff4:	2442be50 	addiu	v0,v0,-16816
9d008ff8:	aea20000 	sw	v0,0(s5)
9d008ffc:	24020001 	li	v0,1
9d009000:	aea20004 	sw	v0,4(s5)
9d009004:	8fa20050 	lw	v0,80(sp)
9d009008:	25080001 	addiu	t0,t0,1
9d00900c:	afa80054 	sw	t0,84(sp)
9d009010:	24420001 	addiu	v0,v0,1
9d009014:	afa20050 	sw	v0,80(sp)
9d009018:	28420008 	slti	v0,v0,8
9d00901c:	14400007 	bnez	v0,9d00903c <_svfprintf_r+0x1174>
9d009020:	26b50008 	addiu	s5,s5,8
9d009024:	02602021 	move	a0,s3
9d009028:	02402821 	move	a1,s2
9d00902c:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d009030:	27a6004c 	addiu	a2,sp,76
9d009034:	144001be 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d009038:	27b50080 	addiu	s5,sp,128
9d00903c:	8fa20030 	lw	v0,48(sp)
9d009040:	14400008 	bnez	v0,9d009064 <_svfprintf_r+0x119c>
9d009044:	8fa200e0 	lw	v0,224(sp)
9d009048:	8fac00c8 	lw	t4,200(sp)
9d00904c:	15800006 	bnez	t4,9d009068 <_svfprintf_r+0x11a0>
9d009050:	8fa300dc 	lw	v1,220(sp)
9d009054:	32020001 	andi	v0,s0,0x1
9d009058:	5040016e 	beqzl	v0,9d009614 <_svfprintf_r+0x174c>
9d00905c:	32100004 	andi	s0,s0,0x4
9d009060:	8fa200e0 	lw	v0,224(sp)
9d009064:	8fa300dc 	lw	v1,220(sp)
9d009068:	aea20000 	sw	v0,0(s5)
9d00906c:	8fa20054 	lw	v0,84(sp)
9d009070:	aea30004 	sw	v1,4(s5)
9d009074:	00431021 	addu	v0,v0,v1
9d009078:	afa20054 	sw	v0,84(sp)
9d00907c:	8fa20050 	lw	v0,80(sp)
9d009080:	24420001 	addiu	v0,v0,1
9d009084:	afa20050 	sw	v0,80(sp)
9d009088:	28420008 	slti	v0,v0,8
9d00908c:	14400007 	bnez	v0,9d0090ac <_svfprintf_r+0x11e4>
9d009090:	26b50008 	addiu	s5,s5,8
9d009094:	02602021 	move	a0,s3
9d009098:	02402821 	move	a1,s2
9d00909c:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d0090a0:	27a6004c 	addiu	a2,sp,76
9d0090a4:	144001a2 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d0090a8:	27b50080 	addiu	s5,sp,128
9d0090ac:	8fb60030 	lw	s6,48(sp)
9d0090b0:	0016b023 	negu	s6,s6
9d0090b4:	1ec00016 	bgtz	s6,9d009110 <_svfprintf_r+0x1248>
9d0090b8:	24170010 	li	s7,16
9d0090bc:	0b40245a 	j	9d009168 <_svfprintf_r+0x12a0>
9d0090c0:	8faa00c8 	lw	t2,200(sp)
9d0090c4:	3c049d03 	lui	a0,0x9d03
9d0090c8:	24420010 	addiu	v0,v0,16
9d0090cc:	2484bfb8 	addiu	a0,a0,-16456
9d0090d0:	aea40000 	sw	a0,0(s5)
9d0090d4:	aeb70004 	sw	s7,4(s5)
9d0090d8:	afa20054 	sw	v0,84(sp)
9d0090dc:	8fa20050 	lw	v0,80(sp)
9d0090e0:	24420001 	addiu	v0,v0,1
9d0090e4:	afa20050 	sw	v0,80(sp)
9d0090e8:	28420008 	slti	v0,v0,8
9d0090ec:	14400007 	bnez	v0,9d00910c <_svfprintf_r+0x1244>
9d0090f0:	26b50008 	addiu	s5,s5,8
9d0090f4:	02602021 	move	a0,s3
9d0090f8:	02402821 	move	a1,s2
9d0090fc:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d009100:	27a6004c 	addiu	a2,sp,76
9d009104:	1440018a 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d009108:	27b50080 	addiu	s5,sp,128
9d00910c:	26d6fff0 	addiu	s6,s6,-16
9d009110:	2ac30011 	slti	v1,s6,17
9d009114:	1060ffeb 	beqz	v1,9d0090c4 <_svfprintf_r+0x11fc>
9d009118:	8fa20054 	lw	v0,84(sp)
9d00911c:	aeb60004 	sw	s6,4(s5)
9d009120:	0056b021 	addu	s6,v0,s6
9d009124:	8fa20050 	lw	v0,80(sp)
9d009128:	3c059d03 	lui	a1,0x9d03
9d00912c:	24a5bfb8 	addiu	a1,a1,-16456
9d009130:	24420001 	addiu	v0,v0,1
9d009134:	aea50000 	sw	a1,0(s5)
9d009138:	afa20050 	sw	v0,80(sp)
9d00913c:	28420008 	slti	v0,v0,8
9d009140:	afb60054 	sw	s6,84(sp)
9d009144:	14400007 	bnez	v0,9d009164 <_svfprintf_r+0x129c>
9d009148:	26b50008 	addiu	s5,s5,8
9d00914c:	02602021 	move	a0,s3
9d009150:	02402821 	move	a1,s2
9d009154:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d009158:	27a6004c 	addiu	a2,sp,76
9d00915c:	14400174 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d009160:	27b50080 	addiu	s5,sp,128
9d009164:	8faa00c8 	lw	t2,200(sp)
9d009168:	8fa20054 	lw	v0,84(sp)
9d00916c:	aeb40000 	sw	s4,0(s5)
9d009170:	aeaa0004 	sw	t2,4(s5)
9d009174:	0b402577 	j	9d0095dc <_svfprintf_r+0x1714>
9d009178:	004a1021 	addu	v0,v0,t2
9d00917c:	028c6021 	addu	t4,s4,t4
9d009180:	01941023 	subu	v0,t4,s4
9d009184:	02c2b82a 	slt	s7,s6,v0
9d009188:	02d7100b 	movn	v0,s6,s7
9d00918c:	afac00d8 	sw	t4,216(sp)
9d009190:	18400011 	blez	v0,9d0091d8 <_svfprintf_r+0x1310>
9d009194:	0040b821 	move	s7,v0
9d009198:	aea20004 	sw	v0,4(s5)
9d00919c:	01024021 	addu	t0,t0,v0
9d0091a0:	8fa20050 	lw	v0,80(sp)
9d0091a4:	aeb40000 	sw	s4,0(s5)
9d0091a8:	afa80054 	sw	t0,84(sp)
9d0091ac:	24420001 	addiu	v0,v0,1
9d0091b0:	afa20050 	sw	v0,80(sp)
9d0091b4:	28420008 	slti	v0,v0,8
9d0091b8:	14400007 	bnez	v0,9d0091d8 <_svfprintf_r+0x1310>
9d0091bc:	26b50008 	addiu	s5,s5,8
9d0091c0:	02602021 	move	a0,s3
9d0091c4:	02402821 	move	a1,s2
9d0091c8:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d0091cc:	27a6004c 	addiu	a2,sp,76
9d0091d0:	14400157 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d0091d4:	27b50080 	addiu	s5,sp,128
9d0091d8:	2ae20000 	slti	v0,s7,0
9d0091dc:	0002b80b 	movn	s7,zero,v0
9d0091e0:	02d7b823 	subu	s7,s6,s7
9d0091e4:	1ee00018 	bgtz	s7,9d009248 <_svfprintf_r+0x1380>
9d0091e8:	24030010 	li	v1,16
9d0091ec:	0b4024a8 	j	9d0092a0 <_svfprintf_r+0x13d8>
9d0091f0:	8fa20030 	lw	v0,48(sp)
9d0091f4:	3c049d03 	lui	a0,0x9d03
9d0091f8:	24420010 	addiu	v0,v0,16
9d0091fc:	2484bfb8 	addiu	a0,a0,-16456
9d009200:	aea40000 	sw	a0,0(s5)
9d009204:	aea30004 	sw	v1,4(s5)
9d009208:	afa20054 	sw	v0,84(sp)
9d00920c:	8fa20050 	lw	v0,80(sp)
9d009210:	24420001 	addiu	v0,v0,1
9d009214:	afa20050 	sw	v0,80(sp)
9d009218:	28420008 	slti	v0,v0,8
9d00921c:	14400009 	bnez	v0,9d009244 <_svfprintf_r+0x137c>
9d009220:	26b50008 	addiu	s5,s5,8
9d009224:	02602021 	move	a0,s3
9d009228:	02402821 	move	a1,s2
9d00922c:	27a6004c 	addiu	a2,sp,76
9d009230:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d009234:	afa300fc 	sw	v1,252(sp)
9d009238:	1440013d 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d00923c:	8fa300fc 	lw	v1,252(sp)
9d009240:	27b50080 	addiu	s5,sp,128
9d009244:	26f7fff0 	addiu	s7,s7,-16
9d009248:	2ae40011 	slti	a0,s7,17
9d00924c:	1080ffe9 	beqz	a0,9d0091f4 <_svfprintf_r+0x132c>
9d009250:	8fa20054 	lw	v0,84(sp)
9d009254:	aeb70004 	sw	s7,4(s5)
9d009258:	0057b821 	addu	s7,v0,s7
9d00925c:	8fa20050 	lw	v0,80(sp)
9d009260:	3c059d03 	lui	a1,0x9d03
9d009264:	24a5bfb8 	addiu	a1,a1,-16456
9d009268:	24420001 	addiu	v0,v0,1
9d00926c:	aea50000 	sw	a1,0(s5)
9d009270:	afa20050 	sw	v0,80(sp)
9d009274:	28420008 	slti	v0,v0,8
9d009278:	afb70054 	sw	s7,84(sp)
9d00927c:	14400007 	bnez	v0,9d00929c <_svfprintf_r+0x13d4>
9d009280:	26b50008 	addiu	s5,s5,8
9d009284:	02602021 	move	a0,s3
9d009288:	02402821 	move	a1,s2
9d00928c:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d009290:	27a6004c 	addiu	a2,sp,76
9d009294:	14400126 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d009298:	27b50080 	addiu	s5,sp,128
9d00929c:	8fa20030 	lw	v0,48(sp)
9d0092a0:	8faa00c8 	lw	t2,200(sp)
9d0092a4:	004a102a 	slt	v0,v0,t2
9d0092a8:	14400005 	bnez	v0,9d0092c0 <_svfprintf_r+0x13f8>
9d0092ac:	8fa200dc 	lw	v0,220(sp)
9d0092b0:	32020001 	andi	v0,s0,0x1
9d0092b4:	10400016 	beqz	v0,9d009310 <_svfprintf_r+0x1448>
9d0092b8:	8fa400d8 	lw	a0,216(sp)
9d0092bc:	8fa200dc 	lw	v0,220(sp)
9d0092c0:	8fa300dc 	lw	v1,220(sp)
9d0092c4:	8fac00e0 	lw	t4,224(sp)
9d0092c8:	aea20004 	sw	v0,4(s5)
9d0092cc:	8fa20054 	lw	v0,84(sp)
9d0092d0:	aeac0000 	sw	t4,0(s5)
9d0092d4:	00431021 	addu	v0,v0,v1
9d0092d8:	afa20054 	sw	v0,84(sp)
9d0092dc:	8fa20050 	lw	v0,80(sp)
9d0092e0:	24420001 	addiu	v0,v0,1
9d0092e4:	afa20050 	sw	v0,80(sp)
9d0092e8:	28420008 	slti	v0,v0,8
9d0092ec:	14400007 	bnez	v0,9d00930c <_svfprintf_r+0x1444>
9d0092f0:	26b50008 	addiu	s5,s5,8
9d0092f4:	02602021 	move	a0,s3
9d0092f8:	02402821 	move	a1,s2
9d0092fc:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d009300:	27a6004c 	addiu	a2,sp,76
9d009304:	1440010a 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d009308:	27b50080 	addiu	s5,sp,128
9d00930c:	8fa400d8 	lw	a0,216(sp)
9d009310:	8fa20030 	lw	v0,48(sp)
9d009314:	8fa500c8 	lw	a1,200(sp)
9d009318:	0296b021 	addu	s6,s4,s6
9d00931c:	00961823 	subu	v1,a0,s6
9d009320:	00a21023 	subu	v0,a1,v0
9d009324:	0043b82a 	slt	s7,v0,v1
9d009328:	0077100a 	movz	v0,v1,s7
9d00932c:	18400012 	blez	v0,9d009378 <_svfprintf_r+0x14b0>
9d009330:	0040b821 	move	s7,v0
9d009334:	aea20004 	sw	v0,4(s5)
9d009338:	8fa20054 	lw	v0,84(sp)
9d00933c:	aeb60000 	sw	s6,0(s5)
9d009340:	00571021 	addu	v0,v0,s7
9d009344:	afa20054 	sw	v0,84(sp)
9d009348:	8fa20050 	lw	v0,80(sp)
9d00934c:	24420001 	addiu	v0,v0,1
9d009350:	afa20050 	sw	v0,80(sp)
9d009354:	28420008 	slti	v0,v0,8
9d009358:	14400007 	bnez	v0,9d009378 <_svfprintf_r+0x14b0>
9d00935c:	26b50008 	addiu	s5,s5,8
9d009360:	02602021 	move	a0,s3
9d009364:	02402821 	move	a1,s2
9d009368:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d00936c:	27a6004c 	addiu	a2,sp,76
9d009370:	144000ef 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d009374:	27b50080 	addiu	s5,sp,128
9d009378:	2af40000 	slti	s4,s7,0
9d00937c:	0014b80b 	movn	s7,zero,s4
9d009380:	8faa00c8 	lw	t2,200(sp)
9d009384:	8fb40030 	lw	s4,48(sp)
9d009388:	0154a023 	subu	s4,t2,s4
9d00938c:	0297a023 	subu	s4,s4,s7
9d009390:	1e800016 	bgtz	s4,9d0093ec <_svfprintf_r+0x1524>
9d009394:	24160010 	li	s6,16
9d009398:	0b402585 	j	9d009614 <_svfprintf_r+0x174c>
9d00939c:	32100004 	andi	s0,s0,0x4
9d0093a0:	3c0c9d03 	lui	t4,0x9d03
9d0093a4:	24420010 	addiu	v0,v0,16
9d0093a8:	258cbfb8 	addiu	t4,t4,-16456
9d0093ac:	aeac0000 	sw	t4,0(s5)
9d0093b0:	aeb60004 	sw	s6,4(s5)
9d0093b4:	afa20054 	sw	v0,84(sp)
9d0093b8:	8fa20050 	lw	v0,80(sp)
9d0093bc:	24420001 	addiu	v0,v0,1
9d0093c0:	afa20050 	sw	v0,80(sp)
9d0093c4:	28420008 	slti	v0,v0,8
9d0093c8:	14400007 	bnez	v0,9d0093e8 <_svfprintf_r+0x1520>
9d0093cc:	26b50008 	addiu	s5,s5,8
9d0093d0:	02602021 	move	a0,s3
9d0093d4:	02402821 	move	a1,s2
9d0093d8:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d0093dc:	27a6004c 	addiu	a2,sp,76
9d0093e0:	144000d3 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d0093e4:	27b50080 	addiu	s5,sp,128
9d0093e8:	2694fff0 	addiu	s4,s4,-16
9d0093ec:	2a830011 	slti	v1,s4,17
9d0093f0:	1060ffeb 	beqz	v1,9d0093a0 <_svfprintf_r+0x14d8>
9d0093f4:	8fa20054 	lw	v0,84(sp)
9d0093f8:	3c039d03 	lui	v1,0x9d03
9d0093fc:	2463bfb8 	addiu	v1,v1,-16456
9d009400:	aea30000 	sw	v1,0(s5)
9d009404:	aeb40004 	sw	s4,4(s5)
9d009408:	0054a021 	addu	s4,v0,s4
9d00940c:	0b402578 	j	9d0095e0 <_svfprintf_r+0x1718>
9d009410:	afb40054 	sw	s4,84(sp)
9d009414:	28820002 	slti	v0,a0,2
9d009418:	10400004 	beqz	v0,9d00942c <_svfprintf_r+0x1564>
9d00941c:	24020001 	li	v0,1
9d009420:	32020001 	andi	v0,s0,0x1
9d009424:	10400057 	beqz	v0,9d009584 <_svfprintf_r+0x16bc>
9d009428:	24020001 	li	v0,1
9d00942c:	aea20004 	sw	v0,4(s5)
9d009430:	8fa20050 	lw	v0,80(sp)
9d009434:	aeb40000 	sw	s4,0(s5)
9d009438:	25080001 	addiu	t0,t0,1
9d00943c:	24420001 	addiu	v0,v0,1
9d009440:	afa20050 	sw	v0,80(sp)
9d009444:	28420008 	slti	v0,v0,8
9d009448:	afa80054 	sw	t0,84(sp)
9d00944c:	14400007 	bnez	v0,9d00946c <_svfprintf_r+0x15a4>
9d009450:	26b50008 	addiu	s5,s5,8
9d009454:	02602021 	move	a0,s3
9d009458:	02402821 	move	a1,s2
9d00945c:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d009460:	27a6004c 	addiu	a2,sp,76
9d009464:	144000b2 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d009468:	27b50080 	addiu	s5,sp,128
9d00946c:	8faa00dc 	lw	t2,220(sp)
9d009470:	8fa20054 	lw	v0,84(sp)
9d009474:	8fa500e0 	lw	a1,224(sp)
9d009478:	aeaa0004 	sw	t2,4(s5)
9d00947c:	004a1021 	addu	v0,v0,t2
9d009480:	aea50000 	sw	a1,0(s5)
9d009484:	afa20054 	sw	v0,84(sp)
9d009488:	8fa20050 	lw	v0,80(sp)
9d00948c:	24420001 	addiu	v0,v0,1
9d009490:	afa20050 	sw	v0,80(sp)
9d009494:	28420008 	slti	v0,v0,8
9d009498:	14400007 	bnez	v0,9d0094b8 <_svfprintf_r+0x15f0>
9d00949c:	26b50008 	addiu	s5,s5,8
9d0094a0:	02602021 	move	a0,s3
9d0094a4:	02402821 	move	a1,s2
9d0094a8:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d0094ac:	27a6004c 	addiu	a2,sp,76
9d0094b0:	1440009f 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d0094b4:	27b50080 	addiu	s5,sp,128
9d0094b8:	8fa300d0 	lw	v1,208(sp)
9d0094bc:	8fa200d4 	lw	v0,212(sp)
9d0094c0:	00003021 	move	a2,zero
9d0094c4:	00602021 	move	a0,v1
9d0094c8:	00402821 	move	a1,v0
9d0094cc:	0f4032ce 	jal	9d00cb38 <__eqdf2>
9d0094d0:	00003821 	move	a3,zero
9d0094d4:	8fac00c8 	lw	t4,200(sp)
9d0094d8:	10400008 	beqz	v0,9d0094fc <_svfprintf_r+0x1634>
9d0094dc:	2583ffff 	addiu	v1,t4,-1
9d0094e0:	26940001 	addiu	s4,s4,1
9d0094e4:	aeb40000 	sw	s4,0(s5)
9d0094e8:	8fb40054 	lw	s4,84(sp)
9d0094ec:	aea30004 	sw	v1,4(s5)
9d0094f0:	02831821 	addu	v1,s4,v1
9d0094f4:	0b402565 	j	9d009594 <_svfprintf_r+0x16cc>
9d0094f8:	afa30054 	sw	v1,84(sp)
9d0094fc:	0060a021 	move	s4,v1
9d009500:	1c600016 	bgtz	v1,9d00955c <_svfprintf_r+0x1694>
9d009504:	24160010 	li	s6,16
9d009508:	0b402572 	j	9d0095c8 <_svfprintf_r+0x1700>
9d00950c:	27a2003c 	addiu	v0,sp,60
9d009510:	3c039d03 	lui	v1,0x9d03
9d009514:	24420010 	addiu	v0,v0,16
9d009518:	2463bfb8 	addiu	v1,v1,-16456
9d00951c:	aea30000 	sw	v1,0(s5)
9d009520:	aeb60004 	sw	s6,4(s5)
9d009524:	afa20054 	sw	v0,84(sp)
9d009528:	8fa20050 	lw	v0,80(sp)
9d00952c:	24420001 	addiu	v0,v0,1
9d009530:	afa20050 	sw	v0,80(sp)
9d009534:	28420008 	slti	v0,v0,8
9d009538:	14400007 	bnez	v0,9d009558 <_svfprintf_r+0x1690>
9d00953c:	26b50008 	addiu	s5,s5,8
9d009540:	02602021 	move	a0,s3
9d009544:	02402821 	move	a1,s2
9d009548:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d00954c:	27a6004c 	addiu	a2,sp,76
9d009550:	14400077 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d009554:	27b50080 	addiu	s5,sp,128
9d009558:	2694fff0 	addiu	s4,s4,-16
9d00955c:	2a830011 	slti	v1,s4,17
9d009560:	1060ffeb 	beqz	v1,9d009510 <_svfprintf_r+0x1648>
9d009564:	8fa20054 	lw	v0,84(sp)
9d009568:	3c049d03 	lui	a0,0x9d03
9d00956c:	aeb40004 	sw	s4,4(s5)
9d009570:	2484bfb8 	addiu	a0,a0,-16456
9d009574:	0054a021 	addu	s4,v0,s4
9d009578:	aea40000 	sw	a0,0(s5)
9d00957c:	0b402565 	j	9d009594 <_svfprintf_r+0x16cc>
9d009580:	afb40054 	sw	s4,84(sp)
9d009584:	25080001 	addiu	t0,t0,1
9d009588:	aeb40000 	sw	s4,0(s5)
9d00958c:	aea20004 	sw	v0,4(s5)
9d009590:	afa80054 	sw	t0,84(sp)
9d009594:	8fa20050 	lw	v0,80(sp)
9d009598:	24420001 	addiu	v0,v0,1
9d00959c:	afa20050 	sw	v0,80(sp)
9d0095a0:	28420008 	slti	v0,v0,8
9d0095a4:	14400007 	bnez	v0,9d0095c4 <_svfprintf_r+0x16fc>
9d0095a8:	26b50008 	addiu	s5,s5,8
9d0095ac:	02602021 	move	a0,s3
9d0095b0:	02402821 	move	a1,s2
9d0095b4:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d0095b8:	27a6004c 	addiu	a2,sp,76
9d0095bc:	1440005c 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d0095c0:	27b50080 	addiu	s5,sp,128
9d0095c4:	27a2003c 	addiu	v0,sp,60
9d0095c8:	8fa500e8 	lw	a1,232(sp)
9d0095cc:	aea20000 	sw	v0,0(s5)
9d0095d0:	8fa20054 	lw	v0,84(sp)
9d0095d4:	aea50004 	sw	a1,4(s5)
9d0095d8:	00451021 	addu	v0,v0,a1
9d0095dc:	afa20054 	sw	v0,84(sp)
9d0095e0:	8fa20050 	lw	v0,80(sp)
9d0095e4:	24420001 	addiu	v0,v0,1
9d0095e8:	afa20050 	sw	v0,80(sp)
9d0095ec:	28420008 	slti	v0,v0,8
9d0095f0:	14400007 	bnez	v0,9d009610 <_svfprintf_r+0x1748>
9d0095f4:	26b50008 	addiu	s5,s5,8
9d0095f8:	02602021 	move	a0,s3
9d0095fc:	02402821 	move	a1,s2
9d009600:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d009604:	27a6004c 	addiu	a2,sp,76
9d009608:	14400049 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d00960c:	27b50080 	addiu	s5,sp,128
9d009610:	32100004 	andi	s0,s0,0x4
9d009614:	1200002f 	beqz	s0,9d0096d4 <_svfprintf_r+0x180c>
9d009618:	8fa400c4 	lw	a0,196(sp)
9d00961c:	8faa00c4 	lw	t2,196(sp)
9d009620:	015e8023 	subu	s0,t2,s8
9d009624:	1e000016 	bgtz	s0,9d009680 <_svfprintf_r+0x17b8>
9d009628:	24140010 	li	s4,16
9d00962c:	0b4025b6 	j	9d0096d8 <_svfprintf_r+0x1810>
9d009630:	8fa500cc 	lw	a1,204(sp)
9d009634:	3c0c9d03 	lui	t4,0x9d03
9d009638:	24420010 	addiu	v0,v0,16
9d00963c:	258cbfc8 	addiu	t4,t4,-16440
9d009640:	aeac0000 	sw	t4,0(s5)
9d009644:	aeb40004 	sw	s4,4(s5)
9d009648:	afa20054 	sw	v0,84(sp)
9d00964c:	8fa20050 	lw	v0,80(sp)
9d009650:	24420001 	addiu	v0,v0,1
9d009654:	afa20050 	sw	v0,80(sp)
9d009658:	28420008 	slti	v0,v0,8
9d00965c:	14400007 	bnez	v0,9d00967c <_svfprintf_r+0x17b4>
9d009660:	26b50008 	addiu	s5,s5,8
9d009664:	02602021 	move	a0,s3
9d009668:	02402821 	move	a1,s2
9d00966c:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d009670:	27a6004c 	addiu	a2,sp,76
9d009674:	1440002e 	bnez	v0,9d009730 <_svfprintf_r+0x1868>
9d009678:	27b50080 	addiu	s5,sp,128
9d00967c:	2610fff0 	addiu	s0,s0,-16
9d009680:	2a030011 	slti	v1,s0,17
9d009684:	1060ffeb 	beqz	v1,9d009634 <_svfprintf_r+0x176c>
9d009688:	8fa20054 	lw	v0,84(sp)
9d00968c:	aeb00004 	sw	s0,4(s5)
9d009690:	00508021 	addu	s0,v0,s0
9d009694:	8fa20050 	lw	v0,80(sp)
9d009698:	3c039d03 	lui	v1,0x9d03
9d00969c:	2463bfc8 	addiu	v1,v1,-16440
9d0096a0:	24420001 	addiu	v0,v0,1
9d0096a4:	aea30000 	sw	v1,0(s5)
9d0096a8:	afa20050 	sw	v0,80(sp)
9d0096ac:	28420008 	slti	v0,v0,8
9d0096b0:	14400007 	bnez	v0,9d0096d0 <_svfprintf_r+0x1808>
9d0096b4:	afb00054 	sw	s0,84(sp)
9d0096b8:	02602021 	move	a0,s3
9d0096bc:	02402821 	move	a1,s2
9d0096c0:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d0096c4:	27a6004c 	addiu	a2,sp,76
9d0096c8:	5440001a 	bnezl	v0,9d009734 <_svfprintf_r+0x186c>
9d0096cc:	9643000c 	lhu	v1,12(s2)
9d0096d0:	8fa400c4 	lw	a0,196(sp)
9d0096d4:	8fa500cc 	lw	a1,204(sp)
9d0096d8:	03c4102a 	slt	v0,s8,a0
9d0096dc:	0082f00b 	movn	s8,a0,v0
9d0096e0:	8fa20054 	lw	v0,84(sp)
9d0096e4:	00be2821 	addu	a1,a1,s8
9d0096e8:	10400007 	beqz	v0,9d009708 <_svfprintf_r+0x1840>
9d0096ec:	afa500cc 	sw	a1,204(sp)
9d0096f0:	02602021 	move	a0,s3
9d0096f4:	02402821 	move	a1,s2
9d0096f8:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d0096fc:	27a6004c 	addiu	a2,sp,76
9d009700:	5440000c 	bnezl	v0,9d009734 <_svfprintf_r+0x186c>
9d009704:	9643000c 	lhu	v1,12(s2)
9d009708:	afa00050 	sw	zero,80(sp)
9d00970c:	0b401fe6 	j	9d007f98 <_svfprintf_r+0xd0>
9d009710:	27b50080 	addiu	s5,sp,128
9d009714:	8fa20054 	lw	v0,84(sp)
9d009718:	50400006 	beqzl	v0,9d009734 <_svfprintf_r+0x186c>
9d00971c:	9643000c 	lhu	v1,12(s2)
9d009720:	02602021 	move	a0,s3
9d009724:	02402821 	move	a1,s2
9d009728:	0f402eeb 	jal	9d00bbac <__ssprint_r>
9d00972c:	27a6004c 	addiu	a2,sp,76
9d009730:	9643000c 	lhu	v1,12(s2)
9d009734:	8faa00cc 	lw	t2,204(sp)
9d009738:	2402ffff 	li	v0,-1
9d00973c:	30630040 	andi	v1,v1,0x40
9d009740:	0043500b 	movn	t2,v0,v1
9d009744:	afaa00cc 	sw	t2,204(sp)
9d009748:	8fbf0124 	lw	ra,292(sp)
9d00974c:	8fa200cc 	lw	v0,204(sp)
9d009750:	8fbe0120 	lw	s8,288(sp)
9d009754:	8fb7011c 	lw	s7,284(sp)
9d009758:	8fb60118 	lw	s6,280(sp)
9d00975c:	8fb50114 	lw	s5,276(sp)
9d009760:	8fb40110 	lw	s4,272(sp)
9d009764:	8fb3010c 	lw	s3,268(sp)
9d009768:	8fb20108 	lw	s2,264(sp)
9d00976c:	8fb10104 	lw	s1,260(sp)
9d009770:	8fb00100 	lw	s0,256(sp)
9d009774:	03e00008 	jr	ra
9d009778:	27bd0128 	addiu	sp,sp,296

9d00977c <quorem>:
9d00977c:	27bdffd0 	addiu	sp,sp,-48
9d009780:	afb00010 	sw	s0,16(sp)
9d009784:	8ca30010 	lw	v1,16(a1)
9d009788:	00808021 	move	s0,a0
9d00978c:	8c840010 	lw	a0,16(a0)
9d009790:	afbf002c 	sw	ra,44(sp)
9d009794:	afb60028 	sw	s6,40(sp)
9d009798:	0083202a 	slt	a0,a0,v1
9d00979c:	afb50024 	sw	s5,36(sp)
9d0097a0:	afb40020 	sw	s4,32(sp)
9d0097a4:	afb3001c 	sw	s3,28(sp)
9d0097a8:	afb20018 	sw	s2,24(sp)
9d0097ac:	afb10014 	sw	s1,20(sp)
9d0097b0:	14800069 	bnez	a0,9d009958 <quorem+0x1dc>
9d0097b4:	00001021 	move	v0,zero
9d0097b8:	2471ffff 	addiu	s1,v1,-1
9d0097bc:	24630003 	addiu	v1,v1,3
9d0097c0:	00031880 	sll	v1,v1,0x2
9d0097c4:	00a31021 	addu	v0,a1,v1
9d0097c8:	8c520004 	lw	s2,4(v0)
9d0097cc:	02031821 	addu	v1,s0,v1
9d0097d0:	24560004 	addiu	s6,v0,4
9d0097d4:	8c620004 	lw	v0,4(v1)
9d0097d8:	26520001 	addiu	s2,s2,1
9d0097dc:	24b30014 	addiu	s3,a1,20
9d0097e0:	0052001b 	divu	zero,v0,s2
9d0097e4:	024001f4 	teq	s2,zero,0x7
9d0097e8:	26140014 	addiu	s4,s0,20
9d0097ec:	00009012 	mflo	s2
9d0097f0:	1240002e 	beqz	s2,9d0098ac <quorem+0x130>
9d0097f4:	0000a812 	mflo	s5
9d0097f8:	02601821 	move	v1,s3
9d0097fc:	02801021 	move	v0,s4
9d009800:	00003021 	move	a2,zero
9d009804:	8c6b0000 	lw	t3,0(v1)
9d009808:	8c480000 	lw	t0,0(v0)
9d00980c:	24630004 	addiu	v1,v1,4
9d009810:	316affff 	andi	t2,t3,0xffff
9d009814:	724a3802 	mul	a3,s2,t2
9d009818:	000b4c02 	srl	t1,t3,0x10
9d00981c:	00e65021 	addu	t2,a3,a2
9d009820:	72493802 	mul	a3,s2,t1
9d009824:	000a3402 	srl	a2,t2,0x10
9d009828:	314affff 	andi	t2,t2,0xffff
9d00982c:	00e64821 	addu	t1,a3,a2
9d009830:	3107ffff 	andi	a3,t0,0xffff
9d009834:	00872021 	addu	a0,a0,a3
9d009838:	008a3823 	subu	a3,a0,t2
9d00983c:	00093402 	srl	a2,t1,0x10
9d009840:	00084402 	srl	t0,t0,0x10
9d009844:	3129ffff 	andi	t1,t1,0xffff
9d009848:	00072403 	sra	a0,a3,0x10
9d00984c:	01094023 	subu	t0,t0,t1
9d009850:	01044021 	addu	t0,t0,a0
9d009854:	00082403 	sra	a0,t0,0x10
9d009858:	30e7ffff 	andi	a3,a3,0xffff
9d00985c:	00084400 	sll	t0,t0,0x10
9d009860:	01073825 	or	a3,t0,a3
9d009864:	ac470000 	sw	a3,0(v0)
9d009868:	02c3382b 	sltu	a3,s6,v1
9d00986c:	10e0ffe5 	beqz	a3,9d009804 <quorem+0x88>
9d009870:	24420004 	addiu	v0,v0,4
9d009874:	26220004 	addiu	v0,s1,4
9d009878:	00021080 	sll	v0,v0,0x2
9d00987c:	02021021 	addu	v0,s0,v0
9d009880:	8c430004 	lw	v1,4(v0)
9d009884:	14600009 	bnez	v1,9d0098ac <quorem+0x130>
9d009888:	24420004 	addiu	v0,v0,4
9d00988c:	2442fffc 	addiu	v0,v0,-4
9d009890:	0282182b 	sltu	v1,s4,v0
9d009894:	50600005 	beqzl	v1,9d0098ac <quorem+0x130>
9d009898:	ae110010 	sw	s1,16(s0)
9d00989c:	8c430000 	lw	v1,0(v0)
9d0098a0:	5060fffa 	beqzl	v1,9d00988c <quorem+0x110>
9d0098a4:	2631ffff 	addiu	s1,s1,-1
9d0098a8:	ae110010 	sw	s1,16(s0)
9d0098ac:	0f402e02 	jal	9d00b808 <__mcmp>
9d0098b0:	02002021 	move	a0,s0
9d0098b4:	04400027 	bltz	v0,9d009954 <quorem+0x1d8>
9d0098b8:	02801021 	move	v0,s4
9d0098bc:	26550001 	addiu	s5,s2,1
9d0098c0:	00001821 	move	v1,zero
9d0098c4:	8e660000 	lw	a2,0(s3)
9d0098c8:	8c450000 	lw	a1,0(v0)
9d0098cc:	26730004 	addiu	s3,s3,4
9d0098d0:	30c4ffff 	andi	a0,a2,0xffff
9d0098d4:	30a7ffff 	andi	a3,a1,0xffff
9d0098d8:	00e42023 	subu	a0,a3,a0
9d0098dc:	00832021 	addu	a0,a0,v1
9d0098e0:	00052c02 	srl	a1,a1,0x10
9d0098e4:	00063402 	srl	a2,a2,0x10
9d0098e8:	00041c03 	sra	v1,a0,0x10
9d0098ec:	00a62823 	subu	a1,a1,a2
9d0098f0:	00a32821 	addu	a1,a1,v1
9d0098f4:	00051c03 	sra	v1,a1,0x10
9d0098f8:	3084ffff 	andi	a0,a0,0xffff
9d0098fc:	00052c00 	sll	a1,a1,0x10
9d009900:	00a42025 	or	a0,a1,a0
9d009904:	ac440000 	sw	a0,0(v0)
9d009908:	02d3202b 	sltu	a0,s6,s3
9d00990c:	1080ffed 	beqz	a0,9d0098c4 <quorem+0x148>
9d009910:	24420004 	addiu	v0,v0,4
9d009914:	26220004 	addiu	v0,s1,4
9d009918:	00021080 	sll	v0,v0,0x2
9d00991c:	02021021 	addu	v0,s0,v0
9d009920:	8c430004 	lw	v1,4(v0)
9d009924:	10600003 	beqz	v1,9d009934 <quorem+0x1b8>
9d009928:	24420004 	addiu	v0,v0,4
9d00992c:	0b402656 	j	9d009958 <quorem+0x1dc>
9d009930:	02a01021 	move	v0,s5
9d009934:	2442fffc 	addiu	v0,v0,-4
9d009938:	0282182b 	sltu	v1,s4,v0
9d00993c:	50600005 	beqzl	v1,9d009954 <quorem+0x1d8>
9d009940:	ae110010 	sw	s1,16(s0)
9d009944:	8c430000 	lw	v1,0(v0)
9d009948:	5060fffa 	beqzl	v1,9d009934 <quorem+0x1b8>
9d00994c:	2631ffff 	addiu	s1,s1,-1
9d009950:	ae110010 	sw	s1,16(s0)
9d009954:	02a01021 	move	v0,s5
9d009958:	8fbf002c 	lw	ra,44(sp)
9d00995c:	8fb60028 	lw	s6,40(sp)
9d009960:	8fb50024 	lw	s5,36(sp)
9d009964:	8fb40020 	lw	s4,32(sp)
9d009968:	8fb3001c 	lw	s3,28(sp)
9d00996c:	8fb20018 	lw	s2,24(sp)
9d009970:	8fb10014 	lw	s1,20(sp)
9d009974:	8fb00010 	lw	s0,16(sp)
9d009978:	03e00008 	jr	ra
9d00997c:	27bd0030 	addiu	sp,sp,48

9d009980 <_dtoa_r>:
9d009980:	8c850040 	lw	a1,64(a0)
9d009984:	27bdff58 	addiu	sp,sp,-168
9d009988:	afb60098 	sw	s6,152(sp)
9d00998c:	afb20088 	sw	s2,136(sp)
9d009990:	afb10084 	sw	s1,132(sp)
9d009994:	afb00080 	sw	s0,128(sp)
9d009998:	afbf00a4 	sw	ra,164(sp)
9d00999c:	afbe00a0 	sw	s8,160(sp)
9d0099a0:	afb7009c 	sw	s7,156(sp)
9d0099a4:	afb50094 	sw	s5,148(sp)
9d0099a8:	afb40090 	sw	s4,144(sp)
9d0099ac:	afb3008c 	sw	s3,140(sp)
9d0099b0:	00808821 	move	s1,a0
9d0099b4:	8fb200c4 	lw	s2,196(sp)
9d0099b8:	00c0b021 	move	s6,a2
9d0099bc:	10a00008 	beqz	a1,9d0099e0 <_dtoa_r+0x60>
9d0099c0:	00e08021 	move	s0,a3
9d0099c4:	8c820044 	lw	v0,68(a0)
9d0099c8:	24030001 	li	v1,1
9d0099cc:	aca20004 	sw	v0,4(a1)
9d0099d0:	00431004 	sllv	v0,v1,v0
9d0099d4:	0f402c55 	jal	9d00b154 <_Bfree>
9d0099d8:	aca20008 	sw	v0,8(a1)
9d0099dc:	ae200040 	sw	zero,64(s1)
9d0099e0:	06030004 	bgezl	s0,9d0099f4 <_dtoa_r+0x74>
9d0099e4:	ae400000 	sw	zero,0(s2)
9d0099e8:	24020001 	li	v0,1
9d0099ec:	ae420000 	sw	v0,0(s2)
9d0099f0:	7e10f000 	ext	s0,s0,0x0,0x1f
9d0099f4:	3c027ff0 	lui	v0,0x7ff0
9d0099f8:	02021824 	and	v1,s0,v0
9d0099fc:	14620015 	bne	v1,v0,9d009a54 <_dtoa_r+0xd4>
9d009a00:	02c02021 	move	a0,s6
9d009a04:	8fa300c0 	lw	v1,192(sp)
9d009a08:	2402270f 	li	v0,9999
9d009a0c:	16c00004 	bnez	s6,9d009a20 <_dtoa_r+0xa0>
9d009a10:	ac620000 	sw	v0,0(v1)
9d009a14:	7e109800 	ext	s0,s0,0x0,0x14
9d009a18:	52000004 	beqzl	s0,9d009a2c <_dtoa_r+0xac>
9d009a1c:	3c029d03 	lui	v0,0x9d03
9d009a20:	3c029d03 	lui	v0,0x9d03
9d009a24:	0b40268c 	j	9d009a30 <_dtoa_r+0xb0>
9d009a28:	2442bfe4 	addiu	v0,v0,-16412
9d009a2c:	2442bfd8 	addiu	v0,v0,-16424
9d009a30:	8fa400c8 	lw	a0,200(sp)
9d009a34:	1080049f 	beqz	a0,9d00acb4 <_dtoa_r+0x1334>
9d009a38:	24430003 	addiu	v1,v0,3
9d009a3c:	80450003 	lb	a1,3(v0)
9d009a40:	24440008 	addiu	a0,v0,8
9d009a44:	0085180b 	movn	v1,a0,a1
9d009a48:	8fa500c8 	lw	a1,200(sp)
9d009a4c:	0b402b2d 	j	9d00acb4 <_dtoa_r+0x1334>
9d009a50:	aca30000 	sw	v1,0(a1)
9d009a54:	02002821 	move	a1,s0
9d009a58:	00003021 	move	a2,zero
9d009a5c:	0f4032ce 	jal	9d00cb38 <__eqdf2>
9d009a60:	00003821 	move	a3,zero
9d009a64:	5440000d 	bnezl	v0,9d009a9c <_dtoa_r+0x11c>
9d009a68:	27a2001c 	addiu	v0,sp,28
9d009a6c:	8fa600c0 	lw	a2,192(sp)
9d009a70:	8fa300c8 	lw	v1,200(sp)
9d009a74:	24020001 	li	v0,1
9d009a78:	acc20000 	sw	v0,0(a2)
9d009a7c:	3c029d03 	lui	v0,0x9d03
9d009a80:	1060048c 	beqz	v1,9d00acb4 <_dtoa_r+0x1334>
9d009a84:	2442be50 	addiu	v0,v0,-16816
9d009a88:	8fa400c8 	lw	a0,200(sp)
9d009a8c:	3c039d03 	lui	v1,0x9d03
9d009a90:	2463be51 	addiu	v1,v1,-16815
9d009a94:	0b402b2d 	j	9d00acb4 <_dtoa_r+0x1334>
9d009a98:	ac830000 	sw	v1,0(a0)
9d009a9c:	afa20010 	sw	v0,16(sp)
9d009aa0:	02202021 	move	a0,s1
9d009aa4:	27a20018 	addiu	v0,sp,24
9d009aa8:	02c03021 	move	a2,s6
9d009aac:	02003821 	move	a3,s0
9d009ab0:	afa20014 	sw	v0,20(sp)
9d009ab4:	0f402e7c 	jal	9d00b9f0 <__d2b>
9d009ab8:	7e1e5500 	ext	s8,s0,0x14,0xb
9d009abc:	13c00009 	beqz	s8,9d009ae4 <_dtoa_r+0x164>
9d009ac0:	0040a021 	move	s4,v0
9d009ac4:	7e139800 	ext	s3,s0,0x0,0x14
9d009ac8:	3c023ff0 	lui	v0,0x3ff0
9d009acc:	02621025 	or	v0,s3,v0
9d009ad0:	afb60050 	sw	s6,80(sp)
9d009ad4:	afa20054 	sw	v0,84(sp)
9d009ad8:	27defc01 	addiu	s8,s8,-1023
9d009adc:	0b4026cf 	j	9d009b3c <_dtoa_r+0x1bc>
9d009ae0:	afa00058 	sw	zero,88(sp)
9d009ae4:	8fa2001c 	lw	v0,28(sp)
9d009ae8:	8fa40018 	lw	a0,24(sp)
9d009aec:	00822021 	addu	a0,a0,v0
9d009af0:	249e0432 	addiu	s8,a0,1074
9d009af4:	2bc20021 	slti	v0,s8,33
9d009af8:	54400007 	bnezl	v0,9d009b18 <_dtoa_r+0x198>
9d009afc:	001e2023 	negu	a0,s8
9d009b00:	24840412 	addiu	a0,a0,1042
9d009b04:	001e1023 	negu	v0,s8
9d009b08:	00962006 	srlv	a0,s6,a0
9d009b0c:	00501004 	sllv	v0,s0,v0
9d009b10:	0b4026c7 	j	9d009b1c <_dtoa_r+0x19c>
9d009b14:	00822025 	or	a0,a0,v0
9d009b18:	00962004 	sllv	a0,s6,a0
9d009b1c:	0f401c2c 	jal	9d0070b0 <__floatunsidf>
9d009b20:	3c13fe10 	lui	s3,0xfe10
9d009b24:	02631821 	addu	v1,s3,v1
9d009b28:	24050001 	li	a1,1
9d009b2c:	afa20050 	sw	v0,80(sp)
9d009b30:	afa30054 	sw	v1,84(sp)
9d009b34:	27defbcd 	addiu	s8,s8,-1075
9d009b38:	afa50058 	sw	a1,88(sp)
9d009b3c:	8fa20054 	lw	v0,84(sp)
9d009b40:	8fa30050 	lw	v1,80(sp)
9d009b44:	00402821 	move	a1,v0
9d009b48:	3c029d03 	lui	v0,0x9d03
9d009b4c:	8c46bfe8 	lw	a2,-16408(v0)
9d009b50:	8c47bfec 	lw	a3,-16404(v0)
9d009b54:	0f40199e 	jal	9d006678 <__subdf3>
9d009b58:	00602021 	move	a0,v1
9d009b5c:	00402021 	move	a0,v0
9d009b60:	3c029d03 	lui	v0,0x9d03
9d009b64:	8c46bff0 	lw	a2,-16400(v0)
9d009b68:	8c47bff4 	lw	a3,-16396(v0)
9d009b6c:	0f401843 	jal	9d00610c <__muldf3>
9d009b70:	00602821 	move	a1,v1
9d009b74:	00402021 	move	a0,v0
9d009b78:	3c029d03 	lui	v0,0x9d03
9d009b7c:	8c46bff8 	lw	a2,-16392(v0)
9d009b80:	8c47bffc 	lw	a3,-16388(v0)
9d009b84:	0f4013c8 	jal	9d004f20 <__adddf3>
9d009b88:	00602821 	move	a1,v1
9d009b8c:	03c02021 	move	a0,s8
9d009b90:	00409021 	move	s2,v0
9d009b94:	0f401c00 	jal	9d007000 <__floatsidf>
9d009b98:	00609821 	move	s3,v1
9d009b9c:	00402021 	move	a0,v0
9d009ba0:	3c029d03 	lui	v0,0x9d03
9d009ba4:	8c46c000 	lw	a2,-16384(v0)
9d009ba8:	8c47c004 	lw	a3,-16380(v0)
9d009bac:	0f401843 	jal	9d00610c <__muldf3>
9d009bb0:	00602821 	move	a1,v1
9d009bb4:	00403021 	move	a2,v0
9d009bb8:	02402021 	move	a0,s2
9d009bbc:	02602821 	move	a1,s3
9d009bc0:	0f4013c8 	jal	9d004f20 <__adddf3>
9d009bc4:	00603821 	move	a3,v1
9d009bc8:	0060a821 	move	s5,v1
9d009bcc:	00401821 	move	v1,v0
9d009bd0:	00409821 	move	s3,v0
9d009bd4:	00602021 	move	a0,v1
9d009bd8:	0f401be0 	jal	9d006f80 <__fixdfsi>
9d009bdc:	02a02821 	move	a1,s5
9d009be0:	02602021 	move	a0,s3
9d009be4:	02a02821 	move	a1,s5
9d009be8:	00003021 	move	a2,zero
9d009bec:	00003821 	move	a3,zero
9d009bf0:	0f4017fa 	jal	9d005fe8 <__ledf2>
9d009bf4:	00409021 	move	s2,v0
9d009bf8:	0441000b 	bgez	v0,9d009c28 <_dtoa_r+0x2a8>
9d009bfc:	24060001 	li	a2,1
9d009c00:	0f401c00 	jal	9d007000 <__floatsidf>
9d009c04:	02402021 	move	a0,s2
9d009c08:	00403021 	move	a2,v0
9d009c0c:	02602021 	move	a0,s3
9d009c10:	02a02821 	move	a1,s5
9d009c14:	0f4032ce 	jal	9d00cb38 <__eqdf2>
9d009c18:	00603821 	move	a3,v1
9d009c1c:	0002102b 	sltu	v0,zero,v0
9d009c20:	02429023 	subu	s2,s2,v0
9d009c24:	24060001 	li	a2,1
9d009c28:	2e420017 	sltiu	v0,s2,23
9d009c2c:	1040000d 	beqz	v0,9d009c64 <_dtoa_r+0x2e4>
9d009c30:	afa6004c 	sw	a2,76(sp)
9d009c34:	3c029d03 	lui	v0,0x9d03
9d009c38:	001218c0 	sll	v1,s2,0x3
9d009c3c:	2442c040 	addiu	v0,v0,-16320
9d009c40:	00621021 	addu	v0,v1,v0
9d009c44:	8c440000 	lw	a0,0(v0)
9d009c48:	8c450004 	lw	a1,4(v0)
9d009c4c:	02c03021 	move	a2,s6
9d009c50:	0f4017b1 	jal	9d005ec4 <__gedf2>
9d009c54:	02003821 	move	a3,s0
9d009c58:	5c400001 	bgtzl	v0,9d009c60 <_dtoa_r+0x2e0>
9d009c5c:	2652ffff 	addiu	s2,s2,-1
9d009c60:	afa0004c 	sw	zero,76(sp)
9d009c64:	8fb70018 	lw	s7,24(sp)
9d009c68:	26f7ffff 	addiu	s7,s7,-1
9d009c6c:	02feb823 	subu	s7,s7,s8
9d009c70:	06e30004 	bgezl	s7,9d009c84 <_dtoa_r+0x304>
9d009c74:	afb70020 	sw	s7,32(sp)
9d009c78:	0017b823 	negu	s7,s7
9d009c7c:	0b402722 	j	9d009c88 <_dtoa_r+0x308>
9d009c80:	afa00020 	sw	zero,32(sp)
9d009c84:	0000b821 	move	s7,zero
9d009c88:	06400006 	bltz	s2,9d009ca4 <_dtoa_r+0x324>
9d009c8c:	8fa20020 	lw	v0,32(sp)
9d009c90:	afb20048 	sw	s2,72(sp)
9d009c94:	0000a821 	move	s5,zero
9d009c98:	00521021 	addu	v0,v0,s2
9d009c9c:	0b40272c 	j	9d009cb0 <_dtoa_r+0x330>
9d009ca0:	afa20020 	sw	v0,32(sp)
9d009ca4:	02f2b823 	subu	s7,s7,s2
9d009ca8:	0012a823 	negu	s5,s2
9d009cac:	afa00048 	sw	zero,72(sp)
9d009cb0:	8fa300b8 	lw	v1,184(sp)
9d009cb4:	2c62000a 	sltiu	v0,v1,10
9d009cb8:	1040001c 	beqz	v0,9d009d2c <_dtoa_r+0x3ac>
9d009cbc:	24130001 	li	s3,1
9d009cc0:	28620006 	slti	v0,v1,6
9d009cc4:	14400003 	bnez	v0,9d009cd4 <_dtoa_r+0x354>
9d009cc8:	2463fffc 	addiu	v1,v1,-4
9d009ccc:	afa300b8 	sw	v1,184(sp)
9d009cd0:	00009821 	move	s3,zero
9d009cd4:	8fa400b8 	lw	a0,184(sp)
9d009cd8:	24020003 	li	v0,3
9d009cdc:	10820023 	beq	a0,v0,9d009d6c <_dtoa_r+0x3ec>
9d009ce0:	28820004 	slti	v0,a0,4
9d009ce4:	10400006 	beqz	v0,9d009d00 <_dtoa_r+0x380>
9d009ce8:	8fa500b8 	lw	a1,184(sp)
9d009cec:	24020002 	li	v0,2
9d009cf0:	14820010 	bne	a0,v0,9d009d34 <_dtoa_r+0x3b4>
9d009cf4:	24030001 	li	v1,1
9d009cf8:	0b402754 	j	9d009d50 <_dtoa_r+0x3d0>
9d009cfc:	afa00040 	sw	zero,64(sp)
9d009d00:	24020004 	li	v0,4
9d009d04:	10a20006 	beq	a1,v0,9d009d20 <_dtoa_r+0x3a0>
9d009d08:	24020005 	li	v0,5
9d009d0c:	14a20009 	bne	a1,v0,9d009d34 <_dtoa_r+0x3b4>
9d009d10:	24030001 	li	v1,1
9d009d14:	24060001 	li	a2,1
9d009d18:	0b40275c 	j	9d009d70 <_dtoa_r+0x3f0>
9d009d1c:	afa60040 	sw	a2,64(sp)
9d009d20:	24020001 	li	v0,1
9d009d24:	0b402754 	j	9d009d50 <_dtoa_r+0x3d0>
9d009d28:	afa20040 	sw	v0,64(sp)
9d009d2c:	afa000b8 	sw	zero,184(sp)
9d009d30:	24030001 	li	v1,1
9d009d34:	2404ffff 	li	a0,-1
9d009d38:	afa30040 	sw	v1,64(sp)
9d009d3c:	afa40044 	sw	a0,68(sp)
9d009d40:	241effff 	li	s8,-1
9d009d44:	24020012 	li	v0,18
9d009d48:	0b402767 	j	9d009d9c <_dtoa_r+0x41c>
9d009d4c:	afa000bc 	sw	zero,188(sp)
9d009d50:	8fa500bc 	lw	a1,188(sp)
9d009d54:	58a0000e 	blezl	a1,9d009d90 <_dtoa_r+0x410>
9d009d58:	24020001 	li	v0,1
9d009d5c:	afa50044 	sw	a1,68(sp)
9d009d60:	00a0f021 	move	s8,a1
9d009d64:	0b402767 	j	9d009d9c <_dtoa_r+0x41c>
9d009d68:	00a01021 	move	v0,a1
9d009d6c:	afa00040 	sw	zero,64(sp)
9d009d70:	8fa600bc 	lw	a2,188(sp)
9d009d74:	02463021 	addu	a2,s2,a2
9d009d78:	24c20001 	addiu	v0,a2,1
9d009d7c:	afa60044 	sw	a2,68(sp)
9d009d80:	1c400006 	bgtz	v0,9d009d9c <_dtoa_r+0x41c>
9d009d84:	0040f021 	move	s8,v0
9d009d88:	0b402767 	j	9d009d9c <_dtoa_r+0x41c>
9d009d8c:	24020001 	li	v0,1
9d009d90:	afa20044 	sw	v0,68(sp)
9d009d94:	241e0001 	li	s8,1
9d009d98:	afa200bc 	sw	v0,188(sp)
9d009d9c:	ae200044 	sw	zero,68(s1)
9d009da0:	0b40276d 	j	9d009db4 <_dtoa_r+0x434>
9d009da4:	24030004 	li	v1,4
9d009da8:	00031840 	sll	v1,v1,0x1
9d009dac:	24840001 	addiu	a0,a0,1
9d009db0:	ae240044 	sw	a0,68(s1)
9d009db4:	24640014 	addiu	a0,v1,20
9d009db8:	0044202b 	sltu	a0,v0,a0
9d009dbc:	5080fffa 	beqzl	a0,9d009da8 <_dtoa_r+0x428>
9d009dc0:	8e240044 	lw	a0,68(s1)
9d009dc4:	8e250044 	lw	a1,68(s1)
9d009dc8:	0f402c2a 	jal	9d00b0a8 <_Balloc>
9d009dcc:	02202021 	move	a0,s1
9d009dd0:	afa2002c 	sw	v0,44(sp)
9d009dd4:	ae220040 	sw	v0,64(s1)
9d009dd8:	2fc2000f 	sltiu	v0,s8,15
9d009ddc:	10400173 	beqz	v0,9d00a3ac <_dtoa_r+0xa2c>
9d009de0:	8fa2001c 	lw	v0,28(sp)
9d009de4:	12600171 	beqz	s3,9d00a3ac <_dtoa_r+0xa2c>
9d009de8:	00000000 	nop
9d009dec:	afb60050 	sw	s6,80(sp)
9d009df0:	1a40003a 	blez	s2,9d009edc <_dtoa_r+0x55c>
9d009df4:	afb00054 	sw	s0,84(sp)
9d009df8:	3244000f 	andi	a0,s2,0xf
9d009dfc:	3c029d03 	lui	v0,0x9d03
9d009e00:	000420c0 	sll	a0,a0,0x3
9d009e04:	2442c040 	addiu	v0,v0,-16320
9d009e08:	00821021 	addu	v0,a0,v0
9d009e0c:	00124103 	sra	t0,s2,0x4
9d009e10:	8c490000 	lw	t1,0(v0)
9d009e14:	8c4b0004 	lw	t3,4(v0)
9d009e18:	31020010 	andi	v0,t0,0x10
9d009e1c:	3c0a9d03 	lui	t2,0x9d03
9d009e20:	10400013 	beqz	v0,9d009e70 <_dtoa_r+0x4f0>
9d009e24:	24130002 	li	s3,2
9d009e28:	2542c108 	addiu	v0,t2,-16120
9d009e2c:	8c460020 	lw	a2,32(v0)
9d009e30:	8c470024 	lw	a3,36(v0)
9d009e34:	3108000f 	andi	t0,t0,0xf
9d009e38:	02c02021 	move	a0,s6
9d009e3c:	02002821 	move	a1,s0
9d009e40:	afa8007c 	sw	t0,124(sp)
9d009e44:	afa90070 	sw	t1,112(sp)
9d009e48:	afaa0078 	sw	t2,120(sp)
9d009e4c:	0f4015f9 	jal	9d0057e4 <__divdf3>
9d009e50:	afab0074 	sw	t3,116(sp)
9d009e54:	8fab0074 	lw	t3,116(sp)
9d009e58:	8faa0078 	lw	t2,120(sp)
9d009e5c:	8fa90070 	lw	t1,112(sp)
9d009e60:	8fa8007c 	lw	t0,124(sp)
9d009e64:	0040b021 	move	s6,v0
9d009e68:	00608021 	move	s0,v1
9d009e6c:	24130003 	li	s3,3
9d009e70:	0b4027ae 	j	9d009eb8 <_dtoa_r+0x538>
9d009e74:	254ac108 	addiu	t2,t2,-16120
9d009e78:	5040000e 	beqzl	v0,9d009eb4 <_dtoa_r+0x534>
9d009e7c:	00084043 	sra	t0,t0,0x1
9d009e80:	8d460000 	lw	a2,0(t2)
9d009e84:	8d470004 	lw	a3,4(t2)
9d009e88:	01202021 	move	a0,t1
9d009e8c:	01602821 	move	a1,t3
9d009e90:	afa8007c 	sw	t0,124(sp)
9d009e94:	0f401843 	jal	9d00610c <__muldf3>
9d009e98:	afaa0078 	sw	t2,120(sp)
9d009e9c:	8faa0078 	lw	t2,120(sp)
9d009ea0:	8fa8007c 	lw	t0,124(sp)
9d009ea4:	26730001 	addiu	s3,s3,1
9d009ea8:	00404821 	move	t1,v0
9d009eac:	00605821 	move	t3,v1
9d009eb0:	00084043 	sra	t0,t0,0x1
9d009eb4:	254a0008 	addiu	t2,t2,8
9d009eb8:	1500ffef 	bnez	t0,9d009e78 <_dtoa_r+0x4f8>
9d009ebc:	31020001 	andi	v0,t0,0x1
9d009ec0:	02c02021 	move	a0,s6
9d009ec4:	02002821 	move	a1,s0
9d009ec8:	01203021 	move	a2,t1
9d009ecc:	0f4015f9 	jal	9d0057e4 <__divdf3>
9d009ed0:	01603821 	move	a3,t3
9d009ed4:	0b4027d9 	j	9d009f64 <_dtoa_r+0x5e4>
9d009ed8:	0040b021 	move	s6,v0
9d009edc:	00124023 	negu	t0,s2
9d009ee0:	11000021 	beqz	t0,9d009f68 <_dtoa_r+0x5e8>
9d009ee4:	24130002 	li	s3,2
9d009ee8:	3104000f 	andi	a0,t0,0xf
9d009eec:	3c029d03 	lui	v0,0x9d03
9d009ef0:	000420c0 	sll	a0,a0,0x3
9d009ef4:	2442c040 	addiu	v0,v0,-16320
9d009ef8:	00821021 	addu	v0,a0,v0
9d009efc:	8c460000 	lw	a2,0(v0)
9d009f00:	8c470004 	lw	a3,4(v0)
9d009f04:	02c02021 	move	a0,s6
9d009f08:	02002821 	move	a1,s0
9d009f0c:	0f401843 	jal	9d00610c <__muldf3>
9d009f10:	afa8007c 	sw	t0,124(sp)
9d009f14:	8fa8007c 	lw	t0,124(sp)
9d009f18:	0008b103 	sra	s6,t0,0x4
9d009f1c:	3c089d03 	lui	t0,0x9d03
9d009f20:	0b4027d6 	j	9d009f58 <_dtoa_r+0x5d8>
9d009f24:	2508c108 	addiu	t0,t0,-16120
9d009f28:	5080000a 	beqzl	a0,9d009f54 <_dtoa_r+0x5d4>
9d009f2c:	0016b043 	sra	s6,s6,0x1
9d009f30:	8d060000 	lw	a2,0(t0)
9d009f34:	8d070004 	lw	a3,4(t0)
9d009f38:	00402021 	move	a0,v0
9d009f3c:	00602821 	move	a1,v1
9d009f40:	0f401843 	jal	9d00610c <__muldf3>
9d009f44:	afa8007c 	sw	t0,124(sp)
9d009f48:	8fa8007c 	lw	t0,124(sp)
9d009f4c:	26730001 	addiu	s3,s3,1
9d009f50:	0016b043 	sra	s6,s6,0x1
9d009f54:	25080008 	addiu	t0,t0,8
9d009f58:	16c0fff3 	bnez	s6,9d009f28 <_dtoa_r+0x5a8>
9d009f5c:	32c40001 	andi	a0,s6,0x1
9d009f60:	0040b021 	move	s6,v0
9d009f64:	00608021 	move	s0,v1
9d009f68:	8fa3004c 	lw	v1,76(sp)
9d009f6c:	5060001e 	beqzl	v1,9d009fe8 <_dtoa_r+0x668>
9d009f70:	afb20030 	sw	s2,48(sp)
9d009f74:	3c029d03 	lui	v0,0x9d03
9d009f78:	8c46c008 	lw	a2,-16376(v0)
9d009f7c:	8c47c00c 	lw	a3,-16372(v0)
9d009f80:	02c02021 	move	a0,s6
9d009f84:	02002821 	move	a1,s0
9d009f88:	afb60074 	sw	s6,116(sp)
9d009f8c:	0f4017fa 	jal	9d005fe8 <__ledf2>
9d009f90:	afb0007c 	sw	s0,124(sp)
9d009f94:	8fa30074 	lw	v1,116(sp)
9d009f98:	04410012 	bgez	v0,9d009fe4 <_dtoa_r+0x664>
9d009f9c:	8fa8007c 	lw	t0,124(sp)
9d009fa0:	13c00013 	beqz	s8,9d009ff0 <_dtoa_r+0x670>
9d009fa4:	8fa40044 	lw	a0,68(sp)
9d009fa8:	188000fd 	blez	a0,9d00a3a0 <_dtoa_r+0xa20>
9d009fac:	3c029d03 	lui	v0,0x9d03
9d009fb0:	8c46c010 	lw	a2,-16368(v0)
9d009fb4:	8c47c014 	lw	a3,-16364(v0)
9d009fb8:	2645ffff 	addiu	a1,s2,-1
9d009fbc:	afa50030 	sw	a1,48(sp)
9d009fc0:	00602021 	move	a0,v1
9d009fc4:	0f401843 	jal	9d00610c <__muldf3>
9d009fc8:	01002821 	move	a1,t0
9d009fcc:	8fa60044 	lw	a2,68(sp)
9d009fd0:	0040b021 	move	s6,v0
9d009fd4:	00608021 	move	s0,v1
9d009fd8:	26730001 	addiu	s3,s3,1
9d009fdc:	0b4027fe 	j	9d009ff8 <_dtoa_r+0x678>
9d009fe0:	afa60028 	sw	a2,40(sp)
9d009fe4:	afb20030 	sw	s2,48(sp)
9d009fe8:	0b4027fe 	j	9d009ff8 <_dtoa_r+0x678>
9d009fec:	afbe0028 	sw	s8,40(sp)
9d009ff0:	afb20030 	sw	s2,48(sp)
9d009ff4:	afa00028 	sw	zero,40(sp)
9d009ff8:	02602021 	move	a0,s3
9d009ffc:	afb6003c 	sw	s6,60(sp)
9d00a000:	0f401c00 	jal	9d007000 <__floatsidf>
9d00a004:	afb00038 	sw	s0,56(sp)
9d00a008:	8fa6003c 	lw	a2,60(sp)
9d00a00c:	8fa70038 	lw	a3,56(sp)
9d00a010:	00402021 	move	a0,v0
9d00a014:	0f401843 	jal	9d00610c <__muldf3>
9d00a018:	00602821 	move	a1,v1
9d00a01c:	00402021 	move	a0,v0
9d00a020:	3c029d03 	lui	v0,0x9d03
9d00a024:	8c46c018 	lw	a2,-16360(v0)
9d00a028:	8c47c01c 	lw	a3,-16356(v0)
9d00a02c:	0f4013c8 	jal	9d004f20 <__adddf3>
9d00a030:	00602821 	move	a1,v1
9d00a034:	00409821 	move	s3,v0
9d00a038:	3c02fcc0 	lui	v0,0xfcc0
9d00a03c:	00431821 	addu	v1,v0,v1
9d00a040:	8fa20028 	lw	v0,40(sp)
9d00a044:	1440001e 	bnez	v0,9d00a0c0 <_dtoa_r+0x740>
9d00a048:	afa30034 	sw	v1,52(sp)
9d00a04c:	3c029d03 	lui	v0,0x9d03
9d00a050:	8fa4003c 	lw	a0,60(sp)
9d00a054:	8fa50038 	lw	a1,56(sp)
9d00a058:	8c46c020 	lw	a2,-16352(v0)
9d00a05c:	0f40199e 	jal	9d006678 <__subdf3>
9d00a060:	8c47c024 	lw	a3,-16348(v0)
9d00a064:	0060b021 	move	s6,v1
9d00a068:	00408021 	move	s0,v0
9d00a06c:	00401821 	move	v1,v0
9d00a070:	8fa20034 	lw	v0,52(sp)
9d00a074:	00602021 	move	a0,v1
9d00a078:	02c02821 	move	a1,s6
9d00a07c:	02603021 	move	a2,s3
9d00a080:	0f4017b1 	jal	9d005ec4 <__gedf2>
9d00a084:	00403821 	move	a3,v0
9d00a088:	5c40021e 	bgtzl	v0,9d00a904 <_dtoa_r+0xf84>
9d00a08c:	8fb20030 	lw	s2,48(sp)
9d00a090:	8fa60034 	lw	a2,52(sp)
9d00a094:	3c028000 	lui	v0,0x8000
9d00a098:	02002021 	move	a0,s0
9d00a09c:	00461026 	xor	v0,v0,a2
9d00a0a0:	02c02821 	move	a1,s6
9d00a0a4:	02603021 	move	a2,s3
9d00a0a8:	0f4017fa 	jal	9d005fe8 <__ledf2>
9d00a0ac:	00403821 	move	a3,v0
9d00a0b0:	0442020f 	bltzl	v0,9d00a8f0 <_dtoa_r+0xf70>
9d00a0b4:	0000a821 	move	s5,zero
9d00a0b8:	0b4028e9 	j	9d00a3a4 <_dtoa_r+0xa24>
9d00a0bc:	8fb60050 	lw	s6,80(sp)
9d00a0c0:	8fa40028 	lw	a0,40(sp)
9d00a0c4:	8fa50040 	lw	a1,64(sp)
9d00a0c8:	3c039d03 	lui	v1,0x9d03
9d00a0cc:	2463c040 	addiu	v1,v1,-16320
9d00a0d0:	10a0005c 	beqz	a1,9d00a244 <_dtoa_r+0x8c4>
9d00a0d4:	2482ffff 	addiu	v0,a0,-1
9d00a0d8:	000210c0 	sll	v0,v0,0x3
9d00a0dc:	00621021 	addu	v0,v1,v0
9d00a0e0:	3c039d03 	lui	v1,0x9d03
9d00a0e4:	8c64c028 	lw	a0,-16344(v1)
9d00a0e8:	8c65c02c 	lw	a1,-16340(v1)
9d00a0ec:	8c460000 	lw	a2,0(v0)
9d00a0f0:	0f4015f9 	jal	9d0057e4 <__divdf3>
9d00a0f4:	8c470004 	lw	a3,4(v0)
9d00a0f8:	00402021 	move	a0,v0
9d00a0fc:	8fa20034 	lw	v0,52(sp)
9d00a100:	02603021 	move	a2,s3
9d00a104:	00602821 	move	a1,v1
9d00a108:	0f40199e 	jal	9d006678 <__subdf3>
9d00a10c:	00403821 	move	a3,v0
9d00a110:	00409821 	move	s3,v0
9d00a114:	3c029d03 	lui	v0,0x9d03
9d00a118:	afa30034 	sw	v1,52(sp)
9d00a11c:	8c43c010 	lw	v1,-16368(v0)
9d00a120:	8c42c014 	lw	v0,-16364(v0)
9d00a124:	02003021 	move	a2,s0
9d00a128:	8fb0002c 	lw	s0,44(sp)
9d00a12c:	afa0003c 	sw	zero,60(sp)
9d00a130:	afa3005c 	sw	v1,92(sp)
9d00a134:	afa20060 	sw	v0,96(sp)
9d00a138:	afa30064 	sw	v1,100(sp)
9d00a13c:	afa20068 	sw	v0,104(sp)
9d00a140:	afb2006c 	sw	s2,108(sp)
9d00a144:	afb10038 	sw	s1,56(sp)
9d00a148:	00c02821 	move	a1,a2
9d00a14c:	02c02021 	move	a0,s6
9d00a150:	0f401be0 	jal	9d006f80 <__fixdfsi>
9d00a154:	afa60070 	sw	a2,112(sp)
9d00a158:	00402021 	move	a0,v0
9d00a15c:	0f401c00 	jal	9d007000 <__floatsidf>
9d00a160:	afa2007c 	sw	v0,124(sp)
9d00a164:	8fa60070 	lw	a2,112(sp)
9d00a168:	02c02021 	move	a0,s6
9d00a16c:	00603821 	move	a3,v1
9d00a170:	00c02821 	move	a1,a2
9d00a174:	0f40199e 	jal	9d006678 <__subdf3>
9d00a178:	00403021 	move	a2,v0
9d00a17c:	8fa8007c 	lw	t0,124(sp)
9d00a180:	00609021 	move	s2,v1
9d00a184:	00408821 	move	s1,v0
9d00a188:	25080030 	addiu	t0,t0,48
9d00a18c:	a2080000 	sb	t0,0(s0)
9d00a190:	00401821 	move	v1,v0
9d00a194:	8fa20034 	lw	v0,52(sp)
9d00a198:	00602021 	move	a0,v1
9d00a19c:	02402821 	move	a1,s2
9d00a1a0:	02603021 	move	a2,s3
9d00a1a4:	00403821 	move	a3,v0
9d00a1a8:	0f4017fa 	jal	9d005fe8 <__ledf2>
9d00a1ac:	26100001 	addiu	s0,s0,1
9d00a1b0:	044002b3 	bltz	v0,9d00ac80 <_dtoa_r+0x1300>
9d00a1b4:	3c069d03 	lui	a2,0x9d03
9d00a1b8:	24c6c008 	addiu	a2,a2,-16376
9d00a1bc:	8cc40000 	lw	a0,0(a2)
9d00a1c0:	8cc50004 	lw	a1,4(a2)
9d00a1c4:	02403821 	move	a3,s2
9d00a1c8:	0f40199e 	jal	9d006678 <__subdf3>
9d00a1cc:	02203021 	move	a2,s1
9d00a1d0:	00402021 	move	a0,v0
9d00a1d4:	8fa20034 	lw	v0,52(sp)
9d00a1d8:	00602821 	move	a1,v1
9d00a1dc:	02603021 	move	a2,s3
9d00a1e0:	0f4017fa 	jal	9d005fe8 <__ledf2>
9d00a1e4:	00403821 	move	a3,v0
9d00a1e8:	044000ce 	bltz	v0,9d00a524 <_dtoa_r+0xba4>
9d00a1ec:	8fa30028 	lw	v1,40(sp)
9d00a1f0:	8fa2003c 	lw	v0,60(sp)
9d00a1f4:	24420001 	addiu	v0,v0,1
9d00a1f8:	afa2003c 	sw	v0,60(sp)
9d00a1fc:	0043102a 	slt	v0,v0,v1
9d00a200:	10400065 	beqz	v0,9d00a398 <_dtoa_r+0xa18>
9d00a204:	8fa20034 	lw	v0,52(sp)
9d00a208:	8fa6005c 	lw	a2,92(sp)
9d00a20c:	8fa70060 	lw	a3,96(sp)
9d00a210:	02602021 	move	a0,s3
9d00a214:	0f401843 	jal	9d00610c <__muldf3>
9d00a218:	00402821 	move	a1,v0
9d00a21c:	8fa60064 	lw	a2,100(sp)
9d00a220:	8fa70068 	lw	a3,104(sp)
9d00a224:	02202021 	move	a0,s1
9d00a228:	02402821 	move	a1,s2
9d00a22c:	00409821 	move	s3,v0
9d00a230:	0f401843 	jal	9d00610c <__muldf3>
9d00a234:	afa30034 	sw	v1,52(sp)
9d00a238:	0040b021 	move	s6,v0
9d00a23c:	0b402852 	j	9d00a148 <_dtoa_r+0x7c8>
9d00a240:	00603021 	move	a2,v1
9d00a244:	000210c0 	sll	v0,v0,0x3
9d00a248:	00621021 	addu	v0,v1,v0
9d00a24c:	8c440000 	lw	a0,0(v0)
9d00a250:	8c450004 	lw	a1,4(v0)
9d00a254:	8fa20034 	lw	v0,52(sp)
9d00a258:	02603021 	move	a2,s3
9d00a25c:	0f401843 	jal	9d00610c <__muldf3>
9d00a260:	00403821 	move	a3,v0
9d00a264:	8fa4002c 	lw	a0,44(sp)
9d00a268:	8fa50028 	lw	a1,40(sp)
9d00a26c:	8fb3002c 	lw	s3,44(sp)
9d00a270:	afa20034 	sw	v0,52(sp)
9d00a274:	00852021 	addu	a0,a0,a1
9d00a278:	afa3003c 	sw	v1,60(sp)
9d00a27c:	afa40038 	sw	a0,56(sp)
9d00a280:	02c02021 	move	a0,s6
9d00a284:	0f401be0 	jal	9d006f80 <__fixdfsi>
9d00a288:	02002821 	move	a1,s0
9d00a28c:	00402021 	move	a0,v0
9d00a290:	0f401c00 	jal	9d007000 <__floatsidf>
9d00a294:	afa2007c 	sw	v0,124(sp)
9d00a298:	00403021 	move	a2,v0
9d00a29c:	02c02021 	move	a0,s6
9d00a2a0:	02002821 	move	a1,s0
9d00a2a4:	0f40199e 	jal	9d006678 <__subdf3>
9d00a2a8:	00603821 	move	a3,v1
9d00a2ac:	8fa8007c 	lw	t0,124(sp)
9d00a2b0:	25080030 	addiu	t0,t0,48
9d00a2b4:	a2680000 	sb	t0,0(s3)
9d00a2b8:	8fa60038 	lw	a2,56(sp)
9d00a2bc:	26730001 	addiu	s3,s3,1
9d00a2c0:	1666002b 	bne	s3,a2,9d00a370 <_dtoa_r+0x9f0>
9d00a2c4:	0040b021 	move	s6,v0
9d00a2c8:	afa30038 	sw	v1,56(sp)
9d00a2cc:	8fa2002c 	lw	v0,44(sp)
9d00a2d0:	8fa30028 	lw	v1,40(sp)
9d00a2d4:	3c139d03 	lui	s3,0x9d03
9d00a2d8:	8e66c028 	lw	a2,-16344(s3)
9d00a2dc:	00438021 	addu	s0,v0,v1
9d00a2e0:	8fa30034 	lw	v1,52(sp)
9d00a2e4:	8fa2003c 	lw	v0,60(sp)
9d00a2e8:	8e67c02c 	lw	a3,-16340(s3)
9d00a2ec:	00602021 	move	a0,v1
9d00a2f0:	0f4013c8 	jal	9d004f20 <__adddf3>
9d00a2f4:	00402821 	move	a1,v0
9d00a2f8:	8fa60038 	lw	a2,56(sp)
9d00a2fc:	02c02021 	move	a0,s6
9d00a300:	00603821 	move	a3,v1
9d00a304:	00c02821 	move	a1,a2
9d00a308:	0f4017b1 	jal	9d005ec4 <__gedf2>
9d00a30c:	00403021 	move	a2,v0
9d00a310:	5c400086 	bgtzl	v0,9d00a52c <_dtoa_r+0xbac>
9d00a314:	8fb20030 	lw	s2,48(sp)
9d00a318:	8fa30034 	lw	v1,52(sp)
9d00a31c:	8fa2003c 	lw	v0,60(sp)
9d00a320:	8e64c028 	lw	a0,-16344(s3)
9d00a324:	8e65c02c 	lw	a1,-16340(s3)
9d00a328:	00603021 	move	a2,v1
9d00a32c:	0f40199e 	jal	9d006678 <__subdf3>
9d00a330:	00403821 	move	a3,v0
9d00a334:	8fa50038 	lw	a1,56(sp)
9d00a338:	00603821 	move	a3,v1
9d00a33c:	02c02021 	move	a0,s6
9d00a340:	0f4017fa 	jal	9d005fe8 <__ledf2>
9d00a344:	00403021 	move	a2,v0
9d00a348:	04400004 	bltz	v0,9d00a35c <_dtoa_r+0x9dc>
9d00a34c:	24030030 	li	v1,48
9d00a350:	0b4028e9 	j	9d00a3a4 <_dtoa_r+0xa24>
9d00a354:	8fb60050 	lw	s6,80(sp)
9d00a358:	00808021 	move	s0,a0
9d00a35c:	8202ffff 	lb	v0,-1(s0)
9d00a360:	1043fffd 	beq	v0,v1,9d00a358 <_dtoa_r+0x9d8>
9d00a364:	2604ffff 	addiu	a0,s0,-1
9d00a368:	0b402b22 	j	9d00ac88 <_dtoa_r+0x1308>
9d00a36c:	8fb20030 	lw	s2,48(sp)
9d00a370:	00402021 	move	a0,v0
9d00a374:	3c029d03 	lui	v0,0x9d03
9d00a378:	2442c010 	addiu	v0,v0,-16368
9d00a37c:	8c460000 	lw	a2,0(v0)
9d00a380:	8c470004 	lw	a3,4(v0)
9d00a384:	0f401843 	jal	9d00610c <__muldf3>
9d00a388:	00602821 	move	a1,v1
9d00a38c:	0040b021 	move	s6,v0
9d00a390:	0b4028a0 	j	9d00a280 <_dtoa_r+0x900>
9d00a394:	00608021 	move	s0,v1
9d00a398:	8fb2006c 	lw	s2,108(sp)
9d00a39c:	8fb10038 	lw	s1,56(sp)
9d00a3a0:	8fb60050 	lw	s6,80(sp)
9d00a3a4:	8fb00054 	lw	s0,84(sp)
9d00a3a8:	8fa2001c 	lw	v0,28(sp)
9d00a3ac:	0440007a 	bltz	v0,9d00a598 <_dtoa_r+0xc18>
9d00a3b0:	2a43000f 	slti	v1,s2,15
9d00a3b4:	10600079 	beqz	v1,9d00a59c <_dtoa_r+0xc1c>
9d00a3b8:	8fa30040 	lw	v1,64(sp)
9d00a3bc:	3c029d03 	lui	v0,0x9d03
9d00a3c0:	001218c0 	sll	v1,s2,0x3
9d00a3c4:	2442c040 	addiu	v0,v0,-16320
9d00a3c8:	00621021 	addu	v0,v1,v0
9d00a3cc:	8c450004 	lw	a1,4(v0)
9d00a3d0:	8c440000 	lw	a0,0(v0)
9d00a3d4:	afa50024 	sw	a1,36(sp)
9d00a3d8:	8fa500bc 	lw	a1,188(sp)
9d00a3dc:	04a10013 	bgez	a1,9d00a42c <_dtoa_r+0xaac>
9d00a3e0:	afa40020 	sw	a0,32(sp)
9d00a3e4:	5fc00012 	bgtzl	s8,9d00a430 <_dtoa_r+0xab0>
9d00a3e8:	0200a821 	move	s5,s0
9d00a3ec:	17c0013f 	bnez	s8,9d00a8ec <_dtoa_r+0xf6c>
9d00a3f0:	3c029d03 	lui	v0,0x9d03
9d00a3f4:	8fa40020 	lw	a0,32(sp)
9d00a3f8:	8fa50024 	lw	a1,36(sp)
9d00a3fc:	8c46c020 	lw	a2,-16352(v0)
9d00a400:	0f401843 	jal	9d00610c <__muldf3>
9d00a404:	8c47c024 	lw	a3,-16348(v0)
9d00a408:	00402021 	move	a0,v0
9d00a40c:	00602821 	move	a1,v1
9d00a410:	02c03021 	move	a2,s6
9d00a414:	0f4017b1 	jal	9d005ec4 <__gedf2>
9d00a418:	02003821 	move	a3,s0
9d00a41c:	04410134 	bgez	v0,9d00a8f0 <_dtoa_r+0xf70>
9d00a420:	0000a821 	move	s5,zero
9d00a424:	0b402a43 	j	9d00a90c <_dtoa_r+0xf8c>
9d00a428:	00009821 	move	s3,zero
9d00a42c:	0200a821 	move	s5,s0
9d00a430:	8fb0002c 	lw	s0,44(sp)
9d00a434:	24170001 	li	s7,1
9d00a438:	8fa60020 	lw	a2,32(sp)
9d00a43c:	8fa70024 	lw	a3,36(sp)
9d00a440:	02c02021 	move	a0,s6
9d00a444:	0f4015f9 	jal	9d0057e4 <__divdf3>
9d00a448:	02a02821 	move	a1,s5
9d00a44c:	00602821 	move	a1,v1
9d00a450:	0f401be0 	jal	9d006f80 <__fixdfsi>
9d00a454:	00402021 	move	a0,v0
9d00a458:	00402021 	move	a0,v0
9d00a45c:	0f401c00 	jal	9d007000 <__floatsidf>
9d00a460:	00409821 	move	s3,v0
9d00a464:	8fa60020 	lw	a2,32(sp)
9d00a468:	8fa70024 	lw	a3,36(sp)
9d00a46c:	00402021 	move	a0,v0
9d00a470:	0f401843 	jal	9d00610c <__muldf3>
9d00a474:	00602821 	move	a1,v1
9d00a478:	00403021 	move	a2,v0
9d00a47c:	02c02021 	move	a0,s6
9d00a480:	02a02821 	move	a1,s5
9d00a484:	0f40199e 	jal	9d006678 <__subdf3>
9d00a488:	00603821 	move	a3,v1
9d00a48c:	26640030 	addiu	a0,s3,48
9d00a490:	a2040000 	sb	a0,0(s0)
9d00a494:	16fe002d 	bne	s7,s8,9d00a54c <_dtoa_r+0xbcc>
9d00a498:	26100001 	addiu	s0,s0,1
9d00a49c:	00402021 	move	a0,v0
9d00a4a0:	00602821 	move	a1,v1
9d00a4a4:	00403021 	move	a2,v0
9d00a4a8:	0f4013c8 	jal	9d004f20 <__adddf3>
9d00a4ac:	00603821 	move	a3,v1
9d00a4b0:	8fa60020 	lw	a2,32(sp)
9d00a4b4:	8fa70024 	lw	a3,36(sp)
9d00a4b8:	0060b021 	move	s6,v1
9d00a4bc:	00401821 	move	v1,v0
9d00a4c0:	00602021 	move	a0,v1
9d00a4c4:	02c02821 	move	a1,s6
9d00a4c8:	0f4017b1 	jal	9d005ec4 <__gedf2>
9d00a4cc:	0040a821 	move	s5,v0
9d00a4d0:	1c400017 	bgtz	v0,9d00a530 <_dtoa_r+0xbb0>
9d00a4d4:	24030039 	li	v1,57
9d00a4d8:	8fa60020 	lw	a2,32(sp)
9d00a4dc:	8fa70024 	lw	a3,36(sp)
9d00a4e0:	02a02021 	move	a0,s5
9d00a4e4:	0f4032ce 	jal	9d00cb38 <__eqdf2>
9d00a4e8:	02c02821 	move	a1,s6
9d00a4ec:	144001e7 	bnez	v0,9d00ac8c <_dtoa_r+0x130c>
9d00a4f0:	02202021 	move	a0,s1
9d00a4f4:	32730001 	andi	s3,s3,0x1
9d00a4f8:	1660000d 	bnez	s3,9d00a530 <_dtoa_r+0xbb0>
9d00a4fc:	24030039 	li	v1,57
9d00a500:	0b402b23 	j	9d00ac8c <_dtoa_r+0x130c>
9d00a504:	00000000 	nop
9d00a508:	8fa6002c 	lw	a2,44(sp)
9d00a50c:	54460008 	bnel	v0,a2,9d00a530 <_dtoa_r+0xbb0>
9d00a510:	00408021 	move	s0,v0
9d00a514:	24030030 	li	v1,48
9d00a518:	26520001 	addiu	s2,s2,1
9d00a51c:	0b40294f 	j	9d00a53c <_dtoa_r+0xbbc>
9d00a520:	a0c30000 	sb	v1,0(a2)
9d00a524:	8fb10038 	lw	s1,56(sp)
9d00a528:	8fb20030 	lw	s2,48(sp)
9d00a52c:	24030039 	li	v1,57
9d00a530:	8204ffff 	lb	a0,-1(s0)
9d00a534:	1083fff4 	beq	a0,v1,9d00a508 <_dtoa_r+0xb88>
9d00a538:	2602ffff 	addiu	v0,s0,-1
9d00a53c:	90430000 	lbu	v1,0(v0)
9d00a540:	24630001 	addiu	v1,v1,1
9d00a544:	0b402b22 	j	9d00ac88 <_dtoa_r+0x1308>
9d00a548:	a0430000 	sb	v1,0(v0)
9d00a54c:	00402021 	move	a0,v0
9d00a550:	3c029d03 	lui	v0,0x9d03
9d00a554:	2442c010 	addiu	v0,v0,-16368
9d00a558:	8c460000 	lw	a2,0(v0)
9d00a55c:	8c470004 	lw	a3,4(v0)
9d00a560:	0f401843 	jal	9d00610c <__muldf3>
9d00a564:	00602821 	move	a1,v1
9d00a568:	0060a821 	move	s5,v1
9d00a56c:	00401821 	move	v1,v0
9d00a570:	00602021 	move	a0,v1
9d00a574:	02a02821 	move	a1,s5
9d00a578:	00003021 	move	a2,zero
9d00a57c:	00003821 	move	a3,zero
9d00a580:	0f4032ce 	jal	9d00cb38 <__eqdf2>
9d00a584:	0040b021 	move	s6,v0
9d00a588:	504001c0 	beqzl	v0,9d00ac8c <_dtoa_r+0x130c>
9d00a58c:	02202021 	move	a0,s1
9d00a590:	0b40290e 	j	9d00a438 <_dtoa_r+0xab8>
9d00a594:	26f70001 	addiu	s7,s7,1
9d00a598:	8fa30040 	lw	v1,64(sp)
9d00a59c:	1060002a 	beqz	v1,9d00a648 <_dtoa_r+0xcc8>
9d00a5a0:	02a01821 	move	v1,s5
9d00a5a4:	8fa400b8 	lw	a0,184(sp)
9d00a5a8:	28830002 	slti	v1,a0,2
9d00a5ac:	5060000a 	beqzl	v1,9d00a5d8 <_dtoa_r+0xc58>
9d00a5b0:	27c3ffff 	addiu	v1,s8,-1
9d00a5b4:	8fa50058 	lw	a1,88(sp)
9d00a5b8:	14a00004 	bnez	a1,9d00a5cc <_dtoa_r+0xc4c>
9d00a5bc:	24420433 	addiu	v0,v0,1075
9d00a5c0:	8fa20018 	lw	v0,24(sp)
9d00a5c4:	24030036 	li	v1,54
9d00a5c8:	00621023 	subu	v0,v1,v0
9d00a5cc:	02a01821 	move	v1,s5
9d00a5d0:	0b402987 	j	9d00a61c <_dtoa_r+0xc9c>
9d00a5d4:	afb70028 	sw	s7,40(sp)
9d00a5d8:	02a3102a 	slt	v0,s5,v1
9d00a5dc:	14400003 	bnez	v0,9d00a5ec <_dtoa_r+0xc6c>
9d00a5e0:	8fa60048 	lw	a2,72(sp)
9d00a5e4:	0b402980 	j	9d00a600 <_dtoa_r+0xc80>
9d00a5e8:	02a31823 	subu	v1,s5,v1
9d00a5ec:	00751823 	subu	v1,v1,s5
9d00a5f0:	02a3a821 	addu	s5,s5,v1
9d00a5f4:	00c33021 	addu	a2,a2,v1
9d00a5f8:	afa60048 	sw	a2,72(sp)
9d00a5fc:	00001821 	move	v1,zero
9d00a600:	07c30005 	bgezl	s8,9d00a618 <_dtoa_r+0xc98>
9d00a604:	afb70028 	sw	s7,40(sp)
9d00a608:	02fe1023 	subu	v0,s7,s8
9d00a60c:	afa20028 	sw	v0,40(sp)
9d00a610:	0b402987 	j	9d00a61c <_dtoa_r+0xc9c>
9d00a614:	00001021 	move	v0,zero
9d00a618:	03c01021 	move	v0,s8
9d00a61c:	8fa40020 	lw	a0,32(sp)
9d00a620:	24050001 	li	a1,1
9d00a624:	afa30074 	sw	v1,116(sp)
9d00a628:	00822021 	addu	a0,a0,v0
9d00a62c:	afa40020 	sw	a0,32(sp)
9d00a630:	02202021 	move	a0,s1
9d00a634:	0f402ced 	jal	9d00b3b4 <__i2b>
9d00a638:	02e2b821 	addu	s7,s7,v0
9d00a63c:	00409821 	move	s3,v0
9d00a640:	0b402994 	j	9d00a650 <_dtoa_r+0xcd0>
9d00a644:	8fa30074 	lw	v1,116(sp)
9d00a648:	afb70028 	sw	s7,40(sp)
9d00a64c:	00009821 	move	s3,zero
9d00a650:	8fa50028 	lw	a1,40(sp)
9d00a654:	10a0000a 	beqz	a1,9d00a680 <_dtoa_r+0xd00>
9d00a658:	8fa60020 	lw	a2,32(sp)
9d00a65c:	18c00008 	blez	a2,9d00a680 <_dtoa_r+0xd00>
9d00a660:	8fa40028 	lw	a0,40(sp)
9d00a664:	00a6102a 	slt	v0,a1,a2
9d00a668:	00c2280a 	movz	a1,a2,v0
9d00a66c:	00852023 	subu	a0,a0,a1
9d00a670:	00c53023 	subu	a2,a2,a1
9d00a674:	02e5b823 	subu	s7,s7,a1
9d00a678:	afa40028 	sw	a0,40(sp)
9d00a67c:	afa60020 	sw	a2,32(sp)
9d00a680:	1aa0001f 	blez	s5,9d00a700 <_dtoa_r+0xd80>
9d00a684:	8fa50040 	lw	a1,64(sp)
9d00a688:	10a00018 	beqz	a1,9d00a6ec <_dtoa_r+0xd6c>
9d00a68c:	02202021 	move	a0,s1
9d00a690:	18600011 	blez	v1,9d00a6d8 <_dtoa_r+0xd58>
9d00a694:	00603021 	move	a2,v1
9d00a698:	02602821 	move	a1,s3
9d00a69c:	02202021 	move	a0,s1
9d00a6a0:	0f402d73 	jal	9d00b5cc <__pow5mult>
9d00a6a4:	afa30074 	sw	v1,116(sp)
9d00a6a8:	00402821 	move	a1,v0
9d00a6ac:	02803021 	move	a2,s4
9d00a6b0:	02202021 	move	a0,s1
9d00a6b4:	0f402cfa 	jal	9d00b3e8 <__multiply>
9d00a6b8:	00409821 	move	s3,v0
9d00a6bc:	02802821 	move	a1,s4
9d00a6c0:	02202021 	move	a0,s1
9d00a6c4:	0f402c55 	jal	9d00b154 <_Bfree>
9d00a6c8:	afa20070 	sw	v0,112(sp)
9d00a6cc:	8fa20070 	lw	v0,112(sp)
9d00a6d0:	8fa30074 	lw	v1,116(sp)
9d00a6d4:	0040a021 	move	s4,v0
9d00a6d8:	02a33023 	subu	a2,s5,v1
9d00a6dc:	10c00009 	beqz	a2,9d00a704 <_dtoa_r+0xd84>
9d00a6e0:	02202021 	move	a0,s1
9d00a6e4:	0b4029bd 	j	9d00a6f4 <_dtoa_r+0xd74>
9d00a6e8:	02802821 	move	a1,s4
9d00a6ec:	02802821 	move	a1,s4
9d00a6f0:	02a03021 	move	a2,s5
9d00a6f4:	0f402d73 	jal	9d00b5cc <__pow5mult>
9d00a6f8:	00000000 	nop
9d00a6fc:	0040a021 	move	s4,v0
9d00a700:	02202021 	move	a0,s1
9d00a704:	0f402ced 	jal	9d00b3b4 <__i2b>
9d00a708:	24050001 	li	a1,1
9d00a70c:	8fa60048 	lw	a2,72(sp)
9d00a710:	18c00005 	blez	a2,9d00a728 <_dtoa_r+0xda8>
9d00a714:	0040a821 	move	s5,v0
9d00a718:	02202021 	move	a0,s1
9d00a71c:	0f402d73 	jal	9d00b5cc <__pow5mult>
9d00a720:	00402821 	move	a1,v0
9d00a724:	0040a821 	move	s5,v0
9d00a728:	8fa300b8 	lw	v1,184(sp)
9d00a72c:	28620002 	slti	v0,v1,2
9d00a730:	10400010 	beqz	v0,9d00a774 <_dtoa_r+0xdf4>
9d00a734:	afa00030 	sw	zero,48(sp)
9d00a738:	16c0000f 	bnez	s6,9d00a778 <_dtoa_r+0xdf8>
9d00a73c:	8fa60048 	lw	a2,72(sp)
9d00a740:	7e029800 	ext	v0,s0,0x0,0x14
9d00a744:	1440000b 	bnez	v0,9d00a774 <_dtoa_r+0xdf4>
9d00a748:	afb60030 	sw	s6,48(sp)
9d00a74c:	3c027ff0 	lui	v0,0x7ff0
9d00a750:	02028024 	and	s0,s0,v0
9d00a754:	12000008 	beqz	s0,9d00a778 <_dtoa_r+0xdf8>
9d00a758:	8fa60048 	lw	a2,72(sp)
9d00a75c:	8fa40020 	lw	a0,32(sp)
9d00a760:	24050001 	li	a1,1
9d00a764:	26f70001 	addiu	s7,s7,1
9d00a768:	24840001 	addiu	a0,a0,1
9d00a76c:	afa40020 	sw	a0,32(sp)
9d00a770:	afa50030 	sw	a1,48(sp)
9d00a774:	8fa60048 	lw	a2,72(sp)
9d00a778:	10c00009 	beqz	a2,9d00a7a0 <_dtoa_r+0xe20>
9d00a77c:	24030001 	li	v1,1
9d00a780:	8ea20010 	lw	v0,16(s5)
9d00a784:	24420003 	addiu	v0,v0,3
9d00a788:	00021080 	sll	v0,v0,0x2
9d00a78c:	02a21021 	addu	v0,s5,v0
9d00a790:	0f402ca1 	jal	9d00b284 <__hi0bits>
9d00a794:	8c440004 	lw	a0,4(v0)
9d00a798:	24030020 	li	v1,32
9d00a79c:	00621823 	subu	v1,v1,v0
9d00a7a0:	8fa20020 	lw	v0,32(sp)
9d00a7a4:	00621821 	addu	v1,v1,v0
9d00a7a8:	3063001f 	andi	v1,v1,0x1f
9d00a7ac:	10600012 	beqz	v1,9d00a7f8 <_dtoa_r+0xe78>
9d00a7b0:	8fa60028 	lw	a2,40(sp)
9d00a7b4:	24020020 	li	v0,32
9d00a7b8:	00431823 	subu	v1,v0,v1
9d00a7bc:	28620005 	slti	v0,v1,5
9d00a7c0:	14400009 	bnez	v0,9d00a7e8 <_dtoa_r+0xe68>
9d00a7c4:	8fa40028 	lw	a0,40(sp)
9d00a7c8:	8fa50020 	lw	a1,32(sp)
9d00a7cc:	2463fffc 	addiu	v1,v1,-4
9d00a7d0:	00832021 	addu	a0,a0,v1
9d00a7d4:	00a32821 	addu	a1,a1,v1
9d00a7d8:	02e3b821 	addu	s7,s7,v1
9d00a7dc:	afa40028 	sw	a0,40(sp)
9d00a7e0:	0b402a04 	j	9d00a810 <_dtoa_r+0xe90>
9d00a7e4:	afa50020 	sw	a1,32(sp)
9d00a7e8:	24020004 	li	v0,4
9d00a7ec:	10620008 	beq	v1,v0,9d00a810 <_dtoa_r+0xe90>
9d00a7f0:	8fa60028 	lw	a2,40(sp)
9d00a7f4:	8fa20020 	lw	v0,32(sp)
9d00a7f8:	2463001c 	addiu	v1,v1,28
9d00a7fc:	00c33021 	addu	a2,a2,v1
9d00a800:	00431021 	addu	v0,v0,v1
9d00a804:	02e3b821 	addu	s7,s7,v1
9d00a808:	afa60028 	sw	a2,40(sp)
9d00a80c:	afa20020 	sw	v0,32(sp)
9d00a810:	1ae00005 	blez	s7,9d00a828 <_dtoa_r+0xea8>
9d00a814:	02802821 	move	a1,s4
9d00a818:	02202021 	move	a0,s1
9d00a81c:	0f402db6 	jal	9d00b6d8 <__lshift>
9d00a820:	02e03021 	move	a2,s7
9d00a824:	0040a021 	move	s4,v0
9d00a828:	8fa30020 	lw	v1,32(sp)
9d00a82c:	18600005 	blez	v1,9d00a844 <_dtoa_r+0xec4>
9d00a830:	02a02821 	move	a1,s5
9d00a834:	02202021 	move	a0,s1
9d00a838:	0f402db6 	jal	9d00b6d8 <__lshift>
9d00a83c:	00603021 	move	a2,v1
9d00a840:	0040a821 	move	s5,v0
9d00a844:	8fa4004c 	lw	a0,76(sp)
9d00a848:	10800014 	beqz	a0,9d00a89c <_dtoa_r+0xf1c>
9d00a84c:	02802021 	move	a0,s4
9d00a850:	0f402e02 	jal	9d00b808 <__mcmp>
9d00a854:	02a02821 	move	a1,s5
9d00a858:	04410010 	bgez	v0,9d00a89c <_dtoa_r+0xf1c>
9d00a85c:	02802821 	move	a1,s4
9d00a860:	02202021 	move	a0,s1
9d00a864:	2406000a 	li	a2,10
9d00a868:	0f402c60 	jal	9d00b180 <__multadd>
9d00a86c:	00003821 	move	a3,zero
9d00a870:	8fa50040 	lw	a1,64(sp)
9d00a874:	2652ffff 	addiu	s2,s2,-1
9d00a878:	0040a021 	move	s4,v0
9d00a87c:	10a00007 	beqz	a1,9d00a89c <_dtoa_r+0xf1c>
9d00a880:	8fbe0044 	lw	s8,68(sp)
9d00a884:	02602821 	move	a1,s3
9d00a888:	02202021 	move	a0,s1
9d00a88c:	2406000a 	li	a2,10
9d00a890:	0f402c60 	jal	9d00b180 <__multadd>
9d00a894:	00003821 	move	a3,zero
9d00a898:	00409821 	move	s3,v0
9d00a89c:	1fc00022 	bgtz	s8,9d00a928 <_dtoa_r+0xfa8>
9d00a8a0:	8fa40040 	lw	a0,64(sp)
9d00a8a4:	8fa600b8 	lw	a2,184(sp)
9d00a8a8:	28c20003 	slti	v0,a2,3
9d00a8ac:	1440001e 	bnez	v0,9d00a928 <_dtoa_r+0xfa8>
9d00a8b0:	00000000 	nop
9d00a8b4:	17c0000f 	bnez	s8,9d00a8f4 <_dtoa_r+0xf74>
9d00a8b8:	02a02821 	move	a1,s5
9d00a8bc:	02202021 	move	a0,s1
9d00a8c0:	24060005 	li	a2,5
9d00a8c4:	0f402c60 	jal	9d00b180 <__multadd>
9d00a8c8:	00003821 	move	a3,zero
9d00a8cc:	00402821 	move	a1,v0
9d00a8d0:	02802021 	move	a0,s4
9d00a8d4:	0f402e02 	jal	9d00b808 <__mcmp>
9d00a8d8:	0040a821 	move	s5,v0
9d00a8dc:	1c40000c 	bgtz	v0,9d00a910 <_dtoa_r+0xf90>
9d00a8e0:	8fa3002c 	lw	v1,44(sp)
9d00a8e4:	0b402a3e 	j	9d00a8f8 <_dtoa_r+0xf78>
9d00a8e8:	8fa200bc 	lw	v0,188(sp)
9d00a8ec:	0000a821 	move	s5,zero
9d00a8f0:	00009821 	move	s3,zero
9d00a8f4:	8fa200bc 	lw	v0,188(sp)
9d00a8f8:	8fb0002c 	lw	s0,44(sp)
9d00a8fc:	0b402a48 	j	9d00a920 <_dtoa_r+0xfa0>
9d00a900:	00029027 	nor	s2,zero,v0
9d00a904:	0000a821 	move	s5,zero
9d00a908:	00009821 	move	s3,zero
9d00a90c:	8fa3002c 	lw	v1,44(sp)
9d00a910:	24020031 	li	v0,49
9d00a914:	26520001 	addiu	s2,s2,1
9d00a918:	a0620000 	sb	v0,0(v1)
9d00a91c:	24700001 	addiu	s0,v1,1
9d00a920:	0b402b10 	j	9d00ac40 <_dtoa_r+0x12c0>
9d00a924:	0000b821 	move	s7,zero
9d00a928:	14800004 	bnez	a0,9d00a93c <_dtoa_r+0xfbc>
9d00a92c:	8fa50028 	lw	a1,40(sp)
9d00a930:	8fb0002c 	lw	s0,44(sp)
9d00a934:	0b402adb 	j	9d00ab6c <_dtoa_r+0x11ec>
9d00a938:	24160001 	li	s6,1
9d00a93c:	18a00005 	blez	a1,9d00a954 <_dtoa_r+0xfd4>
9d00a940:	8fa60028 	lw	a2,40(sp)
9d00a944:	02602821 	move	a1,s3
9d00a948:	0f402db6 	jal	9d00b6d8 <__lshift>
9d00a94c:	02202021 	move	a0,s1
9d00a950:	00409821 	move	s3,v0
9d00a954:	8fa60030 	lw	a2,48(sp)
9d00a958:	10c0000f 	beqz	a2,9d00a998 <_dtoa_r+0x1018>
9d00a95c:	02601021 	move	v0,s3
9d00a960:	8e650004 	lw	a1,4(s3)
9d00a964:	0f402c2a 	jal	9d00b0a8 <_Balloc>
9d00a968:	02202021 	move	a0,s1
9d00a96c:	8e660010 	lw	a2,16(s3)
9d00a970:	00408021 	move	s0,v0
9d00a974:	2444000c 	addiu	a0,v0,12
9d00a978:	24c60002 	addiu	a2,a2,2
9d00a97c:	2665000c 	addiu	a1,s3,12
9d00a980:	0f401e01 	jal	9d007804 <memcpy>
9d00a984:	00063080 	sll	a2,a2,0x2
9d00a988:	02202021 	move	a0,s1
9d00a98c:	02002821 	move	a1,s0
9d00a990:	0f402db6 	jal	9d00b6d8 <__lshift>
9d00a994:	24060001 	li	a2,1
9d00a998:	8fb0002c 	lw	s0,44(sp)
9d00a99c:	32d60001 	andi	s6,s6,0x1
9d00a9a0:	0260b821 	move	s7,s3
9d00a9a4:	afb60020 	sw	s6,32(sp)
9d00a9a8:	00409821 	move	s3,v0
9d00a9ac:	02802021 	move	a0,s4
9d00a9b0:	0f4025df 	jal	9d00977c <quorem>
9d00a9b4:	02a02821 	move	a1,s5
9d00a9b8:	24430030 	addiu	v1,v0,48
9d00a9bc:	02802021 	move	a0,s4
9d00a9c0:	02e02821 	move	a1,s7
9d00a9c4:	0f402e02 	jal	9d00b808 <__mcmp>
9d00a9c8:	afa30074 	sw	v1,116(sp)
9d00a9cc:	02202021 	move	a0,s1
9d00a9d0:	02603021 	move	a2,s3
9d00a9d4:	02a02821 	move	a1,s5
9d00a9d8:	0f402e1c 	jal	9d00b870 <__mdiff>
9d00a9dc:	0040b021 	move	s6,v0
9d00a9e0:	8c44000c 	lw	a0,12(v0)
9d00a9e4:	00403021 	move	a2,v0
9d00a9e8:	8fa30074 	lw	v1,116(sp)
9d00a9ec:	14800007 	bnez	a0,9d00aa0c <_dtoa_r+0x108c>
9d00a9f0:	24020001 	li	v0,1
9d00a9f4:	00c02821 	move	a1,a2
9d00a9f8:	02802021 	move	a0,s4
9d00a9fc:	0f402e02 	jal	9d00b808 <__mcmp>
9d00aa00:	afa60070 	sw	a2,112(sp)
9d00aa04:	8fa60070 	lw	a2,112(sp)
9d00aa08:	8fa30074 	lw	v1,116(sp)
9d00aa0c:	02202021 	move	a0,s1
9d00aa10:	00c02821 	move	a1,a2
9d00aa14:	afa20070 	sw	v0,112(sp)
9d00aa18:	0f402c55 	jal	9d00b154 <_Bfree>
9d00aa1c:	afa30074 	sw	v1,116(sp)
9d00aa20:	8fa20070 	lw	v0,112(sp)
9d00aa24:	8fa500b8 	lw	a1,184(sp)
9d00aa28:	00452025 	or	a0,v0,a1
9d00aa2c:	14800009 	bnez	a0,9d00aa54 <_dtoa_r+0x10d4>
9d00aa30:	8fa30074 	lw	v1,116(sp)
9d00aa34:	8fa60020 	lw	a2,32(sp)
9d00aa38:	14c00006 	bnez	a2,9d00aa54 <_dtoa_r+0x10d4>
9d00aa3c:	00000000 	nop
9d00aa40:	24020039 	li	v0,57
9d00aa44:	10620022 	beq	v1,v0,9d00aad0 <_dtoa_r+0x1150>
9d00aa48:	0016b02a 	slt	s6,zero,s6
9d00aa4c:	0b402ab8 	j	9d00aae0 <_dtoa_r+0x1160>
9d00aa50:	00761821 	addu	v1,v1,s6
9d00aa54:	06c00006 	bltz	s6,9d00aa70 <_dtoa_r+0x10f0>
9d00aa58:	8fa400b8 	lw	a0,184(sp)
9d00aa5c:	02c4b025 	or	s6,s6,a0
9d00aa60:	16c00016 	bnez	s6,9d00aabc <_dtoa_r+0x113c>
9d00aa64:	8fa50020 	lw	a1,32(sp)
9d00aa68:	14a00014 	bnez	a1,9d00aabc <_dtoa_r+0x113c>
9d00aa6c:	00000000 	nop
9d00aa70:	1840001b 	blez	v0,9d00aae0 <_dtoa_r+0x1160>
9d00aa74:	02802821 	move	a1,s4
9d00aa78:	02202021 	move	a0,s1
9d00aa7c:	24060001 	li	a2,1
9d00aa80:	0f402db6 	jal	9d00b6d8 <__lshift>
9d00aa84:	afa30074 	sw	v1,116(sp)
9d00aa88:	00402021 	move	a0,v0
9d00aa8c:	02a02821 	move	a1,s5
9d00aa90:	0f402e02 	jal	9d00b808 <__mcmp>
9d00aa94:	0040a021 	move	s4,v0
9d00aa98:	1c40000a 	bgtz	v0,9d00aac4 <_dtoa_r+0x1144>
9d00aa9c:	8fa30074 	lw	v1,116(sp)
9d00aaa0:	54400010 	bnezl	v0,9d00aae4 <_dtoa_r+0x1164>
9d00aaa4:	a2030000 	sb	v1,0(s0)
9d00aaa8:	30620001 	andi	v0,v1,0x1
9d00aaac:	5040000d 	beqzl	v0,9d00aae4 <_dtoa_r+0x1164>
9d00aab0:	a2030000 	sb	v1,0(s0)
9d00aab4:	0b402ab2 	j	9d00aac8 <_dtoa_r+0x1148>
9d00aab8:	24020039 	li	v0,57
9d00aabc:	5840000b 	blezl	v0,9d00aaec <_dtoa_r+0x116c>
9d00aac0:	a2030000 	sb	v1,0(s0)
9d00aac4:	24020039 	li	v0,57
9d00aac8:	14620005 	bne	v1,v0,9d00aae0 <_dtoa_r+0x1160>
9d00aacc:	24630001 	addiu	v1,v1,1
9d00aad0:	24020039 	li	v0,57
9d00aad4:	a2020000 	sb	v0,0(s0)
9d00aad8:	0b402b05 	j	9d00ac14 <_dtoa_r+0x1294>
9d00aadc:	26100001 	addiu	s0,s0,1
9d00aae0:	a2030000 	sb	v1,0(s0)
9d00aae4:	0b402b10 	j	9d00ac40 <_dtoa_r+0x12c0>
9d00aae8:	26100001 	addiu	s0,s0,1
9d00aaec:	8fa6002c 	lw	a2,44(sp)
9d00aaf0:	26100001 	addiu	s0,s0,1
9d00aaf4:	02061023 	subu	v0,s0,a2
9d00aaf8:	105e002d 	beq	v0,s8,9d00abb0 <_dtoa_r+0x1230>
9d00aafc:	02802821 	move	a1,s4
9d00ab00:	02202021 	move	a0,s1
9d00ab04:	2406000a 	li	a2,10
9d00ab08:	0f402c60 	jal	9d00b180 <__multadd>
9d00ab0c:	00003821 	move	a3,zero
9d00ab10:	16f30009 	bne	s7,s3,9d00ab38 <_dtoa_r+0x11b8>
9d00ab14:	0040a021 	move	s4,v0
9d00ab18:	02e02821 	move	a1,s7
9d00ab1c:	02202021 	move	a0,s1
9d00ab20:	2406000a 	li	a2,10
9d00ab24:	0f402c60 	jal	9d00b180 <__multadd>
9d00ab28:	00003821 	move	a3,zero
9d00ab2c:	0040b821 	move	s7,v0
9d00ab30:	0b402a6b 	j	9d00a9ac <_dtoa_r+0x102c>
9d00ab34:	00409821 	move	s3,v0
9d00ab38:	02e02821 	move	a1,s7
9d00ab3c:	02202021 	move	a0,s1
9d00ab40:	2406000a 	li	a2,10
9d00ab44:	0f402c60 	jal	9d00b180 <__multadd>
9d00ab48:	00003821 	move	a3,zero
9d00ab4c:	02602821 	move	a1,s3
9d00ab50:	02202021 	move	a0,s1
9d00ab54:	2406000a 	li	a2,10
9d00ab58:	00003821 	move	a3,zero
9d00ab5c:	0f402c60 	jal	9d00b180 <__multadd>
9d00ab60:	0040b821 	move	s7,v0
9d00ab64:	0b402a6b 	j	9d00a9ac <_dtoa_r+0x102c>
9d00ab68:	00409821 	move	s3,v0
9d00ab6c:	02802021 	move	a0,s4
9d00ab70:	0f4025df 	jal	9d00977c <quorem>
9d00ab74:	02a02821 	move	a1,s5
9d00ab78:	24430030 	addiu	v1,v0,48
9d00ab7c:	02de202a 	slt	a0,s6,s8
9d00ab80:	a2030000 	sb	v1,0(s0)
9d00ab84:	10800009 	beqz	a0,9d00abac <_dtoa_r+0x122c>
9d00ab88:	26100001 	addiu	s0,s0,1
9d00ab8c:	02802821 	move	a1,s4
9d00ab90:	02202021 	move	a0,s1
9d00ab94:	2406000a 	li	a2,10
9d00ab98:	0f402c60 	jal	9d00b180 <__multadd>
9d00ab9c:	00003821 	move	a3,zero
9d00aba0:	0040a021 	move	s4,v0
9d00aba4:	0b402adb 	j	9d00ab6c <_dtoa_r+0x11ec>
9d00aba8:	26d60001 	addiu	s6,s6,1
9d00abac:	0000b821 	move	s7,zero
9d00abb0:	02802821 	move	a1,s4
9d00abb4:	02202021 	move	a0,s1
9d00abb8:	24060001 	li	a2,1
9d00abbc:	0f402db6 	jal	9d00b6d8 <__lshift>
9d00abc0:	afa30074 	sw	v1,116(sp)
9d00abc4:	00402021 	move	a0,v0
9d00abc8:	02a02821 	move	a1,s5
9d00abcc:	0f402e02 	jal	9d00b808 <__mcmp>
9d00abd0:	0040a021 	move	s4,v0
9d00abd4:	1c40000f 	bgtz	v0,9d00ac14 <_dtoa_r+0x1294>
9d00abd8:	8fa30074 	lw	v1,116(sp)
9d00abdc:	54400015 	bnezl	v0,9d00ac34 <_dtoa_r+0x12b4>
9d00abe0:	24020030 	li	v0,48
9d00abe4:	30630001 	andi	v1,v1,0x1
9d00abe8:	5460000b 	bnezl	v1,9d00ac18 <_dtoa_r+0x1298>
9d00abec:	24040039 	li	a0,57
9d00abf0:	0b402b0d 	j	9d00ac34 <_dtoa_r+0x12b4>
9d00abf4:	24020030 	li	v0,48
9d00abf8:	8fa3002c 	lw	v1,44(sp)
9d00abfc:	54430006 	bnel	v0,v1,9d00ac18 <_dtoa_r+0x1298>
9d00ac00:	00408021 	move	s0,v0
9d00ac04:	24020031 	li	v0,49
9d00ac08:	26520001 	addiu	s2,s2,1
9d00ac0c:	0b402b10 	j	9d00ac40 <_dtoa_r+0x12c0>
9d00ac10:	a0620000 	sb	v0,0(v1)
9d00ac14:	24040039 	li	a0,57
9d00ac18:	8203ffff 	lb	v1,-1(s0)
9d00ac1c:	1064fff6 	beq	v1,a0,9d00abf8 <_dtoa_r+0x1278>
9d00ac20:	2602ffff 	addiu	v0,s0,-1
9d00ac24:	24630001 	addiu	v1,v1,1
9d00ac28:	0b402b10 	j	9d00ac40 <_dtoa_r+0x12c0>
9d00ac2c:	a0430000 	sb	v1,0(v0)
9d00ac30:	00808021 	move	s0,a0
9d00ac34:	8203ffff 	lb	v1,-1(s0)
9d00ac38:	1062fffd 	beq	v1,v0,9d00ac30 <_dtoa_r+0x12b0>
9d00ac3c:	2604ffff 	addiu	a0,s0,-1
9d00ac40:	02202021 	move	a0,s1
9d00ac44:	0f402c55 	jal	9d00b154 <_Bfree>
9d00ac48:	02a02821 	move	a1,s5
9d00ac4c:	1260000f 	beqz	s3,9d00ac8c <_dtoa_r+0x130c>
9d00ac50:	02202021 	move	a0,s1
9d00ac54:	12e00006 	beqz	s7,9d00ac70 <_dtoa_r+0x12f0>
9d00ac58:	00000000 	nop
9d00ac5c:	12f30004 	beq	s7,s3,9d00ac70 <_dtoa_r+0x12f0>
9d00ac60:	00000000 	nop
9d00ac64:	0f402c55 	jal	9d00b154 <_Bfree>
9d00ac68:	02e02821 	move	a1,s7
9d00ac6c:	02202021 	move	a0,s1
9d00ac70:	0f402c55 	jal	9d00b154 <_Bfree>
9d00ac74:	02602821 	move	a1,s3
9d00ac78:	0b402b23 	j	9d00ac8c <_dtoa_r+0x130c>
9d00ac7c:	02202021 	move	a0,s1
9d00ac80:	8fb10038 	lw	s1,56(sp)
9d00ac84:	8fb20030 	lw	s2,48(sp)
9d00ac88:	02202021 	move	a0,s1
9d00ac8c:	0f402c55 	jal	9d00b154 <_Bfree>
9d00ac90:	02802821 	move	a1,s4
9d00ac94:	a2000000 	sb	zero,0(s0)
9d00ac98:	8fa400c0 	lw	a0,192(sp)
9d00ac9c:	8fa500c8 	lw	a1,200(sp)
9d00aca0:	26520001 	addiu	s2,s2,1
9d00aca4:	ac920000 	sw	s2,0(a0)
9d00aca8:	10a00002 	beqz	a1,9d00acb4 <_dtoa_r+0x1334>
9d00acac:	8fa2002c 	lw	v0,44(sp)
9d00acb0:	acb00000 	sw	s0,0(a1)
9d00acb4:	8fbf00a4 	lw	ra,164(sp)
9d00acb8:	8fbe00a0 	lw	s8,160(sp)
9d00acbc:	8fb7009c 	lw	s7,156(sp)
9d00acc0:	8fb60098 	lw	s6,152(sp)
9d00acc4:	8fb50094 	lw	s5,148(sp)
9d00acc8:	8fb40090 	lw	s4,144(sp)
9d00accc:	8fb3008c 	lw	s3,140(sp)
9d00acd0:	8fb20088 	lw	s2,136(sp)
9d00acd4:	8fb10084 	lw	s1,132(sp)
9d00acd8:	8fb00080 	lw	s0,128(sp)
9d00acdc:	03e00008 	jr	ra
9d00ace0:	27bd00a8 	addiu	sp,sp,168

9d00ace4 <_malloc_trim_r>:
9d00ace4:	27bdffd0 	addiu	sp,sp,-48
9d00ace8:	afb20024 	sw	s2,36(sp)
9d00acec:	3c12a000 	lui	s2,0xa000
9d00acf0:	265200f0 	addiu	s2,s2,240
9d00acf4:	afb30028 	sw	s3,40(sp)
9d00acf8:	afb10020 	sw	s1,32(sp)
9d00acfc:	afb0001c 	sw	s0,28(sp)
9d00ad00:	afa50010 	sw	a1,16(sp)
9d00ad04:	afbf002c 	sw	ra,44(sp)
9d00ad08:	0f401e26 	jal	9d007898 <__malloc_lock>
9d00ad0c:	00808021 	move	s0,a0
9d00ad10:	8e420008 	lw	v0,8(s2)
9d00ad14:	2413fffc 	li	s3,-4
9d00ad18:	8fa50010 	lw	a1,16(sp)
9d00ad1c:	8c420004 	lw	v0,4(v0)
9d00ad20:	02629824 	and	s3,s3,v0
9d00ad24:	2671006f 	addiu	s1,s3,111
9d00ad28:	02258823 	subu	s1,s1,a1
9d00ad2c:	001189c2 	srl	s1,s1,0x7
9d00ad30:	2631ffff 	addiu	s1,s1,-1
9d00ad34:	001189c0 	sll	s1,s1,0x7
9d00ad38:	2a220080 	slti	v0,s1,128
9d00ad3c:	1440001c 	bnez	v0,9d00adb0 <_malloc_trim_r+0xcc>
9d00ad40:	00000000 	nop
9d00ad44:	02002021 	move	a0,s0
9d00ad48:	0f401f7e 	jal	9d007df8 <_sbrk_r>
9d00ad4c:	00002821 	move	a1,zero
9d00ad50:	8e430008 	lw	v1,8(s2)
9d00ad54:	00731821 	addu	v1,v1,s3
9d00ad58:	14430015 	bne	v0,v1,9d00adb0 <_malloc_trim_r+0xcc>
9d00ad5c:	00000000 	nop
9d00ad60:	02002021 	move	a0,s0
9d00ad64:	0f401f7e 	jal	9d007df8 <_sbrk_r>
9d00ad68:	00112823 	negu	a1,s1
9d00ad6c:	2403ffff 	li	v1,-1
9d00ad70:	54430013 	bnel	v0,v1,9d00adc0 <_malloc_trim_r+0xdc>
9d00ad74:	8e420008 	lw	v0,8(s2)
9d00ad78:	02002021 	move	a0,s0
9d00ad7c:	0f401f7e 	jal	9d007df8 <_sbrk_r>
9d00ad80:	00002821 	move	a1,zero
9d00ad84:	8e430008 	lw	v1,8(s2)
9d00ad88:	00432023 	subu	a0,v0,v1
9d00ad8c:	28850010 	slti	a1,a0,16
9d00ad90:	14a00007 	bnez	a1,9d00adb0 <_malloc_trim_r+0xcc>
9d00ad94:	3c05a000 	lui	a1,0xa000
9d00ad98:	8ca50954 	lw	a1,2388(a1)
9d00ad9c:	34840001 	ori	a0,a0,0x1
9d00ada0:	ac640004 	sw	a0,4(v1)
9d00ada4:	00451023 	subu	v0,v0,a1
9d00ada8:	3c05a000 	lui	a1,0xa000
9d00adac:	aca21510 	sw	v0,5392(a1)
9d00adb0:	0f401e28 	jal	9d0078a0 <__malloc_unlock>
9d00adb4:	02002021 	move	a0,s0
9d00adb8:	0b402b7a 	j	9d00ade8 <_malloc_trim_r+0x104>
9d00adbc:	00001021 	move	v0,zero
9d00adc0:	02719823 	subu	s3,s3,s1
9d00adc4:	36730001 	ori	s3,s3,0x1
9d00adc8:	ac530004 	sw	s3,4(v0)
9d00adcc:	3c02a000 	lui	v0,0xa000
9d00add0:	8c431510 	lw	v1,5392(v0)
9d00add4:	02002021 	move	a0,s0
9d00add8:	00718823 	subu	s1,v1,s1
9d00addc:	0f401e28 	jal	9d0078a0 <__malloc_unlock>
9d00ade0:	ac511510 	sw	s1,5392(v0)
9d00ade4:	24020001 	li	v0,1
9d00ade8:	8fbf002c 	lw	ra,44(sp)
9d00adec:	8fb30028 	lw	s3,40(sp)
9d00adf0:	8fb20024 	lw	s2,36(sp)
9d00adf4:	8fb10020 	lw	s1,32(sp)
9d00adf8:	8fb0001c 	lw	s0,28(sp)
9d00adfc:	03e00008 	jr	ra
9d00ae00:	27bd0030 	addiu	sp,sp,48

9d00ae04 <_free_r>:
9d00ae04:	27bdffe0 	addiu	sp,sp,-32
9d00ae08:	afb00018 	sw	s0,24(sp)
9d00ae0c:	afbf001c 	sw	ra,28(sp)
9d00ae10:	10a00093 	beqz	a1,9d00b060 <_free_r+0x25c>
9d00ae14:	00808021 	move	s0,a0
9d00ae18:	0f401e26 	jal	9d007898 <__malloc_lock>
9d00ae1c:	afa50010 	sw	a1,16(sp)
9d00ae20:	8fa50010 	lw	a1,16(sp)
9d00ae24:	2403fffe 	li	v1,-2
9d00ae28:	2408fffc 	li	t0,-4
9d00ae2c:	24a2fff8 	addiu	v0,a1,-8
9d00ae30:	8c490004 	lw	t1,4(v0)
9d00ae34:	01231824 	and	v1,t1,v1
9d00ae38:	00433021 	addu	a2,v0,v1
9d00ae3c:	8cc40004 	lw	a0,4(a2)
9d00ae40:	01044024 	and	t0,t0,a0
9d00ae44:	3c04a000 	lui	a0,0xa000
9d00ae48:	248400f0 	addiu	a0,a0,240
9d00ae4c:	8c870008 	lw	a3,8(a0)
9d00ae50:	14c70017 	bne	a2,a3,9d00aeb0 <_free_r+0xac>
9d00ae54:	31290001 	andi	t1,t1,0x1
9d00ae58:	15200008 	bnez	t1,9d00ae7c <_free_r+0x78>
9d00ae5c:	01031821 	addu	v1,t0,v1
9d00ae60:	8ca5fff8 	lw	a1,-8(a1)
9d00ae64:	00451023 	subu	v0,v0,a1
9d00ae68:	8c460008 	lw	a2,8(v0)
9d00ae6c:	00651821 	addu	v1,v1,a1
9d00ae70:	8c45000c 	lw	a1,12(v0)
9d00ae74:	acc5000c 	sw	a1,12(a2)
9d00ae78:	aca60008 	sw	a2,8(a1)
9d00ae7c:	34650001 	ori	a1,v1,0x1
9d00ae80:	ac450004 	sw	a1,4(v0)
9d00ae84:	ac820008 	sw	v0,8(a0)
9d00ae88:	3c02a000 	lui	v0,0xa000
9d00ae8c:	8c480950 	lw	t0,2384(v0)
9d00ae90:	0068182b 	sltu	v1,v1,t0
9d00ae94:	14600070 	bnez	v1,9d00b058 <_free_r+0x254>
9d00ae98:	3c02a000 	lui	v0,0xa000
9d00ae9c:	8c4509c4 	lw	a1,2500(v0)
9d00aea0:	0f402b39 	jal	9d00ace4 <_malloc_trim_r>
9d00aea4:	02002021 	move	a0,s0
9d00aea8:	0b402c16 	j	9d00b058 <_free_r+0x254>
9d00aeac:	00000000 	nop
9d00aeb0:	acc80004 	sw	t0,4(a2)
9d00aeb4:	1520000c 	bnez	t1,9d00aee8 <_free_r+0xe4>
9d00aeb8:	00003821 	move	a3,zero
9d00aebc:	8ca5fff8 	lw	a1,-8(a1)
9d00aec0:	24890008 	addiu	t1,a0,8
9d00aec4:	00451023 	subu	v0,v0,a1
9d00aec8:	00651821 	addu	v1,v1,a1
9d00aecc:	8c450008 	lw	a1,8(v0)
9d00aed0:	10a90005 	beq	a1,t1,9d00aee8 <_free_r+0xe4>
9d00aed4:	24070001 	li	a3,1
9d00aed8:	8c47000c 	lw	a3,12(v0)
9d00aedc:	aca7000c 	sw	a3,12(a1)
9d00aee0:	ace50008 	sw	a1,8(a3)
9d00aee4:	00003821 	move	a3,zero
9d00aee8:	00c82821 	addu	a1,a2,t0
9d00aeec:	8ca50004 	lw	a1,4(a1)
9d00aef0:	30a50001 	andi	a1,a1,0x1
9d00aef4:	14a00011 	bnez	a1,9d00af3c <_free_r+0x138>
9d00aef8:	34650001 	ori	a1,v1,0x1
9d00aefc:	00681821 	addu	v1,v1,t0
9d00af00:	14e0000a 	bnez	a3,9d00af2c <_free_r+0x128>
9d00af04:	8cc50008 	lw	a1,8(a2)
9d00af08:	24880008 	addiu	t0,a0,8
9d00af0c:	54a80008 	bnel	a1,t0,9d00af30 <_free_r+0x12c>
9d00af10:	8cc6000c 	lw	a2,12(a2)
9d00af14:	aca2000c 	sw	v0,12(a1)
9d00af18:	aca20008 	sw	v0,8(a1)
9d00af1c:	ac45000c 	sw	a1,12(v0)
9d00af20:	ac450008 	sw	a1,8(v0)
9d00af24:	0b402bce 	j	9d00af38 <_free_r+0x134>
9d00af28:	24070001 	li	a3,1
9d00af2c:	8cc6000c 	lw	a2,12(a2)
9d00af30:	aca6000c 	sw	a2,12(a1)
9d00af34:	acc50008 	sw	a1,8(a2)
9d00af38:	34650001 	ori	a1,v1,0x1
9d00af3c:	ac450004 	sw	a1,4(v0)
9d00af40:	00432821 	addu	a1,v0,v1
9d00af44:	14e00044 	bnez	a3,9d00b058 <_free_r+0x254>
9d00af48:	aca30000 	sw	v1,0(a1)
9d00af4c:	2c650200 	sltiu	a1,v1,512
9d00af50:	10a00010 	beqz	a1,9d00af94 <_free_r+0x190>
9d00af54:	00033242 	srl	a2,v1,0x9
9d00af58:	000318c2 	srl	v1,v1,0x3
9d00af5c:	00032883 	sra	a1,v1,0x2
9d00af60:	24060001 	li	a2,1
9d00af64:	00a62804 	sllv	a1,a2,a1
9d00af68:	8c860004 	lw	a2,4(a0)
9d00af6c:	000318c0 	sll	v1,v1,0x3
9d00af70:	00c52825 	or	a1,a2,a1
9d00af74:	ac850004 	sw	a1,4(a0)
9d00af78:	00832021 	addu	a0,a0,v1
9d00af7c:	8c830008 	lw	v1,8(a0)
9d00af80:	ac44000c 	sw	a0,12(v0)
9d00af84:	ac430008 	sw	v1,8(v0)
9d00af88:	ac62000c 	sw	v0,12(v1)
9d00af8c:	0b402c16 	j	9d00b058 <_free_r+0x254>
9d00af90:	ac820008 	sw	v0,8(a0)
9d00af94:	2cc50005 	sltiu	a1,a2,5
9d00af98:	10a00004 	beqz	a1,9d00afac <_free_r+0x1a8>
9d00af9c:	2cc50015 	sltiu	a1,a2,21
9d00afa0:	00033182 	srl	a2,v1,0x6
9d00afa4:	0b402bfd 	j	9d00aff4 <_free_r+0x1f0>
9d00afa8:	24c60038 	addiu	a2,a2,56
9d00afac:	10a00003 	beqz	a1,9d00afbc <_free_r+0x1b8>
9d00afb0:	2cc50055 	sltiu	a1,a2,85
9d00afb4:	0b402bfd 	j	9d00aff4 <_free_r+0x1f0>
9d00afb8:	24c6005b 	addiu	a2,a2,91
9d00afbc:	10a00004 	beqz	a1,9d00afd0 <_free_r+0x1cc>
9d00afc0:	2cc50155 	sltiu	a1,a2,341
9d00afc4:	00033302 	srl	a2,v1,0xc
9d00afc8:	0b402bfd 	j	9d00aff4 <_free_r+0x1f0>
9d00afcc:	24c6006e 	addiu	a2,a2,110
9d00afd0:	10a00004 	beqz	a1,9d00afe4 <_free_r+0x1e0>
9d00afd4:	2cc50555 	sltiu	a1,a2,1365
9d00afd8:	000333c2 	srl	a2,v1,0xf
9d00afdc:	0b402bfd 	j	9d00aff4 <_free_r+0x1f0>
9d00afe0:	24c60077 	addiu	a2,a2,119
9d00afe4:	10a00003 	beqz	a1,9d00aff4 <_free_r+0x1f0>
9d00afe8:	2406007e 	li	a2,126
9d00afec:	00033482 	srl	a2,v1,0x12
9d00aff0:	24c6007c 	addiu	a2,a2,124
9d00aff4:	000638c0 	sll	a3,a2,0x3
9d00aff8:	00873821 	addu	a3,a0,a3
9d00affc:	8ce50008 	lw	a1,8(a3)
9d00b000:	14a7000b 	bne	a1,a3,9d00b030 <_free_r+0x22c>
9d00b004:	2408fffc 	li	t0,-4
9d00b008:	24030001 	li	v1,1
9d00b00c:	00063083 	sra	a2,a2,0x2
9d00b010:	00c33004 	sllv	a2,v1,a2
9d00b014:	8c830004 	lw	v1,4(a0)
9d00b018:	00663025 	or	a2,v1,a2
9d00b01c:	ac860004 	sw	a2,4(a0)
9d00b020:	0b402c12 	j	9d00b048 <_free_r+0x244>
9d00b024:	00a01821 	move	v1,a1
9d00b028:	50a70007 	beql	a1,a3,9d00b048 <_free_r+0x244>
9d00b02c:	8ca3000c 	lw	v1,12(a1)
9d00b030:	8ca40004 	lw	a0,4(a1)
9d00b034:	01042024 	and	a0,t0,a0
9d00b038:	0064202b 	sltu	a0,v1,a0
9d00b03c:	5480fffa 	bnezl	a0,9d00b028 <_free_r+0x224>
9d00b040:	8ca50008 	lw	a1,8(a1)
9d00b044:	8ca3000c 	lw	v1,12(a1)
9d00b048:	ac43000c 	sw	v1,12(v0)
9d00b04c:	ac450008 	sw	a1,8(v0)
9d00b050:	aca2000c 	sw	v0,12(a1)
9d00b054:	ac620008 	sw	v0,8(v1)
9d00b058:	0f401e28 	jal	9d0078a0 <__malloc_unlock>
9d00b05c:	02002021 	move	a0,s0
9d00b060:	8fbf001c 	lw	ra,28(sp)
9d00b064:	8fb00018 	lw	s0,24(sp)
9d00b068:	03e00008 	jr	ra
9d00b06c:	27bd0020 	addiu	sp,sp,32

9d00b070 <_localeconv_r>:
9d00b070:	3c02a000 	lui	v0,0xa000
9d00b074:	03e00008 	jr	ra
9d00b078:	24420910 	addiu	v0,v0,2320

9d00b07c <memchr>:
9d00b07c:	0b402c24 	j	9d00b090 <memchr+0x14>
9d00b080:	30a500ff 	andi	a1,a1,0xff
9d00b084:	10450006 	beq	v0,a1,9d00b0a0 <memchr+0x24>
9d00b088:	24c6ffff 	addiu	a2,a2,-1
9d00b08c:	24840001 	addiu	a0,a0,1
9d00b090:	54c0fffc 	bnezl	a2,9d00b084 <memchr+0x8>
9d00b094:	90820000 	lbu	v0,0(a0)
9d00b098:	03e00008 	jr	ra
9d00b09c:	00001021 	move	v0,zero
9d00b0a0:	03e00008 	jr	ra
9d00b0a4:	00801021 	move	v0,a0

9d00b0a8 <_Balloc>:
9d00b0a8:	8c82004c 	lw	v0,76(a0)
9d00b0ac:	27bdffe0 	addiu	sp,sp,-32
9d00b0b0:	afb10014 	sw	s1,20(sp)
9d00b0b4:	afb00010 	sw	s0,16(sp)
9d00b0b8:	afbf001c 	sw	ra,28(sp)
9d00b0bc:	afb20018 	sw	s2,24(sp)
9d00b0c0:	00808021 	move	s0,a0
9d00b0c4:	14400008 	bnez	v0,9d00b0e8 <_Balloc+0x40>
9d00b0c8:	00a08821 	move	s1,a1
9d00b0cc:	24050004 	li	a1,4
9d00b0d0:	0f402f6a 	jal	9d00bda8 <_calloc_r>
9d00b0d4:	24060021 	li	a2,33
9d00b0d8:	00401821 	move	v1,v0
9d00b0dc:	ae02004c 	sw	v0,76(s0)
9d00b0e0:	10600016 	beqz	v1,9d00b13c <_Balloc+0x94>
9d00b0e4:	00001021 	move	v0,zero
9d00b0e8:	8e03004c 	lw	v1,76(s0)
9d00b0ec:	00111080 	sll	v0,s1,0x2
9d00b0f0:	00621821 	addu	v1,v1,v0
9d00b0f4:	8c620000 	lw	v0,0(v1)
9d00b0f8:	10400004 	beqz	v0,9d00b10c <_Balloc+0x64>
9d00b0fc:	24120001 	li	s2,1
9d00b100:	8c440000 	lw	a0,0(v0)
9d00b104:	0b402c4d 	j	9d00b134 <_Balloc+0x8c>
9d00b108:	ac640000 	sw	a0,0(v1)
9d00b10c:	02329004 	sllv	s2,s2,s1
9d00b110:	26460005 	addiu	a2,s2,5
9d00b114:	02002021 	move	a0,s0
9d00b118:	24050001 	li	a1,1
9d00b11c:	0f402f6a 	jal	9d00bda8 <_calloc_r>
9d00b120:	00063080 	sll	a2,a2,0x2
9d00b124:	10400006 	beqz	v0,9d00b140 <_Balloc+0x98>
9d00b128:	8fbf001c 	lw	ra,28(sp)
9d00b12c:	ac510004 	sw	s1,4(v0)
9d00b130:	ac520008 	sw	s2,8(v0)
9d00b134:	ac400010 	sw	zero,16(v0)
9d00b138:	ac40000c 	sw	zero,12(v0)
9d00b13c:	8fbf001c 	lw	ra,28(sp)
9d00b140:	8fb20018 	lw	s2,24(sp)
9d00b144:	8fb10014 	lw	s1,20(sp)
9d00b148:	8fb00010 	lw	s0,16(sp)
9d00b14c:	03e00008 	jr	ra
9d00b150:	27bd0020 	addiu	sp,sp,32

9d00b154 <_Bfree>:
9d00b154:	10a00008 	beqz	a1,9d00b178 <_Bfree+0x24>
9d00b158:	00000000 	nop
9d00b15c:	8ca20004 	lw	v0,4(a1)
9d00b160:	8c83004c 	lw	v1,76(a0)
9d00b164:	00021080 	sll	v0,v0,0x2
9d00b168:	00621021 	addu	v0,v1,v0
9d00b16c:	8c430000 	lw	v1,0(v0)
9d00b170:	aca30000 	sw	v1,0(a1)
9d00b174:	ac450000 	sw	a1,0(v0)
9d00b178:	03e00008 	jr	ra
9d00b17c:	00000000 	nop

9d00b180 <__multadd>:
9d00b180:	27bdffd0 	addiu	sp,sp,-48
9d00b184:	afb20024 	sw	s2,36(sp)
9d00b188:	8cb20010 	lw	s2,16(a1)
9d00b18c:	afb10020 	sw	s1,32(sp)
9d00b190:	afb0001c 	sw	s0,28(sp)
9d00b194:	afbf002c 	sw	ra,44(sp)
9d00b198:	afb30028 	sw	s3,40(sp)
9d00b19c:	00808821 	move	s1,a0
9d00b1a0:	00a08021 	move	s0,a1
9d00b1a4:	24a20014 	addiu	v0,a1,20
9d00b1a8:	00001821 	move	v1,zero
9d00b1ac:	8c480000 	lw	t0,0(v0)
9d00b1b0:	24630001 	addiu	v1,v1,1
9d00b1b4:	3104ffff 	andi	a0,t0,0xffff
9d00b1b8:	70c42802 	mul	a1,a2,a0
9d00b1bc:	00a72021 	addu	a0,a1,a3
9d00b1c0:	00082c02 	srl	a1,t0,0x10
9d00b1c4:	70c54002 	mul	t0,a2,a1
9d00b1c8:	00043c02 	srl	a3,a0,0x10
9d00b1cc:	3084ffff 	andi	a0,a0,0xffff
9d00b1d0:	01072821 	addu	a1,t0,a3
9d00b1d4:	00053c02 	srl	a3,a1,0x10
9d00b1d8:	00052c00 	sll	a1,a1,0x10
9d00b1dc:	00a42021 	addu	a0,a1,a0
9d00b1e0:	ac440000 	sw	a0,0(v0)
9d00b1e4:	0072202a 	slt	a0,v1,s2
9d00b1e8:	1480fff0 	bnez	a0,9d00b1ac <__multadd+0x2c>
9d00b1ec:	24420004 	addiu	v0,v0,4
9d00b1f0:	10e0001d 	beqz	a3,9d00b268 <__multadd+0xe8>
9d00b1f4:	8fbf002c 	lw	ra,44(sp)
9d00b1f8:	8e020008 	lw	v0,8(s0)
9d00b1fc:	0242102a 	slt	v0,s2,v0
9d00b200:	14400013 	bnez	v0,9d00b250 <__multadd+0xd0>
9d00b204:	26420004 	addiu	v0,s2,4
9d00b208:	8e050004 	lw	a1,4(s0)
9d00b20c:	02202021 	move	a0,s1
9d00b210:	afa70010 	sw	a3,16(sp)
9d00b214:	0f402c2a 	jal	9d00b0a8 <_Balloc>
9d00b218:	24a50001 	addiu	a1,a1,1
9d00b21c:	8e060010 	lw	a2,16(s0)
9d00b220:	2605000c 	addiu	a1,s0,12
9d00b224:	2444000c 	addiu	a0,v0,12
9d00b228:	24c60002 	addiu	a2,a2,2
9d00b22c:	00063080 	sll	a2,a2,0x2
9d00b230:	0f401e01 	jal	9d007804 <memcpy>
9d00b234:	00409821 	move	s3,v0
9d00b238:	02002821 	move	a1,s0
9d00b23c:	0f402c55 	jal	9d00b154 <_Bfree>
9d00b240:	02202021 	move	a0,s1
9d00b244:	8fa70010 	lw	a3,16(sp)
9d00b248:	02608021 	move	s0,s3
9d00b24c:	26420004 	addiu	v0,s2,4
9d00b250:	00021080 	sll	v0,v0,0x2
9d00b254:	02021021 	addu	v0,s0,v0
9d00b258:	26520001 	addiu	s2,s2,1
9d00b25c:	ac470004 	sw	a3,4(v0)
9d00b260:	ae120010 	sw	s2,16(s0)
9d00b264:	8fbf002c 	lw	ra,44(sp)
9d00b268:	02001021 	move	v0,s0
9d00b26c:	8fb30028 	lw	s3,40(sp)
9d00b270:	8fb20024 	lw	s2,36(sp)
9d00b274:	8fb10020 	lw	s1,32(sp)
9d00b278:	8fb0001c 	lw	s0,28(sp)
9d00b27c:	03e00008 	jr	ra
9d00b280:	27bd0030 	addiu	sp,sp,48

9d00b284 <__hi0bits>:
9d00b284:	3c03ffff 	lui	v1,0xffff
9d00b288:	00831824 	and	v1,a0,v1
9d00b28c:	14600003 	bnez	v1,9d00b29c <__hi0bits+0x18>
9d00b290:	00001021 	move	v0,zero
9d00b294:	00042400 	sll	a0,a0,0x10
9d00b298:	24020010 	li	v0,16
9d00b29c:	3c03ff00 	lui	v1,0xff00
9d00b2a0:	00831824 	and	v1,a0,v1
9d00b2a4:	14600003 	bnez	v1,9d00b2b4 <__hi0bits+0x30>
9d00b2a8:	3c03f000 	lui	v1,0xf000
9d00b2ac:	24420008 	addiu	v0,v0,8
9d00b2b0:	00042200 	sll	a0,a0,0x8
9d00b2b4:	00831824 	and	v1,a0,v1
9d00b2b8:	14600003 	bnez	v1,9d00b2c8 <__hi0bits+0x44>
9d00b2bc:	3c03c000 	lui	v1,0xc000
9d00b2c0:	24420004 	addiu	v0,v0,4
9d00b2c4:	00042100 	sll	a0,a0,0x4
9d00b2c8:	00831824 	and	v1,a0,v1
9d00b2cc:	14600003 	bnez	v1,9d00b2dc <__hi0bits+0x58>
9d00b2d0:	00000000 	nop
9d00b2d4:	24420002 	addiu	v0,v0,2
9d00b2d8:	00042080 	sll	a0,a0,0x2
9d00b2dc:	04800005 	bltz	a0,9d00b2f4 <__hi0bits+0x70>
9d00b2e0:	3c034000 	lui	v1,0x4000
9d00b2e4:	00832024 	and	a0,a0,v1
9d00b2e8:	24430001 	addiu	v1,v0,1
9d00b2ec:	24020020 	li	v0,32
9d00b2f0:	0064100b 	movn	v0,v1,a0
9d00b2f4:	03e00008 	jr	ra
9d00b2f8:	00000000 	nop

9d00b2fc <__lo0bits>:
9d00b2fc:	8c830000 	lw	v1,0(a0)
9d00b300:	30620007 	andi	v0,v1,0x7
9d00b304:	1040000e 	beqz	v0,9d00b340 <__lo0bits+0x44>
9d00b308:	3065ffff 	andi	a1,v1,0xffff
9d00b30c:	30650001 	andi	a1,v1,0x1
9d00b310:	14a00026 	bnez	a1,9d00b3ac <__lo0bits+0xb0>
9d00b314:	00001021 	move	v0,zero
9d00b318:	30620002 	andi	v0,v1,0x2
9d00b31c:	50400005 	beqzl	v0,9d00b334 <__lo0bits+0x38>
9d00b320:	00031882 	srl	v1,v1,0x2
9d00b324:	00031842 	srl	v1,v1,0x1
9d00b328:	ac830000 	sw	v1,0(a0)
9d00b32c:	03e00008 	jr	ra
9d00b330:	24020001 	li	v0,1
9d00b334:	ac830000 	sw	v1,0(a0)
9d00b338:	03e00008 	jr	ra
9d00b33c:	24020002 	li	v0,2
9d00b340:	14a00003 	bnez	a1,9d00b350 <__lo0bits+0x54>
9d00b344:	00001021 	move	v0,zero
9d00b348:	00031c02 	srl	v1,v1,0x10
9d00b34c:	24020010 	li	v0,16
9d00b350:	306500ff 	andi	a1,v1,0xff
9d00b354:	14a00004 	bnez	a1,9d00b368 <__lo0bits+0x6c>
9d00b358:	3065000f 	andi	a1,v1,0xf
9d00b35c:	24420008 	addiu	v0,v0,8
9d00b360:	00031a02 	srl	v1,v1,0x8
9d00b364:	3065000f 	andi	a1,v1,0xf
9d00b368:	14a00004 	bnez	a1,9d00b37c <__lo0bits+0x80>
9d00b36c:	30650003 	andi	a1,v1,0x3
9d00b370:	24420004 	addiu	v0,v0,4
9d00b374:	00031902 	srl	v1,v1,0x4
9d00b378:	30650003 	andi	a1,v1,0x3
9d00b37c:	14a00004 	bnez	a1,9d00b390 <__lo0bits+0x94>
9d00b380:	30650001 	andi	a1,v1,0x1
9d00b384:	24420002 	addiu	v0,v0,2
9d00b388:	00031882 	srl	v1,v1,0x2
9d00b38c:	30650001 	andi	a1,v1,0x1
9d00b390:	54a00006 	bnezl	a1,9d00b3ac <__lo0bits+0xb0>
9d00b394:	ac830000 	sw	v1,0(a0)
9d00b398:	00031842 	srl	v1,v1,0x1
9d00b39c:	50600003 	beqzl	v1,9d00b3ac <__lo0bits+0xb0>
9d00b3a0:	24020020 	li	v0,32
9d00b3a4:	24420001 	addiu	v0,v0,1
9d00b3a8:	ac830000 	sw	v1,0(a0)
9d00b3ac:	03e00008 	jr	ra
9d00b3b0:	00000000 	nop

9d00b3b4 <__i2b>:
9d00b3b4:	27bdffe8 	addiu	sp,sp,-24
9d00b3b8:	afb00010 	sw	s0,16(sp)
9d00b3bc:	00a08021 	move	s0,a1
9d00b3c0:	afbf0014 	sw	ra,20(sp)
9d00b3c4:	0f402c2a 	jal	9d00b0a8 <_Balloc>
9d00b3c8:	24050001 	li	a1,1
9d00b3cc:	8fbf0014 	lw	ra,20(sp)
9d00b3d0:	24040001 	li	a0,1
9d00b3d4:	ac500014 	sw	s0,20(v0)
9d00b3d8:	ac440010 	sw	a0,16(v0)
9d00b3dc:	8fb00010 	lw	s0,16(sp)
9d00b3e0:	03e00008 	jr	ra
9d00b3e4:	27bd0018 	addiu	sp,sp,24

9d00b3e8 <__multiply>:
9d00b3e8:	8ca30010 	lw	v1,16(a1)
9d00b3ec:	8cc20010 	lw	v0,16(a2)
9d00b3f0:	27bdffd0 	addiu	sp,sp,-48
9d00b3f4:	afb0001c 	sw	s0,28(sp)
9d00b3f8:	0062102a 	slt	v0,v1,v0
9d00b3fc:	afbf002c 	sw	ra,44(sp)
9d00b400:	afb30028 	sw	s3,40(sp)
9d00b404:	afb20024 	sw	s2,36(sp)
9d00b408:	afb10020 	sw	s1,32(sp)
9d00b40c:	10400003 	beqz	v0,9d00b41c <__multiply+0x34>
9d00b410:	00a08021 	move	s0,a1
9d00b414:	00c08021 	move	s0,a2
9d00b418:	00a03021 	move	a2,a1
9d00b41c:	8cd20010 	lw	s2,16(a2)
9d00b420:	8e130010 	lw	s3,16(s0)
9d00b424:	8e050008 	lw	a1,8(s0)
9d00b428:	8e020004 	lw	v0,4(s0)
9d00b42c:	02538821 	addu	s1,s2,s3
9d00b430:	00b1282a 	slt	a1,a1,s1
9d00b434:	00452821 	addu	a1,v0,a1
9d00b438:	0f402c2a 	jal	9d00b0a8 <_Balloc>
9d00b43c:	afa60010 	sw	a2,16(sp)
9d00b440:	262a0004 	addiu	t2,s1,4
9d00b444:	000a5080 	sll	t2,t2,0x2
9d00b448:	24440014 	addiu	a0,v0,20
9d00b44c:	004a5021 	addu	t2,v0,t2
9d00b450:	254a0004 	addiu	t2,t2,4
9d00b454:	00801821 	move	v1,a0
9d00b458:	0b402d19 	j	9d00b464 <__multiply+0x7c>
9d00b45c:	8fa60010 	lw	a2,16(sp)
9d00b460:	24630004 	addiu	v1,v1,4
9d00b464:	006a282b 	sltu	a1,v1,t2
9d00b468:	54a0fffd 	bnezl	a1,9d00b460 <__multiply+0x78>
9d00b46c:	ac600000 	sw	zero,0(v1)
9d00b470:	26730004 	addiu	s3,s3,4
9d00b474:	26520004 	addiu	s2,s2,4
9d00b478:	00139880 	sll	s3,s3,0x2
9d00b47c:	00129080 	sll	s2,s2,0x2
9d00b480:	260b0014 	addiu	t3,s0,20
9d00b484:	24c50014 	addiu	a1,a2,20
9d00b488:	02138021 	addu	s0,s0,s3
9d00b48c:	00d23021 	addu	a2,a2,s2
9d00b490:	26100004 	addiu	s0,s0,4
9d00b494:	0b402d61 	j	9d00b584 <__multiply+0x19c>
9d00b498:	24c60004 	addiu	a2,a2,4
9d00b49c:	5120001c 	beqzl	t1,9d00b510 <__multiply+0x128>
9d00b4a0:	94a90002 	lhu	t1,2(a1)
9d00b4a4:	00801821 	move	v1,a0
9d00b4a8:	01603821 	move	a3,t3
9d00b4ac:	00004021 	move	t0,zero
9d00b4b0:	8ced0000 	lw	t5,0(a3)
9d00b4b4:	8c6e0000 	lw	t6,0(v1)
9d00b4b8:	24e70004 	addiu	a3,a3,4
9d00b4bc:	31afffff 	andi	t7,t5,0xffff
9d00b4c0:	71e99002 	mul	s2,t7,t1
9d00b4c4:	31ccffff 	andi	t4,t6,0xffff
9d00b4c8:	000d6c02 	srl	t5,t5,0x10
9d00b4cc:	000e7402 	srl	t6,t6,0x10
9d00b4d0:	024c6021 	addu	t4,s2,t4
9d00b4d4:	01886021 	addu	t4,t4,t0
9d00b4d8:	71a94002 	mul	t0,t5,t1
9d00b4dc:	010e6821 	addu	t5,t0,t6
9d00b4e0:	000c4402 	srl	t0,t4,0x10
9d00b4e4:	01a86821 	addu	t5,t5,t0
9d00b4e8:	000d4402 	srl	t0,t5,0x10
9d00b4ec:	318cffff 	andi	t4,t4,0xffff
9d00b4f0:	000d6c00 	sll	t5,t5,0x10
9d00b4f4:	01ac6025 	or	t4,t5,t4
9d00b4f8:	ac6c0000 	sw	t4,0(v1)
9d00b4fc:	00f0602b 	sltu	t4,a3,s0
9d00b500:	1580ffeb 	bnez	t4,9d00b4b0 <__multiply+0xc8>
9d00b504:	24630004 	addiu	v1,v1,4
9d00b508:	ac680000 	sw	t0,0(v1)
9d00b50c:	94a90002 	lhu	t1,2(a1)
9d00b510:	5120001b 	beqzl	t1,9d00b580 <__multiply+0x198>
9d00b514:	24a50004 	addiu	a1,a1,4
9d00b518:	8c880000 	lw	t0,0(a0)
9d00b51c:	00801821 	move	v1,a0
9d00b520:	01603821 	move	a3,t3
9d00b524:	00006021 	move	t4,zero
9d00b528:	94ee0000 	lhu	t6,0(a3)
9d00b52c:	946d0002 	lhu	t5,2(v1)
9d00b530:	3108ffff 	andi	t0,t0,0xffff
9d00b534:	71c97802 	mul	t7,t6,t1
9d00b538:	01ed6821 	addu	t5,t7,t5
9d00b53c:	01ac6021 	addu	t4,t5,t4
9d00b540:	000c6c00 	sll	t5,t4,0x10
9d00b544:	01a84025 	or	t0,t5,t0
9d00b548:	ac680000 	sw	t0,0(v1)
9d00b54c:	94ed0002 	lhu	t5,2(a3)
9d00b550:	24630004 	addiu	v1,v1,4
9d00b554:	94680000 	lhu	t0,0(v1)
9d00b558:	71a97002 	mul	t6,t5,t1
9d00b55c:	000c6402 	srl	t4,t4,0x10
9d00b560:	24e70004 	addiu	a3,a3,4
9d00b564:	00f0682b 	sltu	t5,a3,s0
9d00b568:	01c84021 	addu	t0,t6,t0
9d00b56c:	010c4021 	addu	t0,t0,t4
9d00b570:	15a0ffed 	bnez	t5,9d00b528 <__multiply+0x140>
9d00b574:	00086402 	srl	t4,t0,0x10
9d00b578:	ac680000 	sw	t0,0(v1)
9d00b57c:	24a50004 	addiu	a1,a1,4
9d00b580:	24840004 	addiu	a0,a0,4
9d00b584:	00a6182b 	sltu	v1,a1,a2
9d00b588:	5460ffc4 	bnezl	v1,9d00b49c <__multiply+0xb4>
9d00b58c:	94a90000 	lhu	t1,0(a1)
9d00b590:	01401821 	move	v1,t2
9d00b594:	1a200006 	blez	s1,9d00b5b0 <__multiply+0x1c8>
9d00b598:	8fbf002c 	lw	ra,44(sp)
9d00b59c:	2463fffc 	addiu	v1,v1,-4
9d00b5a0:	8c640000 	lw	a0,0(v1)
9d00b5a4:	5080fffb 	beqzl	a0,9d00b594 <__multiply+0x1ac>
9d00b5a8:	2631ffff 	addiu	s1,s1,-1
9d00b5ac:	8fbf002c 	lw	ra,44(sp)
9d00b5b0:	ac510010 	sw	s1,16(v0)
9d00b5b4:	8fb30028 	lw	s3,40(sp)
9d00b5b8:	8fb20024 	lw	s2,36(sp)
9d00b5bc:	8fb10020 	lw	s1,32(sp)
9d00b5c0:	8fb0001c 	lw	s0,28(sp)
9d00b5c4:	03e00008 	jr	ra
9d00b5c8:	27bd0030 	addiu	sp,sp,48

9d00b5cc <__pow5mult>:
9d00b5cc:	27bdffd0 	addiu	sp,sp,-48
9d00b5d0:	30c20003 	andi	v0,a2,0x3
9d00b5d4:	afb30028 	sw	s3,40(sp)
9d00b5d8:	afb10020 	sw	s1,32(sp)
9d00b5dc:	afb0001c 	sw	s0,28(sp)
9d00b5e0:	afbf002c 	sw	ra,44(sp)
9d00b5e4:	afb20024 	sw	s2,36(sp)
9d00b5e8:	00808021 	move	s0,a0
9d00b5ec:	00a09821 	move	s3,a1
9d00b5f0:	1040000a 	beqz	v0,9d00b61c <__pow5mult+0x50>
9d00b5f4:	00c08821 	move	s1,a2
9d00b5f8:	2442ffff 	addiu	v0,v0,-1
9d00b5fc:	3c039d03 	lui	v1,0x9d03
9d00b600:	2463c130 	addiu	v1,v1,-16080
9d00b604:	00021080 	sll	v0,v0,0x2
9d00b608:	00431021 	addu	v0,v0,v1
9d00b60c:	8c460000 	lw	a2,0(v0)
9d00b610:	0f402c60 	jal	9d00b180 <__multadd>
9d00b614:	00003821 	move	a3,zero
9d00b618:	00409821 	move	s3,v0
9d00b61c:	00118883 	sra	s1,s1,0x2
9d00b620:	12200026 	beqz	s1,9d00b6bc <__pow5mult+0xf0>
9d00b624:	8fbf002c 	lw	ra,44(sp)
9d00b628:	8e120048 	lw	s2,72(s0)
9d00b62c:	1640000a 	bnez	s2,9d00b658 <__pow5mult+0x8c>
9d00b630:	32220001 	andi	v0,s1,0x1
9d00b634:	02002021 	move	a0,s0
9d00b638:	0f402ced 	jal	9d00b3b4 <__i2b>
9d00b63c:	24050271 	li	a1,625
9d00b640:	ae020048 	sw	v0,72(s0)
9d00b644:	00409021 	move	s2,v0
9d00b648:	0b402d95 	j	9d00b654 <__pow5mult+0x88>
9d00b64c:	ac400000 	sw	zero,0(v0)
9d00b650:	00409021 	move	s2,v0
9d00b654:	32220001 	andi	v0,s1,0x1
9d00b658:	5040000c 	beqzl	v0,9d00b68c <__pow5mult+0xc0>
9d00b65c:	00118843 	sra	s1,s1,0x1
9d00b660:	02602821 	move	a1,s3
9d00b664:	02002021 	move	a0,s0
9d00b668:	0f402cfa 	jal	9d00b3e8 <__multiply>
9d00b66c:	02403021 	move	a2,s2
9d00b670:	02602821 	move	a1,s3
9d00b674:	02002021 	move	a0,s0
9d00b678:	0f402c55 	jal	9d00b154 <_Bfree>
9d00b67c:	afa20010 	sw	v0,16(sp)
9d00b680:	8fa20010 	lw	v0,16(sp)
9d00b684:	00409821 	move	s3,v0
9d00b688:	00118843 	sra	s1,s1,0x1
9d00b68c:	1220000b 	beqz	s1,9d00b6bc <__pow5mult+0xf0>
9d00b690:	8fbf002c 	lw	ra,44(sp)
9d00b694:	8e420000 	lw	v0,0(s2)
9d00b698:	5440ffee 	bnezl	v0,9d00b654 <__pow5mult+0x88>
9d00b69c:	00409021 	move	s2,v0
9d00b6a0:	02002021 	move	a0,s0
9d00b6a4:	02402821 	move	a1,s2
9d00b6a8:	0f402cfa 	jal	9d00b3e8 <__multiply>
9d00b6ac:	02403021 	move	a2,s2
9d00b6b0:	ae420000 	sw	v0,0(s2)
9d00b6b4:	0b402d94 	j	9d00b650 <__pow5mult+0x84>
9d00b6b8:	ac400000 	sw	zero,0(v0)
9d00b6bc:	02601021 	move	v0,s3
9d00b6c0:	8fb30028 	lw	s3,40(sp)
9d00b6c4:	8fb20024 	lw	s2,36(sp)
9d00b6c8:	8fb10020 	lw	s1,32(sp)
9d00b6cc:	8fb0001c 	lw	s0,28(sp)
9d00b6d0:	03e00008 	jr	ra
9d00b6d4:	27bd0030 	addiu	sp,sp,48

9d00b6d8 <__lshift>:
9d00b6d8:	27bdffd0 	addiu	sp,sp,-48
9d00b6dc:	afb0001c 	sw	s0,28(sp)
9d00b6e0:	00a08021 	move	s0,a1
9d00b6e4:	afb20024 	sw	s2,36(sp)
9d00b6e8:	8e120010 	lw	s2,16(s0)
9d00b6ec:	afb30028 	sw	s3,40(sp)
9d00b6f0:	00069943 	sra	s3,a2,0x5
9d00b6f4:	26520001 	addiu	s2,s2,1
9d00b6f8:	afb10020 	sw	s1,32(sp)
9d00b6fc:	afbf002c 	sw	ra,44(sp)
9d00b700:	00808821 	move	s1,a0
9d00b704:	8ca50004 	lw	a1,4(a1)
9d00b708:	02539021 	addu	s2,s2,s3
9d00b70c:	0b402dc6 	j	9d00b718 <__lshift+0x40>
9d00b710:	8e020008 	lw	v0,8(s0)
9d00b714:	00021040 	sll	v0,v0,0x1
9d00b718:	0052182a 	slt	v1,v0,s2
9d00b71c:	5460fffd 	bnezl	v1,9d00b714 <__lshift+0x3c>
9d00b720:	24a50001 	addiu	a1,a1,1
9d00b724:	02202021 	move	a0,s1
9d00b728:	0f402c2a 	jal	9d00b0a8 <_Balloc>
9d00b72c:	afa60010 	sw	a2,16(sp)
9d00b730:	24430014 	addiu	v1,v0,20
9d00b734:	00002021 	move	a0,zero
9d00b738:	0b402dd2 	j	9d00b748 <__lshift+0x70>
9d00b73c:	8fa60010 	lw	a2,16(sp)
9d00b740:	24840001 	addiu	a0,a0,1
9d00b744:	24630004 	addiu	v1,v1,4
9d00b748:	0093282a 	slt	a1,a0,s3
9d00b74c:	54a0fffc 	bnezl	a1,9d00b740 <__lshift+0x68>
9d00b750:	ac600000 	sw	zero,0(v1)
9d00b754:	8e070010 	lw	a3,16(s0)
9d00b758:	30c6001f 	andi	a2,a2,0x1f
9d00b75c:	26040014 	addiu	a0,s0,20
9d00b760:	24e70004 	addiu	a3,a3,4
9d00b764:	00073880 	sll	a3,a3,0x2
9d00b768:	02073821 	addu	a3,s0,a3
9d00b76c:	10c00012 	beqz	a2,9d00b7b8 <__lshift+0xe0>
9d00b770:	24e70004 	addiu	a3,a3,4
9d00b774:	24080020 	li	t0,32
9d00b778:	01064023 	subu	t0,t0,a2
9d00b77c:	00002821 	move	a1,zero
9d00b780:	8c890000 	lw	t1,0(a0)
9d00b784:	00c94804 	sllv	t1,t1,a2
9d00b788:	00a92825 	or	a1,a1,t1
9d00b78c:	ac650000 	sw	a1,0(v1)
9d00b790:	8c850000 	lw	a1,0(a0)
9d00b794:	24840004 	addiu	a0,a0,4
9d00b798:	0087482b 	sltu	t1,a0,a3
9d00b79c:	24630004 	addiu	v1,v1,4
9d00b7a0:	1520fff7 	bnez	t1,9d00b780 <__lshift+0xa8>
9d00b7a4:	01052806 	srlv	a1,a1,t0
9d00b7a8:	ac650000 	sw	a1,0(v1)
9d00b7ac:	0005282b 	sltu	a1,zero,a1
9d00b7b0:	0b402df4 	j	9d00b7d0 <__lshift+0xf8>
9d00b7b4:	02459021 	addu	s2,s2,a1
9d00b7b8:	8c850000 	lw	a1,0(a0)
9d00b7bc:	24840004 	addiu	a0,a0,4
9d00b7c0:	ac650000 	sw	a1,0(v1)
9d00b7c4:	0087282b 	sltu	a1,a0,a3
9d00b7c8:	14a0fffb 	bnez	a1,9d00b7b8 <__lshift+0xe0>
9d00b7cc:	24630004 	addiu	v1,v1,4
9d00b7d0:	2652ffff 	addiu	s2,s2,-1
9d00b7d4:	ac520010 	sw	s2,16(v0)
9d00b7d8:	02202021 	move	a0,s1
9d00b7dc:	02002821 	move	a1,s0
9d00b7e0:	0f402c55 	jal	9d00b154 <_Bfree>
9d00b7e4:	afa20010 	sw	v0,16(sp)
9d00b7e8:	8fbf002c 	lw	ra,44(sp)
9d00b7ec:	8fa20010 	lw	v0,16(sp)
9d00b7f0:	8fb30028 	lw	s3,40(sp)
9d00b7f4:	8fb20024 	lw	s2,36(sp)
9d00b7f8:	8fb10020 	lw	s1,32(sp)
9d00b7fc:	8fb0001c 	lw	s0,28(sp)
9d00b800:	03e00008 	jr	ra
9d00b804:	27bd0030 	addiu	sp,sp,48

9d00b808 <__mcmp>:
9d00b808:	8c820010 	lw	v0,16(a0)
9d00b80c:	8ca30010 	lw	v1,16(a1)
9d00b810:	00431023 	subu	v0,v0,v1
9d00b814:	14400014 	bnez	v0,9d00b868 <__mcmp+0x60>
9d00b818:	24630004 	addiu	v1,v1,4
9d00b81c:	00031880 	sll	v1,v1,0x2
9d00b820:	24870014 	addiu	a3,a0,20
9d00b824:	00a32821 	addu	a1,a1,v1
9d00b828:	00832021 	addu	a0,a0,v1
9d00b82c:	24840004 	addiu	a0,a0,4
9d00b830:	24a50004 	addiu	a1,a1,4
9d00b834:	2484fffc 	addiu	a0,a0,-4
9d00b838:	24a5fffc 	addiu	a1,a1,-4
9d00b83c:	8c860000 	lw	a2,0(a0)
9d00b840:	8ca30000 	lw	v1,0(a1)
9d00b844:	50c30006 	beql	a2,v1,9d00b860 <__mcmp+0x58>
9d00b848:	00e4182b 	sltu	v1,a3,a0
9d00b84c:	00c3182b 	sltu	v1,a2,v1
9d00b850:	2402ffff 	li	v0,-1
9d00b854:	24040001 	li	a0,1
9d00b858:	03e00008 	jr	ra
9d00b85c:	0083100a 	movz	v0,a0,v1
9d00b860:	1460fff5 	bnez	v1,9d00b838 <__mcmp+0x30>
9d00b864:	2484fffc 	addiu	a0,a0,-4
9d00b868:	03e00008 	jr	ra
9d00b86c:	00000000 	nop

9d00b870 <__mdiff>:
9d00b870:	27bdffd8 	addiu	sp,sp,-40
9d00b874:	afb10018 	sw	s1,24(sp)
9d00b878:	afb00014 	sw	s0,20(sp)
9d00b87c:	00808821 	move	s1,a0
9d00b880:	00a08021 	move	s0,a1
9d00b884:	00a02021 	move	a0,a1
9d00b888:	00c02821 	move	a1,a2
9d00b88c:	afb2001c 	sw	s2,28(sp)
9d00b890:	afbf0024 	sw	ra,36(sp)
9d00b894:	afb30020 	sw	s3,32(sp)
9d00b898:	0f402e02 	jal	9d00b808 <__mcmp>
9d00b89c:	00c09021 	move	s2,a2
9d00b8a0:	14400007 	bnez	v0,9d00b8c0 <__mdiff+0x50>
9d00b8a4:	02202021 	move	a0,s1
9d00b8a8:	0f402c2a 	jal	9d00b0a8 <_Balloc>
9d00b8ac:	00002821 	move	a1,zero
9d00b8b0:	24030001 	li	v1,1
9d00b8b4:	ac430010 	sw	v1,16(v0)
9d00b8b8:	0b402e75 	j	9d00b9d4 <__mdiff+0x164>
9d00b8bc:	ac400014 	sw	zero,20(v0)
9d00b8c0:	04410005 	bgez	v0,9d00b8d8 <__mdiff+0x68>
9d00b8c4:	00009821 	move	s3,zero
9d00b8c8:	02001021 	move	v0,s0
9d00b8cc:	24130001 	li	s3,1
9d00b8d0:	02408021 	move	s0,s2
9d00b8d4:	00409021 	move	s2,v0
9d00b8d8:	8e050004 	lw	a1,4(s0)
9d00b8dc:	0f402c2a 	jal	9d00b0a8 <_Balloc>
9d00b8e0:	02202021 	move	a0,s1
9d00b8e4:	8e050010 	lw	a1,16(s0)
9d00b8e8:	26040014 	addiu	a0,s0,20
9d00b8ec:	26470014 	addiu	a3,s2,20
9d00b8f0:	24a30004 	addiu	v1,a1,4
9d00b8f4:	00031880 	sll	v1,v1,0x2
9d00b8f8:	02038021 	addu	s0,s0,v1
9d00b8fc:	8e430010 	lw	v1,16(s2)
9d00b900:	ac53000c 	sw	s3,12(v0)
9d00b904:	26100004 	addiu	s0,s0,4
9d00b908:	24630004 	addiu	v1,v1,4
9d00b90c:	00031880 	sll	v1,v1,0x2
9d00b910:	02439021 	addu	s2,s2,v1
9d00b914:	26520004 	addiu	s2,s2,4
9d00b918:	24430014 	addiu	v1,v0,20
9d00b91c:	00003021 	move	a2,zero
9d00b920:	8c890000 	lw	t1,0(a0)
9d00b924:	8cea0000 	lw	t2,0(a3)
9d00b928:	24e70004 	addiu	a3,a3,4
9d00b92c:	312bffff 	andi	t3,t1,0xffff
9d00b930:	3148ffff 	andi	t0,t2,0xffff
9d00b934:	01684023 	subu	t0,t3,t0
9d00b938:	01064021 	addu	t0,t0,a2
9d00b93c:	00094c02 	srl	t1,t1,0x10
9d00b940:	000a5402 	srl	t2,t2,0x10
9d00b944:	00083403 	sra	a2,t0,0x10
9d00b948:	012a4823 	subu	t1,t1,t2
9d00b94c:	01264821 	addu	t1,t1,a2
9d00b950:	00093403 	sra	a2,t1,0x10
9d00b954:	3108ffff 	andi	t0,t0,0xffff
9d00b958:	00094c00 	sll	t1,t1,0x10
9d00b95c:	01284025 	or	t0,t1,t0
9d00b960:	ac680000 	sw	t0,0(v1)
9d00b964:	00f2402b 	sltu	t0,a3,s2
9d00b968:	24840004 	addiu	a0,a0,4
9d00b96c:	1500ffec 	bnez	t0,9d00b920 <__mdiff+0xb0>
9d00b970:	24630004 	addiu	v1,v1,4
9d00b974:	0b402e6c 	j	9d00b9b0 <__mdiff+0x140>
9d00b978:	0090382b 	sltu	a3,a0,s0
9d00b97c:	24840004 	addiu	a0,a0,4
9d00b980:	3127ffff 	andi	a3,t1,0xffff
9d00b984:	00c73821 	addu	a3,a2,a3
9d00b988:	00074403 	sra	t0,a3,0x10
9d00b98c:	00094c02 	srl	t1,t1,0x10
9d00b990:	01094021 	addu	t0,t0,t1
9d00b994:	00083403 	sra	a2,t0,0x10
9d00b998:	30e7ffff 	andi	a3,a3,0xffff
9d00b99c:	00084400 	sll	t0,t0,0x10
9d00b9a0:	01073825 	or	a3,t0,a3
9d00b9a4:	ac670000 	sw	a3,0(v1)
9d00b9a8:	24630004 	addiu	v1,v1,4
9d00b9ac:	0090382b 	sltu	a3,a0,s0
9d00b9b0:	54e0fff2 	bnezl	a3,9d00b97c <__mdiff+0x10c>
9d00b9b4:	8c890000 	lw	t1,0(a0)
9d00b9b8:	0b402e71 	j	9d00b9c4 <__mdiff+0x154>
9d00b9bc:	2463fffc 	addiu	v1,v1,-4
9d00b9c0:	2463fffc 	addiu	v1,v1,-4
9d00b9c4:	8c640000 	lw	a0,0(v1)
9d00b9c8:	5080fffd 	beqzl	a0,9d00b9c0 <__mdiff+0x150>
9d00b9cc:	24a5ffff 	addiu	a1,a1,-1
9d00b9d0:	ac450010 	sw	a1,16(v0)
9d00b9d4:	8fbf0024 	lw	ra,36(sp)
9d00b9d8:	8fb30020 	lw	s3,32(sp)
9d00b9dc:	8fb2001c 	lw	s2,28(sp)
9d00b9e0:	8fb10018 	lw	s1,24(sp)
9d00b9e4:	8fb00014 	lw	s0,20(sp)
9d00b9e8:	03e00008 	jr	ra
9d00b9ec:	27bd0028 	addiu	sp,sp,40

9d00b9f0 <__d2b>:
9d00b9f0:	27bdffd0 	addiu	sp,sp,-48
9d00b9f4:	24050001 	li	a1,1
9d00b9f8:	afb40028 	sw	s4,40(sp)
9d00b9fc:	afb30024 	sw	s3,36(sp)
9d00ba00:	afb20020 	sw	s2,32(sp)
9d00ba04:	00e09821 	move	s3,a3
9d00ba08:	afb1001c 	sw	s1,28(sp)
9d00ba0c:	afb00018 	sw	s0,24(sp)
9d00ba10:	afbf002c 	sw	ra,44(sp)
9d00ba14:	8fb10040 	lw	s1,64(sp)
9d00ba18:	8fb00044 	lw	s0,68(sp)
9d00ba1c:	0f402c2a 	jal	9d00b0a8 <_Balloc>
9d00ba20:	00c09021 	move	s2,a2
9d00ba24:	0040a021 	move	s4,v0
9d00ba28:	7e629800 	ext	v0,s3,0x0,0x14
9d00ba2c:	7e735500 	ext	s3,s3,0x14,0xb
9d00ba30:	12600004 	beqz	s3,9d00ba44 <__d2b+0x54>
9d00ba34:	afa20014 	sw	v0,20(sp)
9d00ba38:	3c030010 	lui	v1,0x10
9d00ba3c:	00431025 	or	v0,v0,v1
9d00ba40:	afa20014 	sw	v0,20(sp)
9d00ba44:	12400015 	beqz	s2,9d00ba9c <__d2b+0xac>
9d00ba48:	27a40010 	addiu	a0,sp,16
9d00ba4c:	0f402cbf 	jal	9d00b2fc <__lo0bits>
9d00ba50:	afb20010 	sw	s2,16(sp)
9d00ba54:	10400009 	beqz	v0,9d00ba7c <__d2b+0x8c>
9d00ba58:	8fa30010 	lw	v1,16(sp)
9d00ba5c:	8fa40014 	lw	a0,20(sp)
9d00ba60:	00022823 	negu	a1,v0
9d00ba64:	00a42804 	sllv	a1,a0,a1
9d00ba68:	00a31825 	or	v1,a1,v1
9d00ba6c:	00442006 	srlv	a0,a0,v0
9d00ba70:	ae830014 	sw	v1,20(s4)
9d00ba74:	0b402ea0 	j	9d00ba80 <__d2b+0x90>
9d00ba78:	afa40014 	sw	a0,20(sp)
9d00ba7c:	ae830014 	sw	v1,20(s4)
9d00ba80:	8fa30014 	lw	v1,20(sp)
9d00ba84:	24120002 	li	s2,2
9d00ba88:	24040001 	li	a0,1
9d00ba8c:	0083900a 	movz	s2,a0,v1
9d00ba90:	ae830018 	sw	v1,24(s4)
9d00ba94:	0b402eaf 	j	9d00babc <__d2b+0xcc>
9d00ba98:	ae920010 	sw	s2,16(s4)
9d00ba9c:	0f402cbf 	jal	9d00b2fc <__lo0bits>
9d00baa0:	27a40014 	addiu	a0,sp,20
9d00baa4:	8fa30014 	lw	v1,20(sp)
9d00baa8:	24420020 	addiu	v0,v0,32
9d00baac:	24120001 	li	s2,1
9d00bab0:	ae830014 	sw	v1,20(s4)
9d00bab4:	24030001 	li	v1,1
9d00bab8:	ae830010 	sw	v1,16(s4)
9d00babc:	52600008 	beqzl	s3,9d00bae0 <__d2b+0xf0>
9d00bac0:	2442fbce 	addiu	v0,v0,-1074
9d00bac4:	2673fbcd 	addiu	s3,s3,-1075
9d00bac8:	24030035 	li	v1,53
9d00bacc:	02629821 	addu	s3,s3,v0
9d00bad0:	00621023 	subu	v0,v1,v0
9d00bad4:	ae330000 	sw	s3,0(s1)
9d00bad8:	0b402ec1 	j	9d00bb04 <__d2b+0x114>
9d00badc:	ae020000 	sw	v0,0(s0)
9d00bae0:	ae220000 	sw	v0,0(s1)
9d00bae4:	26420003 	addiu	v0,s2,3
9d00bae8:	00021080 	sll	v0,v0,0x2
9d00baec:	02821021 	addu	v0,s4,v0
9d00baf0:	8c440004 	lw	a0,4(v0)
9d00baf4:	0f402ca1 	jal	9d00b284 <__hi0bits>
9d00baf8:	00129140 	sll	s2,s2,0x5
9d00bafc:	02429023 	subu	s2,s2,v0
9d00bb00:	ae120000 	sw	s2,0(s0)
9d00bb04:	8fbf002c 	lw	ra,44(sp)
9d00bb08:	02801021 	move	v0,s4
9d00bb0c:	8fb40028 	lw	s4,40(sp)
9d00bb10:	8fb30024 	lw	s3,36(sp)
9d00bb14:	8fb20020 	lw	s2,32(sp)
9d00bb18:	8fb1001c 	lw	s1,28(sp)
9d00bb1c:	8fb00018 	lw	s0,24(sp)
9d00bb20:	03e00008 	jr	ra
9d00bb24:	27bd0030 	addiu	sp,sp,48

9d00bb28 <__fpclassifyd>:
9d00bb28:	00851825 	or	v1,a0,a1
9d00bb2c:	1060001d 	beqz	v1,9d00bba4 <__fpclassifyd+0x7c>
9d00bb30:	24020002 	li	v0,2
9d00bb34:	3c038000 	lui	v1,0x8000
9d00bb38:	14a30003 	bne	a1,v1,9d00bb48 <__fpclassifyd+0x20>
9d00bb3c:	3c03fff0 	lui	v1,0xfff0
9d00bb40:	10800018 	beqz	a0,9d00bba4 <__fpclassifyd+0x7c>
9d00bb44:	00000000 	nop
9d00bb48:	00a33021 	addu	a2,a1,v1
9d00bb4c:	3c077fe0 	lui	a3,0x7fe0
9d00bb50:	00c7302b 	sltu	a2,a2,a3
9d00bb54:	14c00013 	bnez	a2,9d00bba4 <__fpclassifyd+0x7c>
9d00bb58:	24020004 	li	v0,4
9d00bb5c:	3c067ff0 	lui	a2,0x7ff0
9d00bb60:	00a64021 	addu	t0,a1,a2
9d00bb64:	0107382b 	sltu	a3,t0,a3
9d00bb68:	14e0000e 	bnez	a3,9d00bba4 <__fpclassifyd+0x7c>
9d00bb6c:	3c070010 	lui	a3,0x10
9d00bb70:	00a7402b 	sltu	t0,a1,a3
9d00bb74:	1500000b 	bnez	t0,9d00bba4 <__fpclassifyd+0x7c>
9d00bb78:	24020003 	li	v0,3
9d00bb7c:	3c088000 	lui	t0,0x8000
9d00bb80:	00a84021 	addu	t0,a1,t0
9d00bb84:	0107382b 	sltu	a3,t0,a3
9d00bb88:	14e00006 	bnez	a3,9d00bba4 <__fpclassifyd+0x7c>
9d00bb8c:	00000000 	nop
9d00bb90:	10a60004 	beq	a1,a2,9d00bba4 <__fpclassifyd+0x7c>
9d00bb94:	2c820001 	sltiu	v0,a0,1
9d00bb98:	14a30002 	bne	a1,v1,9d00bba4 <__fpclassifyd+0x7c>
9d00bb9c:	00001021 	move	v0,zero
9d00bba0:	2c820001 	sltiu	v0,a0,1
9d00bba4:	03e00008 	jr	ra
9d00bba8:	00000000 	nop

9d00bbac <__ssprint_r>:
9d00bbac:	8cc20008 	lw	v0,8(a2)
9d00bbb0:	27bdffc0 	addiu	sp,sp,-64
9d00bbb4:	afb70034 	sw	s7,52(sp)
9d00bbb8:	afb60030 	sw	s6,48(sp)
9d00bbbc:	afb20020 	sw	s2,32(sp)
9d00bbc0:	afb00018 	sw	s0,24(sp)
9d00bbc4:	afbf003c 	sw	ra,60(sp)
9d00bbc8:	afbe0038 	sw	s8,56(sp)
9d00bbcc:	afb5002c 	sw	s5,44(sp)
9d00bbd0:	afb40028 	sw	s4,40(sp)
9d00bbd4:	afb30024 	sw	s3,36(sp)
9d00bbd8:	afb1001c 	sw	s1,28(sp)
9d00bbdc:	00808021 	move	s0,a0
9d00bbe0:	00a0b021 	move	s6,a1
9d00bbe4:	00c0b821 	move	s7,a2
9d00bbe8:	10400061 	beqz	v0,9d00bd70 <__ssprint_r+0x1c4>
9d00bbec:	8cd20000 	lw	s2,0(a2)
9d00bbf0:	00009821 	move	s3,zero
9d00bbf4:	0000f021 	move	s8,zero
9d00bbf8:	24140003 	li	s4,3
9d00bbfc:	0b402f04 	j	9d00bc10 <__ssprint_r+0x64>
9d00bc00:	2415fb7f 	li	s5,-1153
9d00bc04:	8e530000 	lw	s3,0(s2)
9d00bc08:	8e5e0004 	lw	s8,4(s2)
9d00bc0c:	26520008 	addiu	s2,s2,8
9d00bc10:	53c0fffd 	beqzl	s8,9d00bc08 <__ssprint_r+0x5c>
9d00bc14:	8e530000 	lw	s3,0(s2)
9d00bc18:	8ec30008 	lw	v1,8(s6)
9d00bc1c:	03c3102b 	sltu	v0,s8,v1
9d00bc20:	54400042 	bnezl	v0,9d00bd2c <__ssprint_r+0x180>
9d00bc24:	8ec40000 	lw	a0,0(s6)
9d00bc28:	96c2000c 	lhu	v0,12(s6)
9d00bc2c:	30440480 	andi	a0,v0,0x480
9d00bc30:	5080003d 	beqzl	a0,9d00bd28 <__ssprint_r+0x17c>
9d00bc34:	03c3102b 	sltu	v0,s8,v1
9d00bc38:	8ec70014 	lw	a3,20(s6)
9d00bc3c:	8ec50010 	lw	a1,16(s6)
9d00bc40:	8ed10000 	lw	s1,0(s6)
9d00bc44:	72873802 	mul	a3,s4,a3
9d00bc48:	30420400 	andi	v0,v0,0x400
9d00bc4c:	02258823 	subu	s1,s1,a1
9d00bc50:	00071fc2 	srl	v1,a3,0x1f
9d00bc54:	00673821 	addu	a3,v1,a3
9d00bc58:	26230001 	addiu	v1,s1,1
9d00bc5c:	00073843 	sra	a3,a3,0x1
9d00bc60:	007e1821 	addu	v1,v1,s8
9d00bc64:	00e3202b 	sltu	a0,a3,v1
9d00bc68:	10400014 	beqz	v0,9d00bcbc <__ssprint_r+0x110>
9d00bc6c:	0064380b 	movn	a3,v1,a0
9d00bc70:	00e02821 	move	a1,a3
9d00bc74:	02002021 	move	a0,s0
9d00bc78:	0f401c61 	jal	9d007184 <_malloc_r>
9d00bc7c:	afa70014 	sw	a3,20(sp)
9d00bc80:	10400018 	beqz	v0,9d00bce4 <__ssprint_r+0x138>
9d00bc84:	8fa70014 	lw	a3,20(sp)
9d00bc88:	8ec50010 	lw	a1,16(s6)
9d00bc8c:	00402021 	move	a0,v0
9d00bc90:	02203021 	move	a2,s1
9d00bc94:	afa70014 	sw	a3,20(sp)
9d00bc98:	0f401e01 	jal	9d007804 <memcpy>
9d00bc9c:	afa20010 	sw	v0,16(sp)
9d00bca0:	96c2000c 	lhu	v0,12(s6)
9d00bca4:	8fa30010 	lw	v1,16(sp)
9d00bca8:	8fa70014 	lw	a3,20(sp)
9d00bcac:	00551024 	and	v0,v0,s5
9d00bcb0:	34420080 	ori	v0,v0,0x80
9d00bcb4:	0b402f42 	j	9d00bd08 <__ssprint_r+0x15c>
9d00bcb8:	a6c2000c 	sh	v0,12(s6)
9d00bcbc:	00e03021 	move	a2,a3
9d00bcc0:	02002021 	move	a0,s0
9d00bcc4:	0f401e40 	jal	9d007900 <_realloc_r>
9d00bcc8:	afa70014 	sw	a3,20(sp)
9d00bccc:	00401821 	move	v1,v0
9d00bcd0:	1440000d 	bnez	v0,9d00bd08 <__ssprint_r+0x15c>
9d00bcd4:	8fa70014 	lw	a3,20(sp)
9d00bcd8:	8ec50010 	lw	a1,16(s6)
9d00bcdc:	0f402b81 	jal	9d00ae04 <_free_r>
9d00bce0:	02002021 	move	a0,s0
9d00bce4:	2402000c 	li	v0,12
9d00bce8:	ae020000 	sw	v0,0(s0)
9d00bcec:	96c2000c 	lhu	v0,12(s6)
9d00bcf0:	34420040 	ori	v0,v0,0x40
9d00bcf4:	a6c2000c 	sh	v0,12(s6)
9d00bcf8:	aee00008 	sw	zero,8(s7)
9d00bcfc:	aee00004 	sw	zero,4(s7)
9d00bd00:	0b402f5e 	j	9d00bd78 <__ssprint_r+0x1cc>
9d00bd04:	2402ffff 	li	v0,-1
9d00bd08:	aec30010 	sw	v1,16(s6)
9d00bd0c:	00711821 	addu	v1,v1,s1
9d00bd10:	00f18823 	subu	s1,a3,s1
9d00bd14:	aec30000 	sw	v1,0(s6)
9d00bd18:	aec70014 	sw	a3,20(s6)
9d00bd1c:	03c01821 	move	v1,s8
9d00bd20:	aed10008 	sw	s1,8(s6)
9d00bd24:	03c3102b 	sltu	v0,s8,v1
9d00bd28:	8ec40000 	lw	a0,0(s6)
9d00bd2c:	03c2180b 	movn	v1,s8,v0
9d00bd30:	00603021 	move	a2,v1
9d00bd34:	02602821 	move	a1,s3
9d00bd38:	0f401e0c 	jal	9d007830 <memmove>
9d00bd3c:	afa30010 	sw	v1,16(sp)
9d00bd40:	8ec20008 	lw	v0,8(s6)
9d00bd44:	8fa30010 	lw	v1,16(sp)
9d00bd48:	00431023 	subu	v0,v0,v1
9d00bd4c:	aec20008 	sw	v0,8(s6)
9d00bd50:	8ec20000 	lw	v0,0(s6)
9d00bd54:	00431821 	addu	v1,v0,v1
9d00bd58:	8ee20008 	lw	v0,8(s7)
9d00bd5c:	aec30000 	sw	v1,0(s6)
9d00bd60:	005ef023 	subu	s8,v0,s8
9d00bd64:	17c0ffa7 	bnez	s8,9d00bc04 <__ssprint_r+0x58>
9d00bd68:	aefe0008 	sw	s8,8(s7)
9d00bd6c:	aee00008 	sw	zero,8(s7)
9d00bd70:	aee00004 	sw	zero,4(s7)
9d00bd74:	00001021 	move	v0,zero
9d00bd78:	8fbf003c 	lw	ra,60(sp)
9d00bd7c:	8fbe0038 	lw	s8,56(sp)
9d00bd80:	8fb70034 	lw	s7,52(sp)
9d00bd84:	8fb60030 	lw	s6,48(sp)
9d00bd88:	8fb5002c 	lw	s5,44(sp)
9d00bd8c:	8fb40028 	lw	s4,40(sp)
9d00bd90:	8fb30024 	lw	s3,36(sp)
9d00bd94:	8fb20020 	lw	s2,32(sp)
9d00bd98:	8fb1001c 	lw	s1,28(sp)
9d00bd9c:	8fb00018 	lw	s0,24(sp)
9d00bda0:	03e00008 	jr	ra
9d00bda4:	27bd0040 	addiu	sp,sp,64

9d00bda8 <_calloc_r>:
9d00bda8:	27bdffe8 	addiu	sp,sp,-24
9d00bdac:	afb00010 	sw	s0,16(sp)
9d00bdb0:	afbf0014 	sw	ra,20(sp)
9d00bdb4:	0f401c61 	jal	9d007184 <_malloc_r>
9d00bdb8:	70c52802 	mul	a1,a2,a1
9d00bdbc:	1040001e 	beqz	v0,9d00be38 <_calloc_r+0x90>
9d00bdc0:	00408021 	move	s0,v0
9d00bdc4:	8c42fffc 	lw	v0,-4(v0)
9d00bdc8:	2406fffc 	li	a2,-4
9d00bdcc:	00c23024 	and	a2,a2,v0
9d00bdd0:	24c6fffc 	addiu	a2,a2,-4
9d00bdd4:	2cc20025 	sltiu	v0,a2,37
9d00bdd8:	10400014 	beqz	v0,9d00be2c <_calloc_r+0x84>
9d00bddc:	2cc30014 	sltiu	v1,a2,20
9d00bde0:	1460000e 	bnez	v1,9d00be1c <_calloc_r+0x74>
9d00bde4:	02001021 	move	v0,s0
9d00bde8:	2cc3001c 	sltiu	v1,a2,28
9d00bdec:	ae000000 	sw	zero,0(s0)
9d00bdf0:	ae000004 	sw	zero,4(s0)
9d00bdf4:	14600009 	bnez	v1,9d00be1c <_calloc_r+0x74>
9d00bdf8:	26020008 	addiu	v0,s0,8
9d00bdfc:	24030024 	li	v1,36
9d00be00:	ae000008 	sw	zero,8(s0)
9d00be04:	ae00000c 	sw	zero,12(s0)
9d00be08:	14c30004 	bne	a2,v1,9d00be1c <_calloc_r+0x74>
9d00be0c:	26020010 	addiu	v0,s0,16
9d00be10:	ae000010 	sw	zero,16(s0)
9d00be14:	ae000014 	sw	zero,20(s0)
9d00be18:	26020018 	addiu	v0,s0,24
9d00be1c:	ac400000 	sw	zero,0(v0)
9d00be20:	ac400004 	sw	zero,4(v0)
9d00be24:	0b402f8e 	j	9d00be38 <_calloc_r+0x90>
9d00be28:	ac400008 	sw	zero,8(v0)
9d00be2c:	02002021 	move	a0,s0
9d00be30:	0f402f93 	jal	9d00be4c <memset>
9d00be34:	00002821 	move	a1,zero
9d00be38:	8fbf0014 	lw	ra,20(sp)
9d00be3c:	02001021 	move	v0,s0
9d00be40:	8fb00010 	lw	s0,16(sp)
9d00be44:	03e00008 	jr	ra
9d00be48:	27bd0018 	addiu	sp,sp,24

9d00be4c <memset>:
9d00be4c:	00801021 	move	v0,a0
9d00be50:	0b402f98 	j	9d00be60 <memset+0x14>
9d00be54:	00801821 	move	v1,a0
9d00be58:	24c6ffff 	addiu	a2,a2,-1
9d00be5c:	24630001 	addiu	v1,v1,1
9d00be60:	54c0fffd 	bnezl	a2,9d00be58 <memset+0xc>
9d00be64:	a0650000 	sb	a1,0(v1)
9d00be68:	03e00008 	jr	ra
9d00be6c:	00000000 	nop

9d00be70 <__cxa_guard_acquire>:
9d00be70:	80830000 	lb	v1,0(a0)
9d00be74:	14600006 	bnez	v1,9d00be90 <__cxa_guard_acquire+0x20>
9d00be78:	00001021 	move	v0,zero
9d00be7c:	80830001 	lb	v1,1(a0)
9d00be80:	24020001 	li	v0,1
9d00be84:	046e0000 	tnei	v1,0
9d00be88:	24030001 	li	v1,1
9d00be8c:	a0830001 	sb	v1,1(a0)
9d00be90:	03e00008 	jr	ra
9d00be94:	00000000 	nop

9d00be98 <__cxa_guard_release>:
9d00be98:	24020001 	li	v0,1
9d00be9c:	a0800001 	sb	zero,1(a0)
9d00bea0:	03e00008 	jr	ra
9d00bea4:	a0820000 	sb	v0,0(a0)

9d00bea8 <_general_exception_context>:
9d00bea8:	27bdffa8 	addiu	sp,sp,-88
9d00beac:	afa10004 	sw	at,4(sp)
9d00beb0:	afa20008 	sw	v0,8(sp)
9d00beb4:	afa3000c 	sw	v1,12(sp)
9d00beb8:	afa40010 	sw	a0,16(sp)
9d00bebc:	afa50014 	sw	a1,20(sp)
9d00bec0:	afa60018 	sw	a2,24(sp)
9d00bec4:	afa7001c 	sw	a3,28(sp)
9d00bec8:	afa80020 	sw	t0,32(sp)
9d00becc:	afa90024 	sw	t1,36(sp)
9d00bed0:	afaa0028 	sw	t2,40(sp)
9d00bed4:	afab002c 	sw	t3,44(sp)
9d00bed8:	afac0030 	sw	t4,48(sp)
9d00bedc:	afad0034 	sw	t5,52(sp)
9d00bee0:	afae0038 	sw	t6,56(sp)
9d00bee4:	afaf003c 	sw	t7,60(sp)
9d00bee8:	afb80040 	sw	t8,64(sp)
9d00beec:	afb90044 	sw	t9,68(sp)
9d00bef0:	afbf0048 	sw	ra,72(sp)
9d00bef4:	00004012 	mflo	t0
9d00bef8:	afa8004c 	sw	t0,76(sp)
9d00befc:	00004010 	mfhi	t0
9d00bf00:	afa80050 	sw	t0,80(sp)
9d00bf04:	40046800 	mfc0	a0,c0_cause
9d00bf08:	40056000 	mfc0	a1,c0_status
9d00bf0c:	0f402fde 	jal	9d00bf78 <_general_exception_handler>
9d00bf10:	00000000 	nop
9d00bf14:	8fa80050 	lw	t0,80(sp)
9d00bf18:	01000011 	mthi	t0
9d00bf1c:	8fa8004c 	lw	t0,76(sp)
9d00bf20:	01000013 	mtlo	t0
9d00bf24:	8fa10004 	lw	at,4(sp)
9d00bf28:	8fa20008 	lw	v0,8(sp)
9d00bf2c:	8fa3000c 	lw	v1,12(sp)
9d00bf30:	8fa40010 	lw	a0,16(sp)
9d00bf34:	8fa50014 	lw	a1,20(sp)
9d00bf38:	8fa60018 	lw	a2,24(sp)
9d00bf3c:	8fa7001c 	lw	a3,28(sp)
9d00bf40:	8fa80020 	lw	t0,32(sp)
9d00bf44:	8fa90024 	lw	t1,36(sp)
9d00bf48:	8faa0028 	lw	t2,40(sp)
9d00bf4c:	8fab002c 	lw	t3,44(sp)
9d00bf50:	8fac0030 	lw	t4,48(sp)
9d00bf54:	8fad0034 	lw	t5,52(sp)
9d00bf58:	8fae0038 	lw	t6,56(sp)
9d00bf5c:	8faf003c 	lw	t7,60(sp)
9d00bf60:	8fb80040 	lw	t8,64(sp)
9d00bf64:	8fb90044 	lw	t9,68(sp)
9d00bf68:	8fbf0048 	lw	ra,72(sp)
9d00bf6c:	27bd0058 	addiu	sp,sp,88
9d00bf70:	000000c0 	ehb
9d00bf74:	42000018 	eret

9d00bf78 <_general_exception_handler>:
9d00bf78:	0b402fde 	j	9d00bf78 <_general_exception_handler>
9d00bf7c:	00000000 	nop

9d00bf80 <_on_reset>:
9d00bf80:	03e00008 	jr	ra
9d00bf84:	00000000 	nop

9d00bf88 <_on_bootstrap>:
9d00bf88:	03e00008 	jr	ra
9d00bf8c:	00000000 	nop

9d00bf90 <_nmi_handler>:
9d00bf90:	401a6000 	mfc0	k0,c0_status
9d00bf94:	3c1bffbf 	lui	k1,0xffbf
9d00bf98:	377bffff 	ori	k1,k1,0xffff
9d00bf9c:	035bd024 	and	k0,k0,k1
9d00bfa0:	409a6000 	mtc0	k0,c0_status
9d00bfa4:	42000018 	eret

9d00bfa8 <_stub_sbd_memlayout>:
9d00bfa8:	3c03a000 	lui	v1,0xa000
9d00bfac:	2462153c 	addiu	v0,v1,5436
9d00bfb0:	24040001 	li	a0,1
9d00bfb4:	ac440008 	sw	a0,8(v0)
9d00bfb8:	3c04a000 	lui	a0,0xa000
9d00bfbc:	24841558 	addiu	a0,a0,5464
9d00bfc0:	ac64153c 	sw	a0,5436(v1)
9d00bfc4:	3c030000 	lui	v1,0x0
9d00bfc8:	24630800 	addiu	v1,v1,2048
9d00bfcc:	03e00008 	jr	ra
9d00bfd0:	ac430004 	sw	v1,4(v0)

9d00bfd4 <_sbrk_init>:
9d00bfd4:	27bdffd8 	addiu	sp,sp,-40
9d00bfd8:	afb00010 	sw	s0,16(sp)
9d00bfdc:	3c10a000 	lui	s0,0xa000
9d00bfe0:	8e021538 	lw	v0,5432(s0)
9d00bfe4:	afbf0024 	sw	ra,36(sp)
9d00bfe8:	afb40020 	sw	s4,32(sp)
9d00bfec:	afb3001c 	sw	s3,28(sp)
9d00bff0:	afb20018 	sw	s2,24(sp)
9d00bff4:	10400009 	beqz	v0,9d00c01c <_sbrk_init+0x48>
9d00bff8:	afb10014 	sw	s1,20(sp)
9d00bffc:	8fbf0024 	lw	ra,36(sp)
9d00c000:	8fb40020 	lw	s4,32(sp)
9d00c004:	8fb3001c 	lw	s3,28(sp)
9d00c008:	8fb20018 	lw	s2,24(sp)
9d00c00c:	8fb10014 	lw	s1,20(sp)
9d00c010:	8fb00010 	lw	s0,16(sp)
9d00c014:	03e00008 	jr	ra
9d00c018:	27bd0028 	addiu	sp,sp,40
9d00c01c:	3c13a000 	lui	s3,0xa000
9d00c020:	8e6309d0 	lw	v1,2512(s3)
9d00c024:	50600040 	beqzl	v1,9d00c128 <_sbrk_init+0x154>
9d00c028:	3c03a000 	lui	v1,0xa000
9d00c02c:	3c14a000 	lui	s4,0xa000
9d00c030:	8e8209d4 	lw	v0,2516(s4)
9d00c034:	10400039 	beqz	v0,9d00c11c <_sbrk_init+0x148>
9d00c038:	00000000 	nop
9d00c03c:	00038f82 	srl	s1,v1,0x1e
9d00c040:	00029782 	srl	s2,v0,0x1e
9d00c044:	7c44e000 	ext	a0,v0,0x0,0x1d
9d00c048:	7c65e000 	ext	a1,v1,0x0,0x1d
9d00c04c:	3a310002 	xori	s1,s1,0x2
9d00c050:	3a520002 	xori	s2,s2,0x2
9d00c054:	00b1180a 	movz	v1,a1,s1
9d00c058:	0092100a 	movz	v0,a0,s2
9d00c05c:	00608821 	move	s1,v1
9d00c060:	0f402fea 	jal	9d00bfa8 <_stub_sbd_memlayout>
9d00c064:	00409021 	move	s2,v0
9d00c068:	8c430000 	lw	v1,0(v0)
9d00c06c:	8c420004 	lw	v0,4(v0)
9d00c070:	0223202b 	sltu	a0,s1,v1
9d00c074:	10800024 	beqz	a0,9d00c108 <_sbrk_init+0x134>
9d00c078:	00621021 	addu	v0,v1,v0
9d00c07c:	3c04a000 	lui	a0,0xa000
9d00c080:	24841554 	addiu	a0,a0,5460
9d00c084:	7c84e000 	ext	a0,a0,0x0,0x1d
9d00c088:	0064202b 	sltu	a0,v1,a0
9d00c08c:	1480ffdb 	bnez	a0,9d00bffc <_sbrk_init+0x28>
9d00c090:	00608821 	move	s1,v1
9d00c094:	0251182b 	sltu	v1,s2,s1
9d00c098:	14600005 	bnez	v1,9d00c0b0 <_sbrk_init+0xdc>
9d00c09c:	0222182b 	sltu	v1,s1,v0
9d00c0a0:	0242182b 	sltu	v1,s2,v0
9d00c0a4:	54600005 	bnezl	v1,9d00c0bc <_sbrk_init+0xe8>
9d00c0a8:	3c02a000 	lui	v0,0xa000
9d00c0ac:	0222182b 	sltu	v1,s1,v0
9d00c0b0:	1060ffd2 	beqz	v1,9d00bffc <_sbrk_init+0x28>
9d00c0b4:	00409021 	move	s2,v0
9d00c0b8:	3c02a000 	lui	v0,0xa000
9d00c0bc:	24421554 	addiu	v0,v0,5460
9d00c0c0:	00021742 	srl	v0,v0,0x1d
9d00c0c4:	24030005 	li	v1,5
9d00c0c8:	14430019 	bne	v0,v1,9d00c130 <_sbrk_init+0x15c>
9d00c0cc:	24030004 	li	v1,4
9d00c0d0:	3c02a000 	lui	v0,0xa000
9d00c0d4:	02228825 	or	s1,s1,v0
9d00c0d8:	02429025 	or	s2,s2,v0
9d00c0dc:	ae7109d0 	sw	s1,2512(s3)
9d00c0e0:	ae9209d4 	sw	s2,2516(s4)
9d00c0e4:	ae111538 	sw	s1,5432(s0)
9d00c0e8:	8fbf0024 	lw	ra,36(sp)
9d00c0ec:	8fb40020 	lw	s4,32(sp)
9d00c0f0:	8fb3001c 	lw	s3,28(sp)
9d00c0f4:	8fb20018 	lw	s2,24(sp)
9d00c0f8:	8fb10014 	lw	s1,20(sp)
9d00c0fc:	8fb00010 	lw	s0,16(sp)
9d00c100:	03e00008 	jr	ra
9d00c104:	27bd0028 	addiu	sp,sp,40
9d00c108:	0222202b 	sltu	a0,s1,v0
9d00c10c:	5480ffe2 	bnezl	a0,9d00c098 <_sbrk_init+0xc4>
9d00c110:	0251182b 	sltu	v1,s2,s1
9d00c114:	0b403020 	j	9d00c080 <_sbrk_init+0xac>
9d00c118:	3c04a000 	lui	a0,0xa000
9d00c11c:	03a01021 	move	v0,sp
9d00c120:	0b40300f 	j	9d00c03c <_sbrk_init+0x68>
9d00c124:	2442f800 	addiu	v0,v0,-2048
9d00c128:	0b40300b 	j	9d00c02c <_sbrk_init+0x58>
9d00c12c:	24631554 	addiu	v1,v1,5460
9d00c130:	14430007 	bne	v0,v1,9d00c150 <_sbrk_init+0x17c>
9d00c134:	3c028000 	lui	v0,0x8000
9d00c138:	02228825 	or	s1,s1,v0
9d00c13c:	02421025 	or	v0,s2,v0
9d00c140:	ae7109d0 	sw	s1,2512(s3)
9d00c144:	ae8209d4 	sw	v0,2516(s4)
9d00c148:	0b40303a 	j	9d00c0e8 <_sbrk_init+0x114>
9d00c14c:	ae111538 	sw	s1,5432(s0)
9d00c150:	02408821 	move	s1,s2
9d00c154:	ae7209d0 	sw	s2,2512(s3)
9d00c158:	0b40303a 	j	9d00c0e8 <_sbrk_init+0x114>
9d00c15c:	ae111538 	sw	s1,5432(s0)

9d00c160 <_sbrk>:
9d00c160:	27bdffd8 	addiu	sp,sp,-40
9d00c164:	afb00020 	sw	s0,32(sp)
9d00c168:	3c10a000 	lui	s0,0xa000
9d00c16c:	8e021538 	lw	v0,5432(s0)
9d00c170:	27a30010 	addiu	v1,sp,16
9d00c174:	afbf0024 	sw	ra,36(sp)
9d00c178:	10400010 	beqz	v0,9d00c1bc <_sbrk+0x5c>
9d00c17c:	afa30010 	sw	v1,16(sp)
9d00c180:	1880001c 	blez	a0,9d00c1f4 <_sbrk+0x94>
9d00c184:	00441821 	addu	v1,v0,a0
9d00c188:	0062202b 	sltu	a0,v1,v0
9d00c18c:	14800010 	bnez	a0,9d00c1d0 <_sbrk+0x70>
9d00c190:	8fa50010 	lw	a1,16(sp)
9d00c194:	3c040000 	lui	a0,0x0
9d00c198:	24840800 	addiu	a0,a0,2048
9d00c19c:	00a42023 	subu	a0,a1,a0
9d00c1a0:	0083202b 	sltu	a0,a0,v1
9d00c1a4:	1480000a 	bnez	a0,9d00c1d0 <_sbrk+0x70>
9d00c1a8:	8fbf0024 	lw	ra,36(sp)
9d00c1ac:	ae031538 	sw	v1,5432(s0)
9d00c1b0:	8fb00020 	lw	s0,32(sp)
9d00c1b4:	03e00008 	jr	ra
9d00c1b8:	27bd0028 	addiu	sp,sp,40
9d00c1bc:	0f402ff5 	jal	9d00bfd4 <_sbrk_init>
9d00c1c0:	afa40018 	sw	a0,24(sp)
9d00c1c4:	8e021538 	lw	v0,5432(s0)
9d00c1c8:	1440ffed 	bnez	v0,9d00c180 <_sbrk+0x20>
9d00c1cc:	8fa40018 	lw	a0,24(sp)
9d00c1d0:	0f4032f0 	jal	9d00cbc0 <__errno>
9d00c1d4:	00000000 	nop
9d00c1d8:	8fbf0024 	lw	ra,36(sp)
9d00c1dc:	2403000c 	li	v1,12
9d00c1e0:	ac430000 	sw	v1,0(v0)
9d00c1e4:	8fb00020 	lw	s0,32(sp)
9d00c1e8:	2402ffff 	li	v0,-1
9d00c1ec:	03e00008 	jr	ra
9d00c1f0:	27bd0028 	addiu	sp,sp,40
9d00c1f4:	0043202b 	sltu	a0,v0,v1
9d00c1f8:	14800005 	bnez	a0,9d00c210 <_sbrk+0xb0>
9d00c1fc:	3c04a000 	lui	a0,0xa000
9d00c200:	8c8409d0 	lw	a0,2512(a0)
9d00c204:	0064202b 	sltu	a0,v1,a0
9d00c208:	1080ffe8 	beqz	a0,9d00c1ac <_sbrk+0x4c>
9d00c20c:	8fbf0024 	lw	ra,36(sp)
9d00c210:	0f4032f0 	jal	9d00cbc0 <__errno>
9d00c214:	00000000 	nop
9d00c218:	8fbf0024 	lw	ra,36(sp)
9d00c21c:	24030016 	li	v1,22
9d00c220:	ac430000 	sw	v1,0(v0)
9d00c224:	8fb00020 	lw	s0,32(sp)
9d00c228:	2402ffff 	li	v0,-1
9d00c22c:	03e00008 	jr	ra
9d00c230:	27bd0028 	addiu	sp,sp,40

9d00c234 <sbrk>:
9d00c234:	27bdffe0 	addiu	sp,sp,-32
9d00c238:	afb10018 	sw	s1,24(sp)
9d00c23c:	afb00014 	sw	s0,20(sp)
9d00c240:	afbf001c 	sw	ra,28(sp)
9d00c244:	0f403058 	jal	9d00c160 <_sbrk>
9d00c248:	00808821 	move	s1,a0
9d00c24c:	1a200007 	blez	s1,9d00c26c <sbrk+0x38>
9d00c250:	00408021 	move	s0,v0
9d00c254:	2402ffff 	li	v0,-1
9d00c258:	12020004 	beq	s0,v0,9d00c26c <sbrk+0x38>
9d00c25c:	02002021 	move	a0,s0
9d00c260:	00002821 	move	a1,zero
9d00c264:	0f402f93 	jal	9d00be4c <memset>
9d00c268:	02203021 	move	a2,s1
9d00c26c:	8fbf001c 	lw	ra,28(sp)
9d00c270:	02001021 	move	v0,s0
9d00c274:	8fb10018 	lw	s1,24(sp)
9d00c278:	8fb00014 	lw	s0,20(sp)
9d00c27c:	03e00008 	jr	ra
9d00c280:	27bd0020 	addiu	sp,sp,32

9d00c284 <__udivdi3>:
9d00c284:	00c01021 	move	v0,a2
9d00c288:	00804021 	move	t0,a0
9d00c28c:	14e0003e 	bnez	a3,9d00c388 <__udivdi3+0x104>
9d00c290:	00a01821 	move	v1,a1
9d00c294:	00a6302b 	sltu	a2,a1,a2
9d00c298:	10c00047 	beqz	a2,9d00c3b8 <__udivdi3+0x134>
9d00c29c:	00000000 	nop
9d00c2a0:	70442020 	clz	a0,v0
9d00c2a4:	10800008 	beqz	a0,9d00c2c8 <__udivdi3+0x44>
9d00c2a8:	00022c02 	srl	a1,v0,0x10
9d00c2ac:	00042823 	negu	a1,a0
9d00c2b0:	00a82806 	srlv	a1,t0,a1
9d00c2b4:	00831804 	sllv	v1,v1,a0
9d00c2b8:	00821004 	sllv	v0,v0,a0
9d00c2bc:	00a31825 	or	v1,a1,v1
9d00c2c0:	00884004 	sllv	t0,t0,a0
9d00c2c4:	00022c02 	srl	a1,v0,0x10
9d00c2c8:	0065001b 	divu	zero,v1,a1
9d00c2cc:	00a001f4 	teq	a1,zero,0x7
9d00c2d0:	3049ffff 	andi	t1,v0,0xffff
9d00c2d4:	00085402 	srl	t2,t0,0x10
9d00c2d8:	00003812 	mflo	a3
9d00c2dc:	00005810 	mfhi	t3
9d00c2e0:	0065001b 	divu	zero,v1,a1
9d00c2e4:	00a001f4 	teq	a1,zero,0x7
9d00c2e8:	000b1c00 	sll	v1,t3,0x10
9d00c2ec:	006a1825 	or	v1,v1,t2
9d00c2f0:	70e92002 	mul	a0,a3,t1
9d00c2f4:	0064302b 	sltu	a2,v1,a0
9d00c2f8:	50c0000b 	beqzl	a2,9d00c328 <__udivdi3+0xa4>
9d00c2fc:	00641823 	subu	v1,v1,a0
9d00c300:	00621821 	addu	v1,v1,v0
9d00c304:	0062302b 	sltu	a2,v1,v0
9d00c308:	14c00006 	bnez	a2,9d00c324 <__udivdi3+0xa0>
9d00c30c:	24e7ffff 	addiu	a3,a3,-1
9d00c310:	0064302b 	sltu	a2,v1,a0
9d00c314:	50c00004 	beqzl	a2,9d00c328 <__udivdi3+0xa4>
9d00c318:	00641823 	subu	v1,v1,a0
9d00c31c:	24e7ffff 	addiu	a3,a3,-1
9d00c320:	00621821 	addu	v1,v1,v0
9d00c324:	00641823 	subu	v1,v1,a0
9d00c328:	0065001b 	divu	zero,v1,a1
9d00c32c:	00a001f4 	teq	a1,zero,0x7
9d00c330:	3108ffff 	andi	t0,t0,0xffff
9d00c334:	00002012 	mflo	a0
9d00c338:	00005010 	mfhi	t2
9d00c33c:	0065001b 	divu	zero,v1,a1
9d00c340:	00a001f4 	teq	a1,zero,0x7
9d00c344:	000a1c00 	sll	v1,t2,0x10
9d00c348:	00684025 	or	t0,v1,t0
9d00c34c:	70894802 	mul	t1,a0,t1
9d00c350:	0109182b 	sltu	v1,t0,t1
9d00c354:	10600006 	beqz	v1,9d00c370 <__udivdi3+0xec>
9d00c358:	01024021 	addu	t0,t0,v0
9d00c35c:	0102102b 	sltu	v0,t0,v0
9d00c360:	14400003 	bnez	v0,9d00c370 <__udivdi3+0xec>
9d00c364:	2484ffff 	addiu	a0,a0,-1
9d00c368:	0109482b 	sltu	t1,t0,t1
9d00c36c:	00892023 	subu	a0,a0,t1
9d00c370:	00073c00 	sll	a3,a3,0x10
9d00c374:	00872025 	or	a0,a0,a3
9d00c378:	00001821 	move	v1,zero
9d00c37c:	00801021 	move	v0,a0
9d00c380:	03e00008 	jr	ra
9d00c384:	00000000 	nop
9d00c388:	00a7102b 	sltu	v0,a1,a3
9d00c38c:	14400043 	bnez	v0,9d00c49c <__udivdi3+0x218>
9d00c390:	00001821 	move	v1,zero
9d00c394:	70e31820 	clz	v1,a3
9d00c398:	14600044 	bnez	v1,9d00c4ac <__udivdi3+0x228>
9d00c39c:	240b0020 	li	t3,32
9d00c3a0:	00e5282b 	sltu	a1,a3,a1
9d00c3a4:	54a000c5 	bnezl	a1,9d00c6bc <__udivdi3+0x438>
9d00c3a8:	00001821 	move	v1,zero
9d00c3ac:	0086202b 	sltu	a0,a0,a2
9d00c3b0:	0b4030df 	j	9d00c37c <__udivdi3+0xf8>
9d00c3b4:	2c840001 	sltiu	a0,a0,1
9d00c3b8:	14400006 	bnez	v0,9d00c3d4 <__udivdi3+0x150>
9d00c3bc:	70463020 	clz	a2,v0
9d00c3c0:	24030001 	li	v1,1
9d00c3c4:	0062001b 	divu	zero,v1,v0
9d00c3c8:	004001f4 	teq	v0,zero,0x7
9d00c3cc:	00001012 	mflo	v0
9d00c3d0:	70463020 	clz	a2,v0
9d00c3d4:	54c00079 	bnezl	a2,9d00c5bc <__udivdi3+0x338>
9d00c3d8:	24080020 	li	t0,32
9d00c3dc:	00a22823 	subu	a1,a1,v0
9d00c3e0:	00023c02 	srl	a3,v0,0x10
9d00c3e4:	304affff 	andi	t2,v0,0xffff
9d00c3e8:	24030001 	li	v1,1
9d00c3ec:	00a7001b 	divu	zero,a1,a3
9d00c3f0:	00e001f4 	teq	a3,zero,0x7
9d00c3f4:	00085c02 	srl	t3,t0,0x10
9d00c3f8:	00004812 	mflo	t1
9d00c3fc:	00006010 	mfhi	t4
9d00c400:	00a7001b 	divu	zero,a1,a3
9d00c404:	00e001f4 	teq	a3,zero,0x7
9d00c408:	000c2c00 	sll	a1,t4,0x10
9d00c40c:	00ab2825 	or	a1,a1,t3
9d00c410:	712a2002 	mul	a0,t1,t2
9d00c414:	00a4302b 	sltu	a2,a1,a0
9d00c418:	50c00009 	beqzl	a2,9d00c440 <__udivdi3+0x1bc>
9d00c41c:	00a42823 	subu	a1,a1,a0
9d00c420:	00a22821 	addu	a1,a1,v0
9d00c424:	00a2302b 	sltu	a2,a1,v0
9d00c428:	14c00004 	bnez	a2,9d00c43c <__udivdi3+0x1b8>
9d00c42c:	2529ffff 	addiu	t1,t1,-1
9d00c430:	00a4302b 	sltu	a2,a1,a0
9d00c434:	54c000a3 	bnezl	a2,9d00c6c4 <__udivdi3+0x440>
9d00c438:	2529ffff 	addiu	t1,t1,-1
9d00c43c:	00a42823 	subu	a1,a1,a0
9d00c440:	00a7001b 	divu	zero,a1,a3
9d00c444:	00e001f4 	teq	a3,zero,0x7
9d00c448:	3108ffff 	andi	t0,t0,0xffff
9d00c44c:	00002012 	mflo	a0
9d00c450:	00005810 	mfhi	t3
9d00c454:	00a7001b 	divu	zero,a1,a3
9d00c458:	00e001f4 	teq	a3,zero,0x7
9d00c45c:	000b2c00 	sll	a1,t3,0x10
9d00c460:	00a84025 	or	t0,a1,t0
9d00c464:	708a5002 	mul	t2,a0,t2
9d00c468:	010a282b 	sltu	a1,t0,t2
9d00c46c:	10a00006 	beqz	a1,9d00c488 <__udivdi3+0x204>
9d00c470:	01024021 	addu	t0,t0,v0
9d00c474:	0102102b 	sltu	v0,t0,v0
9d00c478:	14400003 	bnez	v0,9d00c488 <__udivdi3+0x204>
9d00c47c:	2484ffff 	addiu	a0,a0,-1
9d00c480:	010a502b 	sltu	t2,t0,t2
9d00c484:	008a2023 	subu	a0,a0,t2
9d00c488:	00094c00 	sll	t1,t1,0x10
9d00c48c:	00892025 	or	a0,a0,t1
9d00c490:	00801021 	move	v0,a0
9d00c494:	03e00008 	jr	ra
9d00c498:	00000000 	nop
9d00c49c:	00002021 	move	a0,zero
9d00c4a0:	00801021 	move	v0,a0
9d00c4a4:	03e00008 	jr	ra
9d00c4a8:	00000000 	nop
9d00c4ac:	01635823 	subu	t3,t3,v1
9d00c4b0:	01661006 	srlv	v0,a2,t3
9d00c4b4:	00673804 	sllv	a3,a3,v1
9d00c4b8:	00473825 	or	a3,v0,a3
9d00c4bc:	01654806 	srlv	t1,a1,t3
9d00c4c0:	00071402 	srl	v0,a3,0x10
9d00c4c4:	0122001b 	divu	zero,t1,v0
9d00c4c8:	004001f4 	teq	v0,zero,0x7
9d00c4cc:	30ecffff 	andi	t4,a3,0xffff
9d00c4d0:	01645806 	srlv	t3,a0,t3
9d00c4d4:	00652804 	sllv	a1,a1,v1
9d00c4d8:	01652825 	or	a1,t3,a1
9d00c4dc:	00055c02 	srl	t3,a1,0x10
9d00c4e0:	00005012 	mflo	t2
9d00c4e4:	00004010 	mfhi	t0
9d00c4e8:	00084400 	sll	t0,t0,0x10
9d00c4ec:	010b4025 	or	t0,t0,t3
9d00c4f0:	0122001b 	divu	zero,t1,v0
9d00c4f4:	004001f4 	teq	v0,zero,0x7
9d00c4f8:	714c4802 	mul	t1,t2,t4
9d00c4fc:	0109582b 	sltu	t3,t0,t1
9d00c500:	1160000a 	beqz	t3,9d00c52c <__udivdi3+0x2a8>
9d00c504:	00663004 	sllv	a2,a2,v1
9d00c508:	01074021 	addu	t0,t0,a3
9d00c50c:	0107582b 	sltu	t3,t0,a3
9d00c510:	15600006 	bnez	t3,9d00c52c <__udivdi3+0x2a8>
9d00c514:	254affff 	addiu	t2,t2,-1
9d00c518:	0109582b 	sltu	t3,t0,t1
9d00c51c:	51600004 	beqzl	t3,9d00c530 <__udivdi3+0x2ac>
9d00c520:	01094023 	subu	t0,t0,t1
9d00c524:	254affff 	addiu	t2,t2,-1
9d00c528:	01074021 	addu	t0,t0,a3
9d00c52c:	01094023 	subu	t0,t0,t1
9d00c530:	0102001b 	divu	zero,t0,v0
9d00c534:	004001f4 	teq	v0,zero,0x7
9d00c538:	30a5ffff 	andi	a1,a1,0xffff
9d00c53c:	00005810 	mfhi	t3
9d00c540:	00004812 	mflo	t1
9d00c544:	0102001b 	divu	zero,t0,v0
9d00c548:	004001f4 	teq	v0,zero,0x7
9d00c54c:	000b1400 	sll	v0,t3,0x10
9d00c550:	00452825 	or	a1,v0,a1
9d00c554:	712c1002 	mul	v0,t1,t4
9d00c558:	00a2402b 	sltu	t0,a1,v0
9d00c55c:	5100000b 	beqzl	t0,9d00c58c <__udivdi3+0x308>
9d00c560:	000a5400 	sll	t2,t2,0x10
9d00c564:	00a72821 	addu	a1,a1,a3
9d00c568:	00a7402b 	sltu	t0,a1,a3
9d00c56c:	15000006 	bnez	t0,9d00c588 <__udivdi3+0x304>
9d00c570:	2529ffff 	addiu	t1,t1,-1
9d00c574:	00a2402b 	sltu	t0,a1,v0
9d00c578:	51000004 	beqzl	t0,9d00c58c <__udivdi3+0x308>
9d00c57c:	000a5400 	sll	t2,t2,0x10
9d00c580:	2529ffff 	addiu	t1,t1,-1
9d00c584:	00a72821 	addu	a1,a1,a3
9d00c588:	000a5400 	sll	t2,t2,0x10
9d00c58c:	012a4825 	or	t1,t1,t2
9d00c590:	01260019 	multu	t1,a2
9d00c594:	00a22823 	subu	a1,a1,v0
9d00c598:	00005810 	mfhi	t3
9d00c59c:	00ab102b 	sltu	v0,a1,t3
9d00c5a0:	14400043 	bnez	v0,9d00c6b0 <__udivdi3+0x42c>
9d00c5a4:	00005012 	mflo	t2
9d00c5a8:	50ab003e 	beql	a1,t3,9d00c6a4 <__udivdi3+0x420>
9d00c5ac:	00641804 	sllv	v1,a0,v1
9d00c5b0:	01202021 	move	a0,t1
9d00c5b4:	0b4030df 	j	9d00c37c <__udivdi3+0xf8>
9d00c5b8:	00001821 	move	v1,zero
9d00c5bc:	00c21004 	sllv	v0,v0,a2
9d00c5c0:	01064023 	subu	t0,t0,a2
9d00c5c4:	01054806 	srlv	t1,a1,t0
9d00c5c8:	00023c02 	srl	a3,v0,0x10
9d00c5cc:	0127001b 	divu	zero,t1,a3
9d00c5d0:	00e001f4 	teq	a3,zero,0x7
9d00c5d4:	01044006 	srlv	t0,a0,t0
9d00c5d8:	00c52804 	sllv	a1,a1,a2
9d00c5dc:	01052825 	or	a1,t0,a1
9d00c5e0:	304affff 	andi	t2,v0,0xffff
9d00c5e4:	00c44004 	sllv	t0,a0,a2
9d00c5e8:	00055c02 	srl	t3,a1,0x10
9d00c5ec:	00003012 	mflo	a2
9d00c5f0:	00006010 	mfhi	t4
9d00c5f4:	000c2400 	sll	a0,t4,0x10
9d00c5f8:	01642025 	or	a0,t3,a0
9d00c5fc:	0127001b 	divu	zero,t1,a3
9d00c600:	00e001f4 	teq	a3,zero,0x7
9d00c604:	70ca1802 	mul	v1,a2,t2
9d00c608:	0083482b 	sltu	t1,a0,v1
9d00c60c:	5120000b 	beqzl	t1,9d00c63c <__udivdi3+0x3b8>
9d00c610:	00832023 	subu	a0,a0,v1
9d00c614:	00822021 	addu	a0,a0,v0
9d00c618:	0082482b 	sltu	t1,a0,v0
9d00c61c:	15200006 	bnez	t1,9d00c638 <__udivdi3+0x3b4>
9d00c620:	24c6ffff 	addiu	a2,a2,-1
9d00c624:	0083482b 	sltu	t1,a0,v1
9d00c628:	51200004 	beqzl	t1,9d00c63c <__udivdi3+0x3b8>
9d00c62c:	00832023 	subu	a0,a0,v1
9d00c630:	24c6ffff 	addiu	a2,a2,-1
9d00c634:	00822021 	addu	a0,a0,v0
9d00c638:	00832023 	subu	a0,a0,v1
9d00c63c:	0087001b 	divu	zero,a0,a3
9d00c640:	00e001f4 	teq	a3,zero,0x7
9d00c644:	30a5ffff 	andi	a1,a1,0xffff
9d00c648:	00004810 	mfhi	t1
9d00c64c:	00001812 	mflo	v1
9d00c650:	0087001b 	divu	zero,a0,a3
9d00c654:	00e001f4 	teq	a3,zero,0x7
9d00c658:	00092400 	sll	a0,t1,0x10
9d00c65c:	00852825 	or	a1,a0,a1
9d00c660:	706a2002 	mul	a0,v1,t2
9d00c664:	00a4482b 	sltu	t1,a1,a0
9d00c668:	5120000b 	beqzl	t1,9d00c698 <__udivdi3+0x414>
9d00c66c:	00063400 	sll	a2,a2,0x10
9d00c670:	00a22821 	addu	a1,a1,v0
9d00c674:	00a2482b 	sltu	t1,a1,v0
9d00c678:	15200006 	bnez	t1,9d00c694 <__udivdi3+0x410>
9d00c67c:	2463ffff 	addiu	v1,v1,-1
9d00c680:	00a4482b 	sltu	t1,a1,a0
9d00c684:	51200004 	beqzl	t1,9d00c698 <__udivdi3+0x414>
9d00c688:	00063400 	sll	a2,a2,0x10
9d00c68c:	2463ffff 	addiu	v1,v1,-1
9d00c690:	00a22821 	addu	a1,a1,v0
9d00c694:	00063400 	sll	a2,a2,0x10
9d00c698:	00a42823 	subu	a1,a1,a0
9d00c69c:	0b4030fb 	j	9d00c3ec <__udivdi3+0x168>
9d00c6a0:	00661825 	or	v1,v1,a2
9d00c6a4:	006a182b 	sltu	v1,v1,t2
9d00c6a8:	1060ff34 	beqz	v1,9d00c37c <__udivdi3+0xf8>
9d00c6ac:	01202021 	move	a0,t1
9d00c6b0:	2524ffff 	addiu	a0,t1,-1
9d00c6b4:	0b4030df 	j	9d00c37c <__udivdi3+0xf8>
9d00c6b8:	00001821 	move	v1,zero
9d00c6bc:	0b4030df 	j	9d00c37c <__udivdi3+0xf8>
9d00c6c0:	24040001 	li	a0,1
9d00c6c4:	0b40310f 	j	9d00c43c <__udivdi3+0x1b8>
9d00c6c8:	00a22821 	addu	a1,a1,v0

9d00c6cc <__umoddi3>:
9d00c6cc:	00c04021 	move	t0,a2
9d00c6d0:	00804821 	move	t1,a0
9d00c6d4:	14e0003c 	bnez	a3,9d00c7c8 <__umoddi3+0xfc>
9d00c6d8:	00a01821 	move	v1,a1
9d00c6dc:	00a6102b 	sltu	v0,a1,a2
9d00c6e0:	1040004a 	beqz	v0,9d00c80c <__umoddi3+0x140>
9d00c6e4:	70c21020 	clz	v0,a2
9d00c6e8:	50400008 	beqzl	v0,9d00c70c <__umoddi3+0x40>
9d00c6ec:	00083402 	srl	a2,t0,0x10
9d00c6f0:	00022023 	negu	a0,v0
9d00c6f4:	00892006 	srlv	a0,t1,a0
9d00c6f8:	00451804 	sllv	v1,a1,v0
9d00c6fc:	00464004 	sllv	t0,a2,v0
9d00c700:	00831825 	or	v1,a0,v1
9d00c704:	00494804 	sllv	t1,t1,v0
9d00c708:	00083402 	srl	a2,t0,0x10
9d00c70c:	0066001b 	divu	zero,v1,a2
9d00c710:	00c001f4 	teq	a2,zero,0x7
9d00c714:	310cffff 	andi	t4,t0,0xffff
9d00c718:	00092402 	srl	a0,t1,0x10
9d00c71c:	00005812 	mflo	t3
9d00c720:	00005010 	mfhi	t2
9d00c724:	000a5400 	sll	t2,t2,0x10
9d00c728:	01445025 	or	t2,t2,a0
9d00c72c:	716c5802 	mul	t3,t3,t4
9d00c730:	014b682b 	sltu	t5,t2,t3
9d00c734:	0066001b 	divu	zero,v1,a2
9d00c738:	00c001f4 	teq	a2,zero,0x7
9d00c73c:	51a00009 	beqzl	t5,9d00c764 <__umoddi3+0x98>
9d00c740:	014b5023 	subu	t2,t2,t3
9d00c744:	01485021 	addu	t2,t2,t0
9d00c748:	0148182b 	sltu	v1,t2,t0
9d00c74c:	54600005 	bnezl	v1,9d00c764 <__umoddi3+0x98>
9d00c750:	014b5023 	subu	t2,t2,t3
9d00c754:	014b202b 	sltu	a0,t2,t3
9d00c758:	01481821 	addu	v1,t2,t0
9d00c75c:	0064500b 	movn	t2,v1,a0
9d00c760:	014b5023 	subu	t2,t2,t3
9d00c764:	0146001b 	divu	zero,t2,a2
9d00c768:	00c001f4 	teq	a2,zero,0x7
9d00c76c:	3129ffff 	andi	t1,t1,0xffff
9d00c770:	00002012 	mflo	a0
9d00c774:	00001810 	mfhi	v1
9d00c778:	00031c00 	sll	v1,v1,0x10
9d00c77c:	00694825 	or	t1,v1,t1
9d00c780:	708c2002 	mul	a0,a0,t4
9d00c784:	0124182b 	sltu	v1,t1,a0
9d00c788:	0146001b 	divu	zero,t2,a2
9d00c78c:	00c001f4 	teq	a2,zero,0x7
9d00c790:	50600009 	beqzl	v1,9d00c7b8 <__umoddi3+0xec>
9d00c794:	01244823 	subu	t1,t1,a0
9d00c798:	01284821 	addu	t1,t1,t0
9d00c79c:	0128182b 	sltu	v1,t1,t0
9d00c7a0:	54600005 	bnezl	v1,9d00c7b8 <__umoddi3+0xec>
9d00c7a4:	01244823 	subu	t1,t1,a0
9d00c7a8:	0124182b 	sltu	v1,t1,a0
9d00c7ac:	01284021 	addu	t0,t1,t0
9d00c7b0:	0103480b 	movn	t1,t0,v1
9d00c7b4:	01244823 	subu	t1,t1,a0
9d00c7b8:	00491006 	srlv	v0,t1,v0
9d00c7bc:	00001821 	move	v1,zero
9d00c7c0:	03e00008 	jr	ra
9d00c7c4:	00000000 	nop
9d00c7c8:	00a7102b 	sltu	v0,a1,a3
9d00c7cc:	14400048 	bnez	v0,9d00c8f0 <__umoddi3+0x224>
9d00c7d0:	70e84020 	clz	t0,a3
9d00c7d4:	1500004a 	bnez	t0,9d00c900 <__umoddi3+0x234>
9d00c7d8:	240a0020 	li	t2,32
9d00c7dc:	00e5102b 	sltu	v0,a3,a1
9d00c7e0:	14400005 	bnez	v0,9d00c7f8 <__umoddi3+0x12c>
9d00c7e4:	00861023 	subu	v0,a0,a2
9d00c7e8:	0086402b 	sltu	t0,a0,a2
9d00c7ec:	1500fff4 	bnez	t0,9d00c7c0 <__umoddi3+0xf4>
9d00c7f0:	00801021 	move	v0,a0
9d00c7f4:	00861023 	subu	v0,a0,a2
9d00c7f8:	00a71823 	subu	v1,a1,a3
9d00c7fc:	0082202b 	sltu	a0,a0,v0
9d00c800:	00641823 	subu	v1,v1,a0
9d00c804:	03e00008 	jr	ra
9d00c808:	00000000 	nop
9d00c80c:	14c00006 	bnez	a2,9d00c828 <__umoddi3+0x15c>
9d00c810:	71021020 	clz	v0,t0
9d00c814:	24020001 	li	v0,1
9d00c818:	0046001b 	divu	zero,v0,a2
9d00c81c:	00c001f4 	teq	a2,zero,0x7
9d00c820:	00004012 	mflo	t0
9d00c824:	71021020 	clz	v0,t0
9d00c828:	5440007d 	bnezl	v0,9d00ca20 <__umoddi3+0x354>
9d00c82c:	24090020 	li	t1,32
9d00c830:	00a82823 	subu	a1,a1,t0
9d00c834:	00081c02 	srl	v1,t0,0x10
9d00c838:	3107ffff 	andi	a3,t0,0xffff
9d00c83c:	00a3001b 	divu	zero,a1,v1
9d00c840:	006001f4 	teq	v1,zero,0x7
9d00c844:	00095402 	srl	t2,t1,0x10
9d00c848:	00002012 	mflo	a0
9d00c84c:	00003010 	mfhi	a2
9d00c850:	00063400 	sll	a2,a2,0x10
9d00c854:	00ca3025 	or	a2,a2,t2
9d00c858:	70872002 	mul	a0,a0,a3
9d00c85c:	00c4502b 	sltu	t2,a2,a0
9d00c860:	00a3001b 	divu	zero,a1,v1
9d00c864:	006001f4 	teq	v1,zero,0x7
9d00c868:	51400009 	beqzl	t2,9d00c890 <__umoddi3+0x1c4>
9d00c86c:	00c43023 	subu	a2,a2,a0
9d00c870:	00c83021 	addu	a2,a2,t0
9d00c874:	00c8282b 	sltu	a1,a2,t0
9d00c878:	54a00005 	bnezl	a1,9d00c890 <__umoddi3+0x1c4>
9d00c87c:	00c43023 	subu	a2,a2,a0
9d00c880:	00c4502b 	sltu	t2,a2,a0
9d00c884:	00c82821 	addu	a1,a2,t0
9d00c888:	00aa300b 	movn	a2,a1,t2
9d00c88c:	00c43023 	subu	a2,a2,a0
9d00c890:	00c3001b 	divu	zero,a2,v1
9d00c894:	006001f4 	teq	v1,zero,0x7
9d00c898:	3129ffff 	andi	t1,t1,0xffff
9d00c89c:	00002812 	mflo	a1
9d00c8a0:	00002010 	mfhi	a0
9d00c8a4:	00042400 	sll	a0,a0,0x10
9d00c8a8:	00894825 	or	t1,a0,t1
9d00c8ac:	70a73802 	mul	a3,a1,a3
9d00c8b0:	0127202b 	sltu	a0,t1,a3
9d00c8b4:	00c3001b 	divu	zero,a2,v1
9d00c8b8:	006001f4 	teq	v1,zero,0x7
9d00c8bc:	50800009 	beqzl	a0,9d00c8e4 <__umoddi3+0x218>
9d00c8c0:	01274823 	subu	t1,t1,a3
9d00c8c4:	01284821 	addu	t1,t1,t0
9d00c8c8:	0128182b 	sltu	v1,t1,t0
9d00c8cc:	54600005 	bnezl	v1,9d00c8e4 <__umoddi3+0x218>
9d00c8d0:	01274823 	subu	t1,t1,a3
9d00c8d4:	0127182b 	sltu	v1,t1,a3
9d00c8d8:	01284021 	addu	t0,t1,t0
9d00c8dc:	0103480b 	movn	t1,t0,v1
9d00c8e0:	01274823 	subu	t1,t1,a3
9d00c8e4:	00491006 	srlv	v0,t1,v0
9d00c8e8:	0b4031f0 	j	9d00c7c0 <__umoddi3+0xf4>
9d00c8ec:	00001821 	move	v1,zero
9d00c8f0:	00801021 	move	v0,a0
9d00c8f4:	00a01821 	move	v1,a1
9d00c8f8:	03e00008 	jr	ra
9d00c8fc:	00000000 	nop
9d00c900:	01485023 	subu	t2,t2,t0
9d00c904:	01461006 	srlv	v0,a2,t2
9d00c908:	01073804 	sllv	a3,a3,t0
9d00c90c:	00473825 	or	a3,v0,a3
9d00c910:	01455806 	srlv	t3,a1,t2
9d00c914:	00074c02 	srl	t1,a3,0x10
9d00c918:	0169001b 	divu	zero,t3,t1
9d00c91c:	012001f4 	teq	t1,zero,0x7
9d00c920:	30e3ffff 	andi	v1,a3,0xffff
9d00c924:	01446806 	srlv	t5,a0,t2
9d00c928:	01052804 	sllv	a1,a1,t0
9d00c92c:	01a52825 	or	a1,t5,a1
9d00c930:	00056c02 	srl	t5,a1,0x10
9d00c934:	01063004 	sllv	a2,a2,t0
9d00c938:	00006012 	mflo	t4
9d00c93c:	00001010 	mfhi	v0
9d00c940:	00021400 	sll	v0,v0,0x10
9d00c944:	004d1025 	or	v0,v0,t5
9d00c948:	0169001b 	divu	zero,t3,t1
9d00c94c:	012001f4 	teq	t1,zero,0x7
9d00c950:	71835802 	mul	t3,t4,v1
9d00c954:	004b682b 	sltu	t5,v0,t3
9d00c958:	11a0000a 	beqz	t5,9d00c984 <__umoddi3+0x2b8>
9d00c95c:	01042004 	sllv	a0,a0,t0
9d00c960:	00471021 	addu	v0,v0,a3
9d00c964:	0047682b 	sltu	t5,v0,a3
9d00c968:	15a00006 	bnez	t5,9d00c984 <__umoddi3+0x2b8>
9d00c96c:	258cffff 	addiu	t4,t4,-1
9d00c970:	004b682b 	sltu	t5,v0,t3
9d00c974:	51a00004 	beqzl	t5,9d00c988 <__umoddi3+0x2bc>
9d00c978:	004b1023 	subu	v0,v0,t3
9d00c97c:	258cffff 	addiu	t4,t4,-1
9d00c980:	00471021 	addu	v0,v0,a3
9d00c984:	004b1023 	subu	v0,v0,t3
9d00c988:	0049001b 	divu	zero,v0,t1
9d00c98c:	012001f4 	teq	t1,zero,0x7
9d00c990:	30a5ffff 	andi	a1,a1,0xffff
9d00c994:	00005812 	mflo	t3
9d00c998:	00006810 	mfhi	t5
9d00c99c:	0049001b 	divu	zero,v0,t1
9d00c9a0:	012001f4 	teq	t1,zero,0x7
9d00c9a4:	000d1400 	sll	v0,t5,0x10
9d00c9a8:	00452825 	or	a1,v0,a1
9d00c9ac:	71634802 	mul	t1,t3,v1
9d00c9b0:	00a9102b 	sltu	v0,a1,t1
9d00c9b4:	50400006 	beqzl	v0,9d00c9d0 <__umoddi3+0x304>
9d00c9b8:	000c6400 	sll	t4,t4,0x10
9d00c9bc:	00a72821 	addu	a1,a1,a3
9d00c9c0:	00a7102b 	sltu	v0,a1,a3
9d00c9c4:	1040004d 	beqz	v0,9d00cafc <__umoddi3+0x430>
9d00c9c8:	256bffff 	addiu	t3,t3,-1
9d00c9cc:	000c6400 	sll	t4,t4,0x10
9d00c9d0:	016c5825 	or	t3,t3,t4
9d00c9d4:	01660019 	multu	t3,a2
9d00c9d8:	00a92823 	subu	a1,a1,t1
9d00c9dc:	0000c810 	mfhi	t9
9d00c9e0:	00b9682b 	sltu	t5,a1,t9
9d00c9e4:	03207021 	move	t6,t9
9d00c9e8:	15a0003e 	bnez	t5,9d00cae4 <__umoddi3+0x418>
9d00c9ec:	00004812 	mflo	t1
9d00c9f0:	10b9004b 	beq	a1,t9,9d00cb20 <__umoddi3+0x454>
9d00c9f4:	00b91823 	subu	v1,a1,t9
9d00c9f8:	00001012 	mflo	v0
9d00c9fc:	00821023 	subu	v0,a0,v0
9d00ca00:	0082202b 	sltu	a0,a0,v0
9d00ca04:	00641823 	subu	v1,v1,a0
9d00ca08:	01435004 	sllv	t2,v1,t2
9d00ca0c:	01021006 	srlv	v0,v0,t0
9d00ca10:	004a1025 	or	v0,v0,t2
9d00ca14:	01031806 	srlv	v1,v1,t0
9d00ca18:	03e00008 	jr	ra
9d00ca1c:	00000000 	nop
9d00ca20:	01224823 	subu	t1,t1,v0
9d00ca24:	00484004 	sllv	t0,t0,v0
9d00ca28:	01253006 	srlv	a2,a1,t1
9d00ca2c:	00081c02 	srl	v1,t0,0x10
9d00ca30:	00c3001b 	divu	zero,a2,v1
9d00ca34:	006001f4 	teq	v1,zero,0x7
9d00ca38:	3107ffff 	andi	a3,t0,0xffff
9d00ca3c:	01245806 	srlv	t3,a0,t1
9d00ca40:	00452804 	sllv	a1,a1,v0
9d00ca44:	01655825 	or	t3,t3,a1
9d00ca48:	000b2c02 	srl	a1,t3,0x10
9d00ca4c:	00444804 	sllv	t1,a0,v0
9d00ca50:	00005012 	mflo	t2
9d00ca54:	00006010 	mfhi	t4
9d00ca58:	000c2400 	sll	a0,t4,0x10
9d00ca5c:	00a42025 	or	a0,a1,a0
9d00ca60:	71475002 	mul	t2,t2,a3
9d00ca64:	008a282b 	sltu	a1,a0,t2
9d00ca68:	00c3001b 	divu	zero,a2,v1
9d00ca6c:	006001f4 	teq	v1,zero,0x7
9d00ca70:	50a00006 	beqzl	a1,9d00ca8c <__umoddi3+0x3c0>
9d00ca74:	008a2023 	subu	a0,a0,t2
9d00ca78:	00882021 	addu	a0,a0,t0
9d00ca7c:	0088282b 	sltu	a1,a0,t0
9d00ca80:	10a00024 	beqz	a1,9d00cb14 <__umoddi3+0x448>
9d00ca84:	008a302b 	sltu	a2,a0,t2
9d00ca88:	008a2023 	subu	a0,a0,t2
9d00ca8c:	0083001b 	divu	zero,a0,v1
9d00ca90:	006001f4 	teq	v1,zero,0x7
9d00ca94:	316bffff 	andi	t3,t3,0xffff
9d00ca98:	00003012 	mflo	a2
9d00ca9c:	00002810 	mfhi	a1
9d00caa0:	00052c00 	sll	a1,a1,0x10
9d00caa4:	00ab2825 	or	a1,a1,t3
9d00caa8:	70c73002 	mul	a2,a2,a3
9d00caac:	00a6502b 	sltu	t2,a1,a2
9d00cab0:	0083001b 	divu	zero,a0,v1
9d00cab4:	006001f4 	teq	v1,zero,0x7
9d00cab8:	5140ff60 	beqzl	t2,9d00c83c <__umoddi3+0x170>
9d00cabc:	00a62823 	subu	a1,a1,a2
9d00cac0:	00a82821 	addu	a1,a1,t0
9d00cac4:	00a8202b 	sltu	a0,a1,t0
9d00cac8:	5480ff5c 	bnezl	a0,9d00c83c <__umoddi3+0x170>
9d00cacc:	00a62823 	subu	a1,a1,a2
9d00cad0:	00a6502b 	sltu	t2,a1,a2
9d00cad4:	00a82021 	addu	a0,a1,t0
9d00cad8:	008a280b 	movn	a1,a0,t2
9d00cadc:	0b40320f 	j	9d00c83c <__umoddi3+0x170>
9d00cae0:	00a62823 	subu	a1,a1,a2
9d00cae4:	01261023 	subu	v0,t1,a2
9d00cae8:	01c71823 	subu	v1,t6,a3
9d00caec:	0122482b 	sltu	t1,t1,v0
9d00caf0:	00691823 	subu	v1,v1,t1
9d00caf4:	0b40327f 	j	9d00c9fc <__umoddi3+0x330>
9d00caf8:	00a31823 	subu	v1,a1,v1
9d00cafc:	00a9102b 	sltu	v0,a1,t1
9d00cb00:	5040ffb3 	beqzl	v0,9d00c9d0 <__umoddi3+0x304>
9d00cb04:	000c6400 	sll	t4,t4,0x10
9d00cb08:	256bffff 	addiu	t3,t3,-1
9d00cb0c:	0b403273 	j	9d00c9cc <__umoddi3+0x300>
9d00cb10:	00a72821 	addu	a1,a1,a3
9d00cb14:	00882821 	addu	a1,a0,t0
9d00cb18:	0b4032a2 	j	9d00ca88 <__umoddi3+0x3bc>
9d00cb1c:	00a6200b 	movn	a0,a1,a2
9d00cb20:	0089182b 	sltu	v1,a0,t1
9d00cb24:	5460fff0 	bnezl	v1,9d00cae8 <__umoddi3+0x41c>
9d00cb28:	01261023 	subu	v0,t1,a2
9d00cb2c:	00001012 	mflo	v0
9d00cb30:	0b40327f 	j	9d00c9fc <__umoddi3+0x330>
9d00cb34:	00001821 	move	v1,zero

9d00cb38 <__eqdf2>:
9d00cb38:	7ca35500 	ext	v1,a1,0x14,0xb
9d00cb3c:	240907ff 	li	t1,2047
9d00cb40:	7caa9800 	ext	t2,a1,0x0,0x14
9d00cb44:	7ceb9800 	ext	t3,a3,0x0,0x14
9d00cb48:	7ce85500 	ext	t0,a3,0x14,0xb
9d00cb4c:	00052fc2 	srl	a1,a1,0x1f
9d00cb50:	10690011 	beq	v1,t1,9d00cb98 <__eqdf2+0x60>
9d00cb54:	00073fc2 	srl	a3,a3,0x1f
9d00cb58:	240907ff 	li	t1,2047
9d00cb5c:	11090014 	beq	t0,t1,9d00cbb0 <__eqdf2+0x78>
9d00cb60:	01664825 	or	t1,t3,a2
9d00cb64:	14680014 	bne	v1,t0,9d00cbb8 <__eqdf2+0x80>
9d00cb68:	24020001 	li	v0,1
9d00cb6c:	154b0012 	bne	t2,t3,9d00cbb8 <__eqdf2+0x80>
9d00cb70:	00000000 	nop
9d00cb74:	14860010 	bne	a0,a2,9d00cbb8 <__eqdf2+0x80>
9d00cb78:	00000000 	nop
9d00cb7c:	10a7000e 	beq	a1,a3,9d00cbb8 <__eqdf2+0x80>
9d00cb80:	00001021 	move	v0,zero
9d00cb84:	1460000c 	bnez	v1,9d00cbb8 <__eqdf2+0x80>
9d00cb88:	24020001 	li	v0,1
9d00cb8c:	01442025 	or	a0,t2,a0
9d00cb90:	03e00008 	jr	ra
9d00cb94:	0004102b 	sltu	v0,zero,a0
9d00cb98:	01444825 	or	t1,t2,a0
9d00cb9c:	15200006 	bnez	t1,9d00cbb8 <__eqdf2+0x80>
9d00cba0:	24020001 	li	v0,1
9d00cba4:	240907ff 	li	t1,2047
9d00cba8:	1509ffee 	bne	t0,t1,9d00cb64 <__eqdf2+0x2c>
9d00cbac:	01664825 	or	t1,t3,a2
9d00cbb0:	1120ffec 	beqz	t1,9d00cb64 <__eqdf2+0x2c>
9d00cbb4:	24020001 	li	v0,1
9d00cbb8:	03e00008 	jr	ra
9d00cbbc:	00000000 	nop

9d00cbc0 <__errno>:
9d00cbc0:	3c02a000 	lui	v0,0xa000
9d00cbc4:	03e00008 	jr	ra
9d00cbc8:	8c420958 	lw	v0,2392(v0)

9d00cbcc <__do_global_ctors_aux>:
9d00cbcc:	3c029d01 	lui	v0,0x9d01
9d00cbd0:	8c42cc68 	lw	v0,-13208(v0)
9d00cbd4:	27bdffe0 	addiu	sp,sp,-32
9d00cbd8:	2403ffff 	li	v1,-1
9d00cbdc:	afbf001c 	sw	ra,28(sp)
9d00cbe0:	afb10018 	sw	s1,24(sp)
9d00cbe4:	10430009 	beq	v0,v1,9d00cc0c <__do_global_ctors_aux+0x40>
9d00cbe8:	afb00014 	sw	s0,20(sp)
9d00cbec:	3c119d01 	lui	s1,0x9d01
9d00cbf0:	2631cc68 	addiu	s1,s1,-13208
9d00cbf4:	2410ffff 	li	s0,-1
9d00cbf8:	0040f809 	jalr	v0
9d00cbfc:	2631fffc 	addiu	s1,s1,-4
9d00cc00:	8e220000 	lw	v0,0(s1)
9d00cc04:	1450fffc 	bne	v0,s0,9d00cbf8 <__do_global_ctors_aux+0x2c>
9d00cc08:	00000000 	nop
9d00cc0c:	8fbf001c 	lw	ra,28(sp)
9d00cc10:	8fb10018 	lw	s1,24(sp)
9d00cc14:	8fb00014 	lw	s0,20(sp)
9d00cc18:	03e00008 	jr	ra
9d00cc1c:	27bd0020 	addiu	sp,sp,32

Disassembly of section .init:

9d00cc20 <_init>:
9d00cc20:	27bdffe0 	addiu	sp,sp,-32
9d00cc24:	afbf0014 	sw	ra,20(sp)
9d00cc28:	0f40070f 	jal	9d001c3c <frame_dummy>
9d00cc2c:	00000000 	nop
9d00cc30:	0f4032f3 	jal	9d00cbcc <__do_global_ctors_aux>
9d00cc34:	00000000 	nop
9d00cc38:	8fbf0014 	lw	ra,20(sp)
9d00cc3c:	03e00008 	jr	ra
9d00cc40:	27bd0020 	addiu	sp,sp,32

Disassembly of section .fini:

9d00cc44 <_fini>:
9d00cc44:	27bdffe0 	addiu	sp,sp,-32
9d00cc48:	afbf0014 	sw	ra,20(sp)
9d00cc4c:	0f4006e0 	jal	9d001b80 <__do_global_dtors_aux>
9d00cc50:	00000000 	nop
9d00cc54:	8fbf0014 	lw	ra,20(sp)
9d00cc58:	03e00008 	jr	ra
9d00cc5c:	27bd0020 	addiu	sp,sp,32
